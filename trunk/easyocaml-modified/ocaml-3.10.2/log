[INF ezyErrors] Selected language: en
[DBG ezySetup] easyocaml setup: features = Some ({expr: {simple var: true
                                                         qual var: true
                                                         constant: true
                                                         let in: {pattern: {
                                                                  wildcard: true
                                                                  var: true
                                                                  constant: true
                                                                  constructor: true
                                                                  list: true
                                                                  array: true
                                                                  tuple: true
                                                                  type annot: true
                                                                  or: true
                                                                  record: true
                                                                  alias: true
                                                                  nested: true}
                                                                  and: true args: true}
                                                         let rec in: {
                                                         and: true args: true}
                                                         function: {pattern: 
                                                                    {
                                                                    wildcard: true
                                                                    var: true
                                                                    constant: true
                                                                    constructor: true
                                                                    list: true
                                                                    array: true
                                                                    tuple: true
                                                                    type annot: true
                                                                    or: true
                                                                    record: true
                                                                    alias: true
                                                                    nested: true}
                                                                    fun: true}
                                                         list: true
                                                         match: {wildcard: true
                                                                 var: true
                                                                 constant: true
                                                                 constructor: true
                                                                 list: true
                                                                 array: true
                                                                 tuple: true
                                                                 type annot: true
                                                                 or: true
                                                                 record: true
                                                                 alias: true
                                                                 nested: true}
                                                         try: {wildcard: true
                                                               var: true
                                                               constant: true
                                                               constructor: true
                                                               list: true
                                                               array: true
                                                               tuple: true
                                                               type annot: true
                                                               or: true
                                                               record: true
                                                               alias: true
                                                               nested: true}
                                                         raise: true
                                                         tuple: true
                                                         constructor: true
                                                         record constr: true
                                                         rec func update: true
                                                         rec field acc: true
                                                         rec field update: true
                                                         reference update: true
                                                         if then: true
                                                         if then else: true
                                                         array: true
                                                         array update: true
                                                         string acc: true
                                                         sequence: true
                                                         while: true
                                                         for: true
                                                         assert: true
                                                         type annot: true}
                                                  structure items: {annot optional: true
                                                                    eval: true
                                                                    let: {
                                                                    pattern: {
                                                                    wildcard: true
                                                                    var: true
                                                                    constant: true
                                                                    constructor: true
                                                                    list: true
                                                                    array: true
                                                                    tuple: true
                                                                    type annot: true
                                                                    or: true
                                                                    record: true
                                                                    alias: true
                                                                    nested: true}
                                                                    and: true args: true}
                                                                    let rec: {
                                                                    and: true
                                                                    args: true}
                                                                    type: {
                                                                    synonym: true
                                                                    variant: true
                                                                    record: Some (true)
                                                                    polymorphic: true and: true}
                                                                    exception: true
                                                                    open: true
                                                                    semi semi optional: true}}); modules = None; inc_dirs = ; obj_files = 
[DBG topmain] registering EzyCamlgrammar
[INF ezy_gram] Restricting by EzyCamlgrammar
[DBG typing] Conf.load_path: [, /home/zhdf/easyocaml-0.49/ocaml-3.10.2/lib/ocaml]
[DBG enr_ast] Ocaml ast: [
  structure_item (/home/zhdf/demo/ml/sudoku1.ml[2,24+4]../home/zhdf/demo/ml/sudoku1.ml[5,128+8])
    Pstr_type
    [
      "board"
        type_declaration (/home/zhdf/demo/ml/sudoku1.ml[2,24+21]../home/zhdf/demo/ml/sudoku1.ml[2,24+26])
          ptype_params =
            []
          ptype_cstrs =
            []
          ptype_kind =
            Ptype_abstract
          ptype_manifest =
            Some
              core_type (/home/zhdf/demo/ml/sudoku1.ml[2,24+21]../home/zhdf/demo/ml/sudoku1.ml[2,24+26])
                Ptyp_constr "array"
                [
                  core_type (/home/zhdf/demo/ml/sudoku1.ml[2,24+17]../home/zhdf/demo/ml/sudoku1.ml[2,24+20])
                    Ptyp_constr "int"
                    []
                ]
    ]
]

[DBG env] Adding field contents
[DBG typing] Type structure in env:
               Values: !: (Pervasives.ref b -> b);
               &&: (bool -> (bool -> bool)); &: (bool -> (bool -> bool));
               !=: (c -> (c -> bool)); **: (float -> (float -> float));
               +: (int -> (int -> int)); *.: (float -> (float -> float));
               -: (int -> (int -> int)); /: (int -> (int -> int));
               -.: (float -> (float -> float));
               +.: (float -> (float -> float)); *: (int -> (int -> int));
               <: (g -> (g -> bool)); :=: (Pervasives.ref d -> (d -> unit));
               =: (v -> (v -> bool)); <>: (e -> (e -> bool));
               >=: (s -> (s -> bool)); >: (i -> (i -> bool));
               ==: (h -> (h -> bool)); <=: (f -> (f -> bool));
               /.: (float -> (float -> float));
               ^: (string -> (string -> string)); abs: (int -> int);
               ^^: (format6 k l m n o p -> (format6 p l m o q r -> format6 k l m n q r));
               acos: (float -> float); asr: (int -> (int -> int));
               at_exit: ((unit -> unit) -> unit); asin: (float -> float);
               abs_float: (float -> float);
               atan2: (float -> (float -> float));
               bool_of_string: (string -> bool);
               classify_float: (float -> Pervasives.fpclass);
               char_of_int: (int -> char);
               close_in_noerr: (Pervasives.in_channel -> unit);
               close_in: (Pervasives.in_channel -> unit);
               ceil: (float -> float); atan: (float -> float);
               @: (list j -> (list j -> list j));
               close_out_noerr: (Pervasives.out_channel -> unit);
               cos: (float -> float); cosh: (float -> float);
               compare: (t -> (t -> int)); epsilon_float: float;
               do_at_exit: (unit -> unit);
               decr: (Pervasives.ref int -> unit); failwith: (string -> i1);
               exp: (float -> float); float_of_int: (int -> float);
               float: (int -> float); floor: (float -> float);
               flush: (Pervasives.out_channel -> unit);
               frexp: (float -> (float , int));
               format_of_string: (format6 w x y a1 b1 c1 -> format6 w x y a1 b1 c1);
               flush_all: (unit -> unit); float_of_string: (string -> float);
               exit: (int -> u); ignore: (f1 -> unit); infinity: float;
               incr: (Pervasives.ref int -> unit);
               in_channel_length: (Pervasives.in_channel -> int);
               input_byte: (Pervasives.in_channel -> int);
               input_binary_int: (Pervasives.in_channel -> int);
               input: (Pervasives.in_channel -> (string -> (int -> (int -> int))));
               input_line: (Pervasives.in_channel -> string);
               int_of_float: (float -> int); int_of_char: (char -> int);
               input_value: (Pervasives.in_channel -> g1);
               land: (int -> (int -> int)); invalid_arg: (string -> h1);
               log: (float -> float); lnot: (int -> int);
               lor: (int -> (int -> int)); log10: (float -> float);
               ldexp: (float -> (int -> float));
               int_of_string: (string -> int);
               input_char: (Pervasives.in_channel -> char);
               fst: ((d1 , e1) -> d1);
               close_out: (Pervasives.out_channel -> unit);
               lsr: (int -> (int -> int)); max: (k1 -> (k1 -> k1));
               max_float: float; lxor: (int -> (int -> int));
               min: (j1 -> (j1 -> j1)); mod: (int -> (int -> int));
               min_int: int; min_float: float; max_int: int;
               modf: (float -> (float , float)); neg_infinity: float;
               nan: float; open_in: (string -> Pervasives.in_channel);
               open_in_bin: (string -> Pervasives.in_channel);
               not: (bool -> bool);
               open_out: (string -> Pervasives.out_channel);
               or: (bool -> (bool -> bool));
               open_out_gen: (list Pervasives.open_flag -> (int -> (string -> Pervasives.out_channel)));
               open_out_bin: (string -> Pervasives.out_channel);
               output: (Pervasives.out_channel -> (string -> (int -> (int -> unit))));
               output_byte: (Pervasives.out_channel -> (int -> unit));
               output_binary_int: (Pervasives.out_channel -> (int -> unit));
               out_channel_length: (Pervasives.out_channel -> int);
               open_in_gen: (list Pervasives.open_flag -> (int -> (string -> Pervasives.in_channel)));
               mod_float: (float -> (float -> float));
               output_string: (Pervasives.out_channel -> (string -> unit));
               output_value: (Pervasives.out_channel -> (l1 -> unit));
               pos_out: (Pervasives.out_channel -> int);
               pos_in: (Pervasives.in_channel -> int);
               prerr_char: (char -> unit); prerr_float: (float -> unit);
               prerr_int: (int -> unit); prerr_endline: (string -> unit);
               pred: (int -> int); prerr_string: (string -> unit);
               print_float: (float -> unit); print_endline: (string -> unit);
               print_char: (char -> unit); print_newline: (unit -> unit);
               raise: (exn -> m1); print_string: (string -> unit);
               print_int: (int -> unit); read_int: (unit -> int);
               really_input: (Pervasives.in_channel -> (string -> (int -> (int -> unit))));
               read_line: (unit -> string);
               seek_in: (Pervasives.in_channel -> (int -> unit));
               ref: (n1 -> Pervasives.ref n1); read_float: (unit -> float);
               prerr_newline: (unit -> unit);
               set_binary_mode_out: (Pervasives.out_channel -> (bool -> unit));
               set_binary_mode_in: (Pervasives.in_channel -> (bool -> unit));
               sinh: (float -> float); sin: (float -> float);
               sqrt: (float -> float); stderr: Pervasives.out_channel;
               string_of_bool: (bool -> string);
               stdout: Pervasives.out_channel; stdin: Pervasives.in_channel;
               snd: ((o1 , p1) -> p1);
               string_of_format: (format6 q1 r1 s1 t1 u1 v1 -> string);
               tan: (float -> float); succ: (int -> int);
               string_of_int: (int -> string); truncate: (float -> int);
               unsafe_really_input: (Pervasives.in_channel -> (string -> (int -> (int -> unit))));
               ||: (bool -> (bool -> bool)); ~-.: (float -> float);
               ~-: (int -> int); valid_float_lexem: (string -> string);
               tanh: (float -> float); string_of_float: (float -> string);
               seek_out: (Pervasives.out_channel -> (int -> unit));
               output_char: (Pervasives.out_channel -> (char -> unit));
               lsl: (int -> (int -> int)); 
               Types: type (w1) array = <abstr>; type () char = <abstr>;
               type () bool = | false | true ; type () float = <abstr>;
               type (x1, y1, a2) format = Pervasives.format4 x1 y1 a2 a2;
               type () exn = ;
               type (f2, g2, h2, i2, j2, k2) format6 = <abstr>;
               type () int = <abstr>; type () in_channel = <abstr>;
               type () fpclass = | FP_infinite | FP_nan | FP_normal | FP_subnormal | FP_zero ;
               type (b2, c2, d2, e2) format4 = format6 b2 c2 d2 d2 d2 e2;
               type () int64 = <abstr>;
               type (m2) list = | :: of m2 * list m2 | [] ;
               type (l2) lazy_t = <abstr>;
               type (o2) option = | None | Some of o2 ;
               type () open_flag = | Open_append | Open_binary | Open_creat | Open_excl | Open_nonblock | Open_rdonly | Open_text | Open_trunc | Open_wronly ;
               type (n2) ref = {contents -> Mutablen2; };
               type () unit = | () ; type () string = <abstr>;
               type () out_channel = <abstr>; type () nativeint = <abstr>;
               type () int32 = <abstr>; 
[DBG generate] for_structure_item at 2,4-5,8
  type board =  .
       core_type (/home/zhdf/demo/ml/sudoku1.ml[2,24+21]../home/zhdf/demo/ml/sudoku1.ml[2,24+26])
  Ptyp_constr "array"
  [
    core_type (/home/zhdf/demo/ml/sudoku1.ml[2,24+17]../home/zhdf/demo/ml/sudoku1.ml[2,24+20])
      Ptyp_constr "int"
      []
  ]
:
  {}
[DBG generate] Generated for strit, resulting env:
Values: 
  Types: type () board = array int; 
[INF typing] 0 constraints generated.
[DBG typing] generated constraints: {}
[DBG typing] Unifying {}
[INF typing] Constraints unified successfully.
[DBG typing] Resulting tyvarsubst: 
[INF typing] checked annotations
[INF typing] Constraints solved
[INF typing] Succeeded typing structure type board with substitution 
  and env enriched by Values:  Types: type () board = array int; 
[DBG ast_comp] Succeeded for:  <not interesting>
[INF ast_comp] Success comparing ecaml/ocaml typing
[DBG typing] Conf.load_path: [, /home/zhdf/easyocaml-0.49/ocaml-3.10.2/lib/ocaml]
[DBG enr_ast] Ocaml ast: [
  structure_item (/home/zhdf/demo/ml/sudoku1.ml[5,128+4]../home/zhdf/demo/ml/sudoku1.ml[9,265+7])
    Pstr_type
    [
      "rectangle"
        type_declaration (/home/zhdf/demo/ml/sudoku1.ml[5,128+25]../home/zhdf/demo/ml/sudoku1.ml[5,128+42])
          ptype_params =
            []
          ptype_cstrs =
            []
          ptype_kind =
            Ptype_abstract
          ptype_manifest =
            Some
              core_type (/home/zhdf/demo/ml/sudoku1.ml[5,128+25]../home/zhdf/demo/ml/sudoku1.ml[5,128+42])
                Ptyp_tuple
                [
                  core_type (/home/zhdf/demo/ml/sudoku1.ml[5,128+21]../home/zhdf/demo/ml/sudoku1.ml[5,128+24])
                    Ptyp_constr "int"
                    []
                  core_type (/home/zhdf/demo/ml/sudoku1.ml[5,128+27]../home/zhdf/demo/ml/sudoku1.ml[5,128+30])
                    Ptyp_constr "int"
                    []
                  core_type (/home/zhdf/demo/ml/sudoku1.ml[5,128+33]../home/zhdf/demo/ml/sudoku1.ml[5,128+36])
                    Ptyp_constr "int"
                    []
                  core_type (/home/zhdf/demo/ml/sudoku1.ml[5,128+39]../home/zhdf/demo/ml/sudoku1.ml[5,128+42])
                    Ptyp_constr "int"
                    []
                ]
    ]
]

[DBG env] Adding field contents
[DBG typing] Type structure in env:
               Values: !: (Pervasives.ref p2 -> p2);
               &&: (bool -> (bool -> bool)); &: (bool -> (bool -> bool));
               !=: (q2 -> (q2 -> bool)); **: (float -> (float -> float));
               +: (int -> (int -> int)); *.: (float -> (float -> float));
               -: (int -> (int -> int)); /: (int -> (int -> int));
               -.: (float -> (float -> float));
               +.: (float -> (float -> float)); *: (int -> (int -> int));
               <: (u2 -> (u2 -> bool));
               :=: (Pervasives.ref r2 -> (r2 -> unit));
               =: (k3 -> (k3 -> bool)); <>: (s2 -> (s2 -> bool));
               >=: (h3 -> (h3 -> bool)); >: (w2 -> (w2 -> bool));
               ==: (v2 -> (v2 -> bool)); <=: (t2 -> (t2 -> bool));
               /.: (float -> (float -> float));
               ^: (string -> (string -> string)); abs: (int -> int);
               ^^: (format6 y2 a3 b3 c3 d3 e3 -> (format6 e3 a3 b3 d3 f3 g3 -> format6 y2 a3 b3 c3 f3 g3));
               acos: (float -> float); asr: (int -> (int -> int));
               at_exit: ((unit -> unit) -> unit); asin: (float -> float);
               abs_float: (float -> float);
               atan2: (float -> (float -> float));
               bool_of_string: (string -> bool);
               classify_float: (float -> Pervasives.fpclass);
               char_of_int: (int -> char);
               close_in_noerr: (Pervasives.in_channel -> unit);
               close_in: (Pervasives.in_channel -> unit);
               ceil: (float -> float); atan: (float -> float);
               @: (list x2 -> (list x2 -> list x2));
               close_out_noerr: (Pervasives.out_channel -> unit);
               cos: (float -> float); cosh: (float -> float);
               compare: (i3 -> (i3 -> int)); epsilon_float: float;
               do_at_exit: (unit -> unit);
               decr: (Pervasives.ref int -> unit); failwith: (string -> w3);
               exp: (float -> float); float_of_int: (int -> float);
               float: (int -> float); floor: (float -> float);
               flush: (Pervasives.out_channel -> unit);
               frexp: (float -> (float , int));
               format_of_string: (format6 l3 m3 n3 o3 p3 q3 -> format6 l3 m3 n3 o3 p3 q3);
               flush_all: (unit -> unit); float_of_string: (string -> float);
               exit: (int -> j3); ignore: (t3 -> unit); infinity: float;
               incr: (Pervasives.ref int -> unit);
               in_channel_length: (Pervasives.in_channel -> int);
               input_byte: (Pervasives.in_channel -> int);
               input_binary_int: (Pervasives.in_channel -> int);
               input: (Pervasives.in_channel -> (string -> (int -> (int -> int))));
               input_line: (Pervasives.in_channel -> string);
               int_of_float: (float -> int); int_of_char: (char -> int);
               input_value: (Pervasives.in_channel -> u3);
               land: (int -> (int -> int)); invalid_arg: (string -> v3);
               log: (float -> float); lnot: (int -> int);
               lor: (int -> (int -> int)); log10: (float -> float);
               ldexp: (float -> (int -> float));
               int_of_string: (string -> int);
               input_char: (Pervasives.in_channel -> char);
               fst: ((r3 , s3) -> r3);
               close_out: (Pervasives.out_channel -> unit);
               lsr: (int -> (int -> int)); max: (y3 -> (y3 -> y3));
               max_float: float; lxor: (int -> (int -> int));
               min: (x3 -> (x3 -> x3)); mod: (int -> (int -> int));
               min_int: int; min_float: float; max_int: int;
               modf: (float -> (float , float)); neg_infinity: float;
               nan: float; open_in: (string -> Pervasives.in_channel);
               open_in_bin: (string -> Pervasives.in_channel);
               not: (bool -> bool);
               open_out: (string -> Pervasives.out_channel);
               or: (bool -> (bool -> bool));
               open_out_gen: (list Pervasives.open_flag -> (int -> (string -> Pervasives.out_channel)));
               open_out_bin: (string -> Pervasives.out_channel);
               output: (Pervasives.out_channel -> (string -> (int -> (int -> unit))));
               output_byte: (Pervasives.out_channel -> (int -> unit));
               output_binary_int: (Pervasives.out_channel -> (int -> unit));
               out_channel_length: (Pervasives.out_channel -> int);
               open_in_gen: (list Pervasives.open_flag -> (int -> (string -> Pervasives.in_channel)));
               mod_float: (float -> (float -> float));
               output_string: (Pervasives.out_channel -> (string -> unit));
               output_value: (Pervasives.out_channel -> (a4 -> unit));
               pos_out: (Pervasives.out_channel -> int);
               pos_in: (Pervasives.in_channel -> int);
               prerr_char: (char -> unit); prerr_float: (float -> unit);
               prerr_int: (int -> unit); prerr_endline: (string -> unit);
               pred: (int -> int); prerr_string: (string -> unit);
               print_float: (float -> unit); print_endline: (string -> unit);
               print_char: (char -> unit); print_newline: (unit -> unit);
               raise: (exn -> b4); print_string: (string -> unit);
               print_int: (int -> unit); read_int: (unit -> int);
               really_input: (Pervasives.in_channel -> (string -> (int -> (int -> unit))));
               read_line: (unit -> string);
               seek_in: (Pervasives.in_channel -> (int -> unit));
               ref: (c4 -> Pervasives.ref c4); read_float: (unit -> float);
               prerr_newline: (unit -> unit);
               set_binary_mode_out: (Pervasives.out_channel -> (bool -> unit));
               set_binary_mode_in: (Pervasives.in_channel -> (bool -> unit));
               sinh: (float -> float); sin: (float -> float);
               sqrt: (float -> float); stderr: Pervasives.out_channel;
               string_of_bool: (bool -> string);
               stdout: Pervasives.out_channel; stdin: Pervasives.in_channel;
               snd: ((d4 , e4) -> e4);
               string_of_format: (format6 f4 g4 h4 i4 j4 k4 -> string);
               tan: (float -> float); succ: (int -> int);
               string_of_int: (int -> string); truncate: (float -> int);
               unsafe_really_input: (Pervasives.in_channel -> (string -> (int -> (int -> unit))));
               ||: (bool -> (bool -> bool)); ~-.: (float -> float);
               ~-: (int -> int); valid_float_lexem: (string -> string);
               tanh: (float -> float); string_of_float: (float -> string);
               seek_out: (Pervasives.out_channel -> (int -> unit));
               output_char: (Pervasives.out_channel -> (char -> unit));
               lsl: (int -> (int -> int)); 
               Types: type (l4) array = <abstr>;
               type () bool = | false | true ; type () board = array int;
               type () exn = ;
               type (m4, n4, o4) format = Pervasives.format4 m4 n4 o4 o4;
               type () float = <abstr>; type () char = <abstr>;
               type (t4, u4, v4, w4, x4, y4) format6 = <abstr>;
               type () int = <abstr>; type () in_channel = <abstr>;
               type () fpclass = | FP_infinite | FP_nan | FP_normal | FP_subnormal | FP_zero ;
               type (p4, q4, r4, s4) format4 = format6 p4 q4 r4 r4 r4 s4;
               type () int64 = <abstr>;
               type (b5) list = | :: of b5 * list b5 | [] ;
               type (a5) lazy_t = <abstr>;
               type (d5) option = | None | Some of d5 ;
               type () open_flag = | Open_append | Open_binary | Open_creat | Open_excl | Open_nonblock | Open_rdonly | Open_text | Open_trunc | Open_wronly ;
               type (c5) ref = {contents -> Mutablec5; };
               type () unit = | () ; type () string = <abstr>;
               type () out_channel = <abstr>; type () nativeint = <abstr>;
               type () int32 = <abstr>; 
[DBG generate] for_structure_item at 5,4-9,7
  type rectangle =  .
       core_type (/home/zhdf/demo/ml/sudoku1.ml[5,128+25]../home/zhdf/demo/ml/sudoku1.ml[5,128+42])
  Ptyp_tuple
  [
    core_type (/home/zhdf/demo/ml/sudoku1.ml[5,128+21]../home/zhdf/demo/ml/sudoku1.ml[5,128+24])
      Ptyp_constr "int"
      []
    core_type (/home/zhdf/demo/ml/sudoku1.ml[5,128+27]../home/zhdf/demo/ml/sudoku1.ml[5,128+30])
      Ptyp_constr "int"
      []
    core_type (/home/zhdf/demo/ml/sudoku1.ml[5,128+33]../home/zhdf/demo/ml/sudoku1.ml[5,128+36])
      Ptyp_constr "int"
      []
    core_type (/home/zhdf/demo/ml/sudoku1.ml[5,128+39]../home/zhdf/demo/ml/sudoku1.ml[5,128+42])
      Ptyp_constr "int"
      []
  ]
:
  {}
[DBG generate] Generated for strit, resulting env:
Values: 
  Types: type () rectangle = (int , int , int , int); 
[INF typing] 0 constraints generated.
[DBG typing] generated constraints: {}
[DBG typing] Unifying {}
[INF typing] Constraints unified successfully.
[DBG typing] Resulting tyvarsubst: 
[INF typing] checked annotations
[INF typing] Constraints solved
[INF typing] Succeeded typing structure type rectangle with substitution 
  and env enriched by Values: 
  Types: type () rectangle = (int , int , int , int); 
[DBG ast_comp] Succeeded for:  <not interesting>
[INF ast_comp] Success comparing ecaml/ocaml typing
[DBG typing] Conf.load_path: [, /home/zhdf/easyocaml-0.49/ocaml-3.10.2/lib/ocaml]
[DBG enr_ast] Ocaml ast: [
  structure_item (/home/zhdf/demo/ml/sudoku1.ml[9,265+4]../home/zhdf/demo/ml/sudoku1.ml[11,330+35])
    Pstr_value Rec
    [
      <def>
        pattern (/home/zhdf/demo/ml/sudoku1.ml[9,265+12]../home/zhdf/demo/ml/sudoku1.ml[9,265+20])
          Ppat_var "int_fold"
        expression (/home/zhdf/demo/ml/sudoku1.ml[9,265+21]../home/zhdf/demo/ml/sudoku1.ml[11,330+35])
          Pexp_function ""
          None
          [
            <case>
              pattern (/home/zhdf/demo/ml/sudoku1.ml[9,265+23]../home/zhdf/demo/ml/sudoku1.ml[9,265+25])
                Ppat_tuple
                [
                  pattern (/home/zhdf/demo/ml/sudoku1.ml[9,265+22]../home/zhdf/demo/ml/sudoku1.ml[9,265+23])
                    Ppat_var "x"
                  pattern (/home/zhdf/demo/ml/sudoku1.ml[9,265+24]../home/zhdf/demo/ml/sudoku1.ml[9,265+25])
                    Ppat_var "y"
                ]
              expression (/home/zhdf/demo/ml/sudoku1.ml[9,265+27]../home/zhdf/demo/ml/sudoku1.ml[11,330+35])
                Pexp_function ""
                None
                [
                  <case>
                    pattern (/home/zhdf/demo/ml/sudoku1.ml[9,265+27]../home/zhdf/demo/ml/sudoku1.ml[9,265+28])
                      Ppat_var "a"
                    expression (/home/zhdf/demo/ml/sudoku1.ml[9,265+29]../home/zhdf/demo/ml/sudoku1.ml[11,330+35])
                      Pexp_function ""
                      None
                      [
                        <case>
                          pattern (/home/zhdf/demo/ml/sudoku1.ml[9,265+29]../home/zhdf/demo/ml/sudoku1.ml[9,265+30])
                            Ppat_var "f"
                          expression (/home/zhdf/demo/ml/sudoku1.ml[10,299+8]../home/zhdf/demo/ml/sudoku1.ml[11,330+35])
                            Pexp_ifthenelse
                            expression (/home/zhdf/demo/ml/sudoku1.ml[10,299+13]../home/zhdf/demo/ml/sudoku1.ml[10,299+17])
                              Pexp_apply
                              expression (/home/zhdf/demo/ml/sudoku1.ml[10,299+13]../home/zhdf/demo/ml/sudoku1.ml[10,299+15])
                                Pexp_ident ">="
                              [
                                <label> ""
                                  expression (/home/zhdf/demo/ml/sudoku1.ml[10,299+11]../home/zhdf/demo/ml/sudoku1.ml[10,299+12])
                                    Pexp_ident "x"
                                <label> ""
                                  expression (/home/zhdf/demo/ml/sudoku1.ml[10,299+16]../home/zhdf/demo/ml/sudoku1.ml[10,299+17])
                                    Pexp_ident "y"
                              ]
                            expression (/home/zhdf/demo/ml/sudoku1.ml[10,299+23]../home/zhdf/demo/ml/sudoku1.ml[10,299+24])
                              Pexp_ident "a"
                            Some
                              expression (/home/zhdf/demo/ml/sudoku1.ml[11,330+34]../home/zhdf/demo/ml/sudoku1.ml[11,330+35])
                                Pexp_apply
                                expression (/home/zhdf/demo/ml/sudoku1.ml[11,330+8]../home/zhdf/demo/ml/sudoku1.ml[11,330+16])
                                  Pexp_ident "int_fold"
                                [
                                  <label> ""
                                    expression (/home/zhdf/demo/ml/sudoku1.ml[11,330+21]../home/zhdf/demo/ml/sudoku1.ml[11,330+24])
                                      Pexp_tuple
                                      [
                                        expression (/home/zhdf/demo/ml/sudoku1.ml[11,330+19]../home/zhdf/demo/ml/sudoku1.ml[11,330+21])
                                          Pexp_apply
                                          expression (/home/zhdf/demo/ml/sudoku1.ml[11,330+19]../home/zhdf/demo/ml/sudoku1.ml[11,330+20])
                                            Pexp_ident "+"
                                          [
                                            <label> ""
                                              expression (/home/zhdf/demo/ml/sudoku1.ml[11,330+18]../home/zhdf/demo/ml/sudoku1.ml[11,330+19])
                                                Pexp_ident "x"
                                            <label> ""
                                              expression (/home/zhdf/demo/ml/sudoku1.ml[11,330+20]../home/zhdf/demo/ml/sudoku1.ml[11,330+21])
                                                Pexp_constant Const_int 1
                                          ]
                                        expression (/home/zhdf/demo/ml/sudoku1.ml[11,330+23]../home/zhdf/demo/ml/sudoku1.ml[11,330+24])
                                          Pexp_ident "y"
                                      ]
                                  <label> ""
                                    expression (/home/zhdf/demo/ml/sudoku1.ml[11,330+31]../home/zhdf/demo/ml/sudoku1.ml[11,330+32])
                                      Pexp_apply
                                      expression (/home/zhdf/demo/ml/sudoku1.ml[11,330+27]../home/zhdf/demo/ml/sudoku1.ml[11,330+28])
                                        Pexp_ident "f"
                                      [
                                        <label> ""
                                          expression (/home/zhdf/demo/ml/sudoku1.ml[11,330+29]../home/zhdf/demo/ml/sudoku1.ml[11,330+30])
                                            Pexp_ident "x"
                                        <label> ""
                                          expression (/home/zhdf/demo/ml/sudoku1.ml[11,330+31]../home/zhdf/demo/ml/sudoku1.ml[11,330+32])
                                            Pexp_ident "a"
                                      ]
                                  <label> ""
                                    expression (/home/zhdf/demo/ml/sudoku1.ml[11,330+34]../home/zhdf/demo/ml/sudoku1.ml[11,330+35])
                                      Pexp_ident "f"
                                ]
                      ]
                ]
          ]
    ]
]

[INF enr_ast] A different parser than Ocaml's default should be used to avoid inaccuracy for the location of multiple application (11,34-35).
[INF enr_ast] A different parser than Ocaml's default should be used to avoid inaccuracy for the location of multiple application (11,19-21).
[INF enr_ast] A different parser than Ocaml's default should be used to avoid inaccuracy for the location of multiple application (11,31-32).
[INF enr_ast] A different parser than Ocaml's default should be used to avoid inaccuracy for the location of multiple application (10,13-17).
[DBG env] Adding field contents
[DBG typing] Type structure in env:
               Values: !: (Pervasives.ref e5 -> e5);
               &&: (bool -> (bool -> bool)); &: (bool -> (bool -> bool));
               !=: (f5 -> (f5 -> bool)); **: (float -> (float -> float));
               +: (int -> (int -> int)); *.: (float -> (float -> float));
               -: (int -> (int -> int)); /: (int -> (int -> int));
               -.: (float -> (float -> float));
               +.: (float -> (float -> float)); *: (int -> (int -> int));
               <: (j5 -> (j5 -> bool));
               :=: (Pervasives.ref g5 -> (g5 -> unit));
               =: (y5 -> (y5 -> bool)); <>: (h5 -> (h5 -> bool));
               >=: (v5 -> (v5 -> bool)); >: (l5 -> (l5 -> bool));
               ==: (k5 -> (k5 -> bool)); <=: (i5 -> (i5 -> bool));
               /.: (float -> (float -> float));
               ^: (string -> (string -> string)); abs: (int -> int);
               ^^: (format6 n5 o5 p5 q5 r5 s5 -> (format6 s5 o5 p5 r5 t5 u5 -> format6 n5 o5 p5 q5 t5 u5));
               acos: (float -> float); asr: (int -> (int -> int));
               at_exit: ((unit -> unit) -> unit); asin: (float -> float);
               abs_float: (float -> float);
               atan2: (float -> (float -> float));
               bool_of_string: (string -> bool);
               classify_float: (float -> Pervasives.fpclass);
               char_of_int: (int -> char);
               close_in_noerr: (Pervasives.in_channel -> unit);
               close_in: (Pervasives.in_channel -> unit);
               ceil: (float -> float); atan: (float -> float);
               @: (list m5 -> (list m5 -> list m5));
               close_out_noerr: (Pervasives.out_channel -> unit);
               cos: (float -> float); cosh: (float -> float);
               compare: (w5 -> (w5 -> int)); epsilon_float: float;
               do_at_exit: (unit -> unit);
               decr: (Pervasives.ref int -> unit); failwith: (string -> l6);
               exp: (float -> float); float_of_int: (int -> float);
               float: (int -> float); floor: (float -> float);
               flush: (Pervasives.out_channel -> unit);
               frexp: (float -> (float , int));
               format_of_string: (format6 a6 b6 c6 d6 e6 f6 -> format6 a6 b6 c6 d6 e6 f6);
               flush_all: (unit -> unit); float_of_string: (string -> float);
               exit: (int -> x5); ignore: (i6 -> unit); infinity: float;
               incr: (Pervasives.ref int -> unit);
               in_channel_length: (Pervasives.in_channel -> int);
               input_byte: (Pervasives.in_channel -> int);
               input_binary_int: (Pervasives.in_channel -> int);
               input: (Pervasives.in_channel -> (string -> (int -> (int -> int))));
               input_line: (Pervasives.in_channel -> string);
               int_of_float: (float -> int); int_of_char: (char -> int);
               input_value: (Pervasives.in_channel -> j6);
               land: (int -> (int -> int)); invalid_arg: (string -> k6);
               log: (float -> float); lnot: (int -> int);
               lor: (int -> (int -> int)); log10: (float -> float);
               ldexp: (float -> (int -> float));
               int_of_string: (string -> int);
               input_char: (Pervasives.in_channel -> char);
               fst: ((g6 , h6) -> g6);
               close_out: (Pervasives.out_channel -> unit);
               lsr: (int -> (int -> int)); max: (n6 -> (n6 -> n6));
               max_float: float; lxor: (int -> (int -> int));
               min: (m6 -> (m6 -> m6)); mod: (int -> (int -> int));
               min_int: int; min_float: float; max_int: int;
               modf: (float -> (float , float)); neg_infinity: float;
               nan: float; open_in: (string -> Pervasives.in_channel);
               open_in_bin: (string -> Pervasives.in_channel);
               not: (bool -> bool);
               open_out: (string -> Pervasives.out_channel);
               or: (bool -> (bool -> bool));
               open_out_gen: (list Pervasives.open_flag -> (int -> (string -> Pervasives.out_channel)));
               open_out_bin: (string -> Pervasives.out_channel);
               output: (Pervasives.out_channel -> (string -> (int -> (int -> unit))));
               output_byte: (Pervasives.out_channel -> (int -> unit));
               output_binary_int: (Pervasives.out_channel -> (int -> unit));
               out_channel_length: (Pervasives.out_channel -> int);
               open_in_gen: (list Pervasives.open_flag -> (int -> (string -> Pervasives.in_channel)));
               mod_float: (float -> (float -> float));
               output_string: (Pervasives.out_channel -> (string -> unit));
               output_value: (Pervasives.out_channel -> (o6 -> unit));
               pos_out: (Pervasives.out_channel -> int);
               pos_in: (Pervasives.in_channel -> int);
               prerr_char: (char -> unit); prerr_float: (float -> unit);
               prerr_int: (int -> unit); prerr_endline: (string -> unit);
               pred: (int -> int); prerr_string: (string -> unit);
               print_float: (float -> unit); print_endline: (string -> unit);
               print_char: (char -> unit); print_newline: (unit -> unit);
               raise: (exn -> p6); print_string: (string -> unit);
               print_int: (int -> unit); read_int: (unit -> int);
               really_input: (Pervasives.in_channel -> (string -> (int -> (int -> unit))));
               read_line: (unit -> string);
               seek_in: (Pervasives.in_channel -> (int -> unit));
               ref: (q6 -> Pervasives.ref q6); read_float: (unit -> float);
               prerr_newline: (unit -> unit);
               set_binary_mode_out: (Pervasives.out_channel -> (bool -> unit));
               set_binary_mode_in: (Pervasives.in_channel -> (bool -> unit));
               sinh: (float -> float); sin: (float -> float);
               sqrt: (float -> float); stderr: Pervasives.out_channel;
               string_of_bool: (bool -> string);
               stdout: Pervasives.out_channel; stdin: Pervasives.in_channel;
               snd: ((r6 , s6) -> s6);
               string_of_format: (format6 t6 u6 v6 w6 x6 y6 -> string);
               tan: (float -> float); succ: (int -> int);
               string_of_int: (int -> string); truncate: (float -> int);
               unsafe_really_input: (Pervasives.in_channel -> (string -> (int -> (int -> unit))));
               ||: (bool -> (bool -> bool)); ~-.: (float -> float);
               ~-: (int -> int); valid_float_lexem: (string -> string);
               tanh: (float -> float); string_of_float: (float -> string);
               seek_out: (Pervasives.out_channel -> (int -> unit));
               output_char: (Pervasives.out_channel -> (char -> unit));
               lsl: (int -> (int -> int)); 
               Types: type (a7) array = <abstr>;
               type () bool = | false | true ; type () board = array int;
               type () exn = ;
               type (b7, c7, d7) format = Pervasives.format4 b7 c7 d7 d7;
               type () float = <abstr>; type () char = <abstr>;
               type (i7, j7, k7, l7, m7, n7) format6 = <abstr>;
               type () int = <abstr>; type () in_channel = <abstr>;
               type () fpclass = | FP_infinite | FP_nan | FP_normal | FP_subnormal | FP_zero ;
               type () int64 = <abstr>;
               type (p7) list = | :: of p7 * list p7 | [] ;
               type (o7) lazy_t = <abstr>; type () int32 = <abstr>;
               type (e7, f7, g7, h7) format4 = format6 e7 f7 g7 g7 g7 h7;
               type (r7) option = | None | Some of r7 ;
               type () open_flag = | Open_append | Open_binary | Open_creat | Open_excl | Open_nonblock | Open_rdonly | Open_text | Open_trunc | Open_wronly ;
               type () rectangle = (int , int , int , int);
               type () out_channel = <abstr>; type () string = <abstr>;
               type () unit = | () ;
               type (q7) ref = {contents -> Mutableq7; };
               type () nativeint = <abstr>; 
[DBG generate] for pattern at 9,23-25 (x, y)
  (bound: {x -> u7; y -> v7; }, ty: w7, cs: {w7 =9,23-25= (u7 , v7); })
[DBG generate] for pattern at 9,27-28 a (bound: {a -> y7; }, ty: y7, cs: {})
[DBG generate] for pattern at 9,29-30 f (bound: {f -> b8; }, ty: b8, cs: {})
[DBG generate] for_expr at 10,13-15 (>=): j8 -
  {(l8 -> (l8 -> bool)) =Pervasives.(>=)= k8; k8 =10,13-15= j8; }
[DBG generate] for_expr at 10,11-12 x: m8 -
  {n8 =9,22-23= u7; m8 =10,11-12= n8; }
[DBG generate] for_expr at 10,13-12 (>=)~x: g8 -
  {(l8 -> (l8 -> bool)) =Pervasives.(>=)= k8; n8 =9,22-23= u7;
   m8 =10,11-12= n8; m8 =10,13-12= h8; j8 =10,13-12= (h8 -> i8);
   g8 =10,13-12= i8; k8 =10,13-15= j8; }
[DBG generate] for_expr at 10,16-17 y: o8 -
  {p8 =9,24-25= v7; o8 =10,16-17= p8; }
[DBG generate] for_expr at 10,13-17 x >= y: d8 -
  {(l8 -> (l8 -> bool)) =Pervasives.(>=)= k8; n8 =9,22-23= u7;
   p8 =9,24-25= v7; m8 =10,11-12= n8; m8 =10,13-12= h8;
   j8 =10,13-12= (h8 -> i8); g8 =10,13-12= i8; k8 =10,13-15= j8;
   o8 =10,13-17= e8; g8 =10,13-17= (e8 -> f8); d8 =10,13-17= f8;
   o8 =10,16-17= p8; }
[DBG generate] for_expr at 10,23-24 a: q8 -
  {r8 =9,27-28= y7; q8 =10,23-24= r8; }
[DBG generate] for_expr at 11,8-16 int_fold: c9 -
  {d9 =9,4-11,35= s7; c9 =11,8-16= d9; }
[DBG generate] for_expr at 11,19-20 (+): l9 -
  {(int -> (int -> int)) =Pervasives.(+)= m9; m9 =11,19-20= l9; }
[DBG generate] for_expr at 11,18-19 x: n9 -
  {o9 =9,22-23= u7; n9 =11,18-19= o9; }
[DBG generate] for_expr at 11,19-19 (+)~x: i9 -
  {(int -> (int -> int)) =Pervasives.(+)= m9; o9 =9,22-23= u7;
   n9 =11,18-19= o9; n9 =11,19-19= j9; l9 =11,19-19= (j9 -> k9);
   i9 =11,19-19= k9; m9 =11,19-20= l9; }
[DBG generate] for_expr at 11,20-21 1: p9 - {int =11,20-21= p9; }
[DBG generate] for_expr at 11,19-21 x + 1: f9 -
  {(int -> (int -> int)) =Pervasives.(+)= m9; o9 =9,22-23= u7;
   n9 =11,18-19= o9; n9 =11,19-19= j9; l9 =11,19-19= (j9 -> k9);
   i9 =11,19-19= k9; m9 =11,19-20= l9; p9 =11,19-21= g9;
   i9 =11,19-21= (g9 -> h9); f9 =11,19-21= h9; int =11,20-21= p9; }
[DBG generate] for_expr at 11,23-24 y: q9 -
  {r9 =9,24-25= v7; q9 =11,23-24= r9; }
[DBG generate] for_expr at 11,21-24 (x + 1, y): e9 -
  {(int -> (int -> int)) =Pervasives.(+)= m9; o9 =9,22-23= u7;
   r9 =9,24-25= v7; n9 =11,18-19= o9; n9 =11,19-19= j9;
   l9 =11,19-19= (j9 -> k9); i9 =11,19-19= k9; m9 =11,19-20= l9;
   p9 =11,19-21= g9; i9 =11,19-21= (g9 -> h9); f9 =11,19-21= h9;
   int =11,20-21= p9; e9 =11,21-24= (f9 , q9); q9 =11,23-24= r9; }
[DBG generate] for_expr at 11,8-24 int_fold~(x + 1, y): y8 -
  {(int -> (int -> int)) =Pervasives.(+)= m9; d9 =9,4-11,35= s7;
   o9 =9,22-23= u7; r9 =9,24-25= v7; c9 =11,8-16= d9; e9 =11,8-24= a9;
   c9 =11,8-24= (a9 -> b9); y8 =11,8-24= b9; n9 =11,18-19= o9;
   n9 =11,19-19= j9; l9 =11,19-19= (j9 -> k9); i9 =11,19-19= k9;
   m9 =11,19-20= l9; p9 =11,19-21= g9; i9 =11,19-21= (g9 -> h9);
   f9 =11,19-21= h9; int =11,20-21= p9; e9 =11,21-24= (f9 , q9);
   q9 =11,23-24= r9; }
[DBG generate] for_expr at 11,27-28 f: y9 -
  {a10 =9,29-30= b8; y9 =11,27-28= a10; }
[DBG generate] for_expr at 11,29-30 x: b10 -
  {c10 =9,22-23= u7; b10 =11,29-30= c10; }
[DBG generate] for_expr at 11,27-30 f~x: v9 -
  {c10 =9,22-23= u7; a10 =9,29-30= b8; y9 =11,27-28= a10; b10 =11,27-30= w9;
   y9 =11,27-30= (w9 -> x9); v9 =11,27-30= x9; b10 =11,29-30= c10; }
[DBG generate] for_expr at 11,31-32 a: d10 -
  {e10 =9,27-28= y7; d10 =11,31-32= e10; }
[DBG generate] for_expr at 11,27-32 f~x~a: s9 -
  {c10 =9,22-23= u7; e10 =9,27-28= y7; a10 =9,29-30= b8; y9 =11,27-28= a10;
   b10 =11,27-30= w9; y9 =11,27-30= (w9 -> x9); v9 =11,27-30= x9;
   d10 =11,27-32= t9; v9 =11,27-32= (t9 -> u9); s9 =11,27-32= u9;
   b10 =11,29-30= c10; d10 =11,31-32= e10; }
[DBG generate] for_expr at 11,8-32 int_fold~(x + 1, y)~f~x~a: v8 -
  {(int -> (int -> int)) =Pervasives.(+)= m9; d9 =9,4-11,35= s7;
   c10 =9,22-23= u7; o9 =9,22-23= u7; r9 =9,24-25= v7; e10 =9,27-28= y7;
   a10 =9,29-30= b8; c9 =11,8-16= d9; e9 =11,8-24= a9;
   c9 =11,8-24= (a9 -> b9); y8 =11,8-24= b9; s9 =11,8-32= w8;
   y8 =11,8-32= (w8 -> x8); v8 =11,8-32= x8; n9 =11,18-19= o9;
   n9 =11,19-19= j9; l9 =11,19-19= (j9 -> k9); i9 =11,19-19= k9;
   m9 =11,19-20= l9; p9 =11,19-21= g9; i9 =11,19-21= (g9 -> h9);
   f9 =11,19-21= h9; int =11,20-21= p9; e9 =11,21-24= (f9 , q9);
   q9 =11,23-24= r9; y9 =11,27-28= a10; b10 =11,27-30= w9;
   y9 =11,27-30= (w9 -> x9); v9 =11,27-30= x9; d10 =11,27-32= t9;
   v9 =11,27-32= (t9 -> u9); s9 =11,27-32= u9; b10 =11,29-30= c10;
   d10 =11,31-32= e10; }
[DBG generate] for_expr at 11,34-35 f: f10 -
  {g10 =9,29-30= b8; f10 =11,34-35= g10; }
[DBG generate] for_expr at 11,8-35 int_fold~(x + 1, y)~f~x~a~f: s8 -
  {(int -> (int -> int)) =Pervasives.(+)= m9; d9 =9,4-11,35= s7;
   c10 =9,22-23= u7; o9 =9,22-23= u7; r9 =9,24-25= v7; e10 =9,27-28= y7;
   g10 =9,29-30= b8; a10 =9,29-30= b8; c9 =11,8-16= d9; e9 =11,8-24= a9;
   c9 =11,8-24= (a9 -> b9); y8 =11,8-24= b9; s9 =11,8-32= w8;
   y8 =11,8-32= (w8 -> x8); v8 =11,8-32= x8; f10 =11,8-35= t8;
   v8 =11,8-35= (t8 -> u8); s8 =11,8-35= u8; n9 =11,18-19= o9;
   n9 =11,19-19= j9; l9 =11,19-19= (j9 -> k9); i9 =11,19-19= k9;
   m9 =11,19-20= l9; p9 =11,19-21= g9; i9 =11,19-21= (g9 -> h9);
   f9 =11,19-21= h9; int =11,20-21= p9; e9 =11,21-24= (f9 , q9);
   q9 =11,23-24= r9; y9 =11,27-28= a10; b10 =11,27-30= w9;
   y9 =11,27-30= (w9 -> x9); v9 =11,27-30= x9; d10 =11,27-32= t9;
   v9 =11,27-32= (t9 -> u9); s9 =11,27-32= u9; b10 =11,29-30= c10;
   d10 =11,31-32= e10; f10 =11,34-35= g10; }
[DBG generate] for_expr at 10,8-11,35
  if x >= y then a else int_fold~(x + 1, y)~f~x~a~f: c8 -
  {(int -> (int -> int)) =Pervasives.(+)= m9;
   (l8 -> (l8 -> bool)) =Pervasives.(>=)= k8; d9 =9,4-11,35= s7;
   c10 =9,22-23= u7; o9 =9,22-23= u7; n8 =9,22-23= u7; r9 =9,24-25= v7;
   p8 =9,24-25= v7; e10 =9,27-28= y7; r8 =9,27-28= y7; g10 =9,29-30= b8;
   a10 =9,29-30= b8; s8 =10,8-11,35= c8; q8 =10,8-11,35= c8;
   d8 =10,8-11,35= bool; m8 =10,11-12= n8; m8 =10,13-12= h8;
   j8 =10,13-12= (h8 -> i8); g8 =10,13-12= i8; k8 =10,13-15= j8;
   o8 =10,13-17= e8; g8 =10,13-17= (e8 -> f8); d8 =10,13-17= f8;
   o8 =10,16-17= p8; q8 =10,23-24= r8; c9 =11,8-16= d9; e9 =11,8-24= a9;
   c9 =11,8-24= (a9 -> b9); y8 =11,8-24= b9; s9 =11,8-32= w8;
   y8 =11,8-32= (w8 -> x8); v8 =11,8-32= x8; f10 =11,8-35= t8;
   v8 =11,8-35= (t8 -> u8); s8 =11,8-35= u8; n9 =11,18-19= o9;
   n9 =11,19-19= j9; l9 =11,19-19= (j9 -> k9); i9 =11,19-19= k9;
   m9 =11,19-20= l9; p9 =11,19-21= g9; i9 =11,19-21= (g9 -> h9);
   f9 =11,19-21= h9; int =11,20-21= p9; e9 =11,21-24= (f9 , q9);
   q9 =11,23-24= r9; y9 =11,27-28= a10; b10 =11,27-30= w9;
   y9 =11,27-30= (w9 -> x9); v9 =11,27-30= x9; d10 =11,27-32= t9;
   v9 =11,27-32= (t9 -> u9); s9 =11,27-32= u9; b10 =11,29-30= c10;
   d10 =11,31-32= e10; f10 =11,34-35= g10; }
[DBG generate] for_expr at 9,29-11,35
  function f -> if x >= y then a else int_fold~(x + 1, y)~f~x~a~f: a8 -
  {(int -> (int -> int)) =Pervasives.(+)= m9;
   (l8 -> (l8 -> bool)) =Pervasives.(>=)= k8; d9 =9,4-11,35= s7;
   c10 =9,22-23= u7; o9 =9,22-23= u7; n8 =9,22-23= u7; r9 =9,24-25= v7;
   p8 =9,24-25= v7; e10 =9,27-28= y7; r8 =9,27-28= y7; g10 =9,29-30= b8;
   a10 =9,29-30= b8; k10 =9,29-11,35= h10; k10 =9,29-11,35= c8;
   j10 =9,29-11,35= i10; j10 =9,29-11,35= b8; a8 =9,29-11,35= (j10 -> k10);
   s8 =10,8-11,35= c8; q8 =10,8-11,35= c8; d8 =10,8-11,35= bool;
   m8 =10,11-12= n8; m8 =10,13-12= h8; j8 =10,13-12= (h8 -> i8);
   g8 =10,13-12= i8; k8 =10,13-15= j8; o8 =10,13-17= e8;
   g8 =10,13-17= (e8 -> f8); d8 =10,13-17= f8; o8 =10,16-17= p8;
   q8 =10,23-24= r8; c9 =11,8-16= d9; e9 =11,8-24= a9;
   c9 =11,8-24= (a9 -> b9); y8 =11,8-24= b9; s9 =11,8-32= w8;
   y8 =11,8-32= (w8 -> x8); v8 =11,8-32= x8; f10 =11,8-35= t8;
   v8 =11,8-35= (t8 -> u8); s8 =11,8-35= u8; n9 =11,18-19= o9;
   n9 =11,19-19= j9; l9 =11,19-19= (j9 -> k9); i9 =11,19-19= k9;
   m9 =11,19-20= l9; p9 =11,19-21= g9; i9 =11,19-21= (g9 -> h9);
   f9 =11,19-21= h9; int =11,20-21= p9; e9 =11,21-24= (f9 , q9);
   q9 =11,23-24= r9; y9 =11,27-28= a10; b10 =11,27-30= w9;
   y9 =11,27-30= (w9 -> x9); v9 =11,27-30= x9; d10 =11,27-32= t9;
   v9 =11,27-32= (t9 -> u9); s9 =11,27-32= u9; b10 =11,29-30= c10;
   d10 =11,31-32= e10; f10 =11,34-35= g10; }
[DBG generate] for_expr at 9,27-11,35
  function
    a -> function f -> if x >= y then a else int_fold~(x + 1, y)~f~x~a~f:
  x7 -
  {(int -> (int -> int)) =Pervasives.(+)= m9;
   (l8 -> (l8 -> bool)) =Pervasives.(>=)= k8; d9 =9,4-11,35= s7;
   c10 =9,22-23= u7; o9 =9,22-23= u7; n8 =9,22-23= u7; r9 =9,24-25= v7;
   p8 =9,24-25= v7; e10 =9,27-28= y7; r8 =9,27-28= y7; o10 =9,27-11,35= l10;
   o10 =9,27-11,35= a8; n10 =9,27-11,35= m10; n10 =9,27-11,35= y7;
   x7 =9,27-11,35= (n10 -> o10); g10 =9,29-30= b8; a10 =9,29-30= b8;
   k10 =9,29-11,35= h10; k10 =9,29-11,35= c8; j10 =9,29-11,35= i10;
   j10 =9,29-11,35= b8; a8 =9,29-11,35= (j10 -> k10); s8 =10,8-11,35= c8;
   q8 =10,8-11,35= c8; d8 =10,8-11,35= bool; m8 =10,11-12= n8;
   m8 =10,13-12= h8; j8 =10,13-12= (h8 -> i8); g8 =10,13-12= i8;
   k8 =10,13-15= j8; o8 =10,13-17= e8; g8 =10,13-17= (e8 -> f8);
   d8 =10,13-17= f8; o8 =10,16-17= p8; q8 =10,23-24= r8; c9 =11,8-16= d9;
   e9 =11,8-24= a9; c9 =11,8-24= (a9 -> b9); y8 =11,8-24= b9;
   s9 =11,8-32= w8; y8 =11,8-32= (w8 -> x8); v8 =11,8-32= x8;
   f10 =11,8-35= t8; v8 =11,8-35= (t8 -> u8); s8 =11,8-35= u8;
   n9 =11,18-19= o9; n9 =11,19-19= j9; l9 =11,19-19= (j9 -> k9);
   i9 =11,19-19= k9; m9 =11,19-20= l9; p9 =11,19-21= g9;
   i9 =11,19-21= (g9 -> h9); f9 =11,19-21= h9; int =11,20-21= p9;
   e9 =11,21-24= (f9 , q9); q9 =11,23-24= r9; y9 =11,27-28= a10;
   b10 =11,27-30= w9; y9 =11,27-30= (w9 -> x9); v9 =11,27-30= x9;
   d10 =11,27-32= t9; v9 =11,27-32= (t9 -> u9); s9 =11,27-32= u9;
   b10 =11,29-30= c10; d10 =11,31-32= e10; f10 =11,34-35= g10; }
[DBG generate] for_expr at 9,21-11,35
  function
    (x, y) ->
    function
      a -> function f -> if x >= y then a else int_fold~(x + 1, y)~f~x~a~f:
  t7 -
  {(int -> (int -> int)) =Pervasives.(+)= m9;
   (l8 -> (l8 -> bool)) =Pervasives.(>=)= k8; d9 =9,4-11,35= s7;
   s10 =9,21-11,35= p10; s10 =9,21-11,35= x7; r10 =9,21-11,35= q10;
   r10 =9,21-11,35= w7; t7 =9,21-11,35= (r10 -> s10); c10 =9,22-23= u7;
   o9 =9,22-23= u7; n8 =9,22-23= u7; w7 =9,23-25= (u7 , v7); r9 =9,24-25= v7;
   p8 =9,24-25= v7; e10 =9,27-28= y7; r8 =9,27-28= y7; o10 =9,27-11,35= l10;
   o10 =9,27-11,35= a8; n10 =9,27-11,35= m10; n10 =9,27-11,35= y7;
   x7 =9,27-11,35= (n10 -> o10); g10 =9,29-30= b8; a10 =9,29-30= b8;
   k10 =9,29-11,35= h10; k10 =9,29-11,35= c8; j10 =9,29-11,35= i10;
   j10 =9,29-11,35= b8; a8 =9,29-11,35= (j10 -> k10); s8 =10,8-11,35= c8;
   q8 =10,8-11,35= c8; d8 =10,8-11,35= bool; m8 =10,11-12= n8;
   m8 =10,13-12= h8; j8 =10,13-12= (h8 -> i8); g8 =10,13-12= i8;
   k8 =10,13-15= j8; o8 =10,13-17= e8; g8 =10,13-17= (e8 -> f8);
   d8 =10,13-17= f8; o8 =10,16-17= p8; q8 =10,23-24= r8; c9 =11,8-16= d9;
   e9 =11,8-24= a9; c9 =11,8-24= (a9 -> b9); y8 =11,8-24= b9;
   s9 =11,8-32= w8; y8 =11,8-32= (w8 -> x8); v8 =11,8-32= x8;
   f10 =11,8-35= t8; v8 =11,8-35= (t8 -> u8); s8 =11,8-35= u8;
   n9 =11,18-19= o9; n9 =11,19-19= j9; l9 =11,19-19= (j9 -> k9);
   i9 =11,19-19= k9; m9 =11,19-20= l9; p9 =11,19-21= g9;
   i9 =11,19-21= (g9 -> h9); f9 =11,19-21= h9; int =11,20-21= p9;
   e9 =11,21-24= (f9 , q9); q9 =11,23-24= r9; y9 =11,27-28= a10;
   b10 =11,27-30= w9; y9 =11,27-30= (w9 -> x9); v9 =11,27-30= x9;
   d10 =11,27-32= t9; v9 =11,27-32= (t9 -> u9); s9 =11,27-32= u9;
   b10 =11,29-30= c10; d10 =11,31-32= e10; f10 =11,34-35= g10; }
[DBG generate] for_structure_item at 9,4-11,35
  let rec int_fold =
          function
            (x, y) ->
            function
              a ->
              function f -> if x >= y then a else int_fold~(x + 1, y)~f~x~a~f:
  {(int -> (int -> int)) =Pervasives.(+)= m9;
   (l8 -> (l8 -> bool)) =Pervasives.(>=)= k8; d9 =9,4-11,35= s7;
   s7 =9,4-11,35= t7; s10 =9,21-11,35= p10; s10 =9,21-11,35= x7;
   r10 =9,21-11,35= q10; r10 =9,21-11,35= w7; t7 =9,21-11,35= (r10 -> s10);
   c10 =9,22-23= u7; o9 =9,22-23= u7; n8 =9,22-23= u7;
   w7 =9,23-25= (u7 , v7); r9 =9,24-25= v7; p8 =9,24-25= v7;
   e10 =9,27-28= y7; r8 =9,27-28= y7; o10 =9,27-11,35= l10;
   o10 =9,27-11,35= a8; n10 =9,27-11,35= m10; n10 =9,27-11,35= y7;
   x7 =9,27-11,35= (n10 -> o10); g10 =9,29-30= b8; a10 =9,29-30= b8;
   k10 =9,29-11,35= h10; k10 =9,29-11,35= c8; j10 =9,29-11,35= i10;
   j10 =9,29-11,35= b8; a8 =9,29-11,35= (j10 -> k10); s8 =10,8-11,35= c8;
   q8 =10,8-11,35= c8; d8 =10,8-11,35= bool; m8 =10,11-12= n8;
   m8 =10,13-12= h8; j8 =10,13-12= (h8 -> i8); g8 =10,13-12= i8;
   k8 =10,13-15= j8; o8 =10,13-17= e8; g8 =10,13-17= (e8 -> f8);
   d8 =10,13-17= f8; o8 =10,16-17= p8; q8 =10,23-24= r8; c9 =11,8-16= d9;
   e9 =11,8-24= a9; c9 =11,8-24= (a9 -> b9); y8 =11,8-24= b9;
   s9 =11,8-32= w8; y8 =11,8-32= (w8 -> x8); v8 =11,8-32= x8;
   f10 =11,8-35= t8; v8 =11,8-35= (t8 -> u8); s8 =11,8-35= u8;
   n9 =11,18-19= o9; n9 =11,19-19= j9; l9 =11,19-19= (j9 -> k9);
   i9 =11,19-19= k9; m9 =11,19-20= l9; p9 =11,19-21= g9;
   i9 =11,19-21= (g9 -> h9); f9 =11,19-21= h9; int =11,20-21= p9;
   e9 =11,21-24= (f9 , q9); q9 =11,23-24= r9; y9 =11,27-28= a10;
   b10 =11,27-30= w9; y9 =11,27-30= (w9 -> x9); v9 =11,27-30= x9;
   d10 =11,27-32= t9; v9 =11,27-32= (t9 -> u9); s9 =11,27-32= u9;
   b10 =11,29-30= c10; d10 =11,31-32= e10; f10 =11,34-35= g10; }
[DBG generate] Generated for strit, resulting env:
Values: int_fold: t7; 
  Types: 
[INF typing] 73 constraints generated.
[DBG typing] generated constraints:
               {(int -> (int -> int)) =Pervasives.(+)= m9;
                (l8 -> (l8 -> bool)) =Pervasives.(>=)= k8; d9 =9,4-11,35= s7;
                s7 =9,4-11,35= t7; s10 =9,21-11,35= p10; s10 =9,21-11,35= x7;
                r10 =9,21-11,35= q10; r10 =9,21-11,35= w7;
                t7 =9,21-11,35= (r10 -> s10); c10 =9,22-23= u7;
                o9 =9,22-23= u7; n8 =9,22-23= u7; w7 =9,23-25= (u7 , v7);
                r9 =9,24-25= v7; p8 =9,24-25= v7; e10 =9,27-28= y7;
                r8 =9,27-28= y7; o10 =9,27-11,35= l10; o10 =9,27-11,35= a8;
                n10 =9,27-11,35= m10; n10 =9,27-11,35= y7;
                x7 =9,27-11,35= (n10 -> o10); g10 =9,29-30= b8;
                a10 =9,29-30= b8; k10 =9,29-11,35= h10; k10 =9,29-11,35= c8;
                j10 =9,29-11,35= i10; j10 =9,29-11,35= b8;
                a8 =9,29-11,35= (j10 -> k10); s8 =10,8-11,35= c8;
                q8 =10,8-11,35= c8; d8 =10,8-11,35= bool; m8 =10,11-12= n8;
                m8 =10,13-12= h8; j8 =10,13-12= (h8 -> i8); g8 =10,13-12= i8;
                k8 =10,13-15= j8; o8 =10,13-17= e8; g8 =10,13-17= (e8 -> f8);
                d8 =10,13-17= f8; o8 =10,16-17= p8; q8 =10,23-24= r8;
                c9 =11,8-16= d9; e9 =11,8-24= a9; c9 =11,8-24= (a9 -> b9);
                y8 =11,8-24= b9; s9 =11,8-32= w8; y8 =11,8-32= (w8 -> x8);
                v8 =11,8-32= x8; f10 =11,8-35= t8; v8 =11,8-35= (t8 -> u8);
                s8 =11,8-35= u8; n9 =11,18-19= o9; n9 =11,19-19= j9;
                l9 =11,19-19= (j9 -> k9); i9 =11,19-19= k9; m9 =11,19-20= l9;
                p9 =11,19-21= g9; i9 =11,19-21= (g9 -> h9); f9 =11,19-21= h9;
                int =11,20-21= p9; e9 =11,21-24= (f9 , q9); q9 =11,23-24= r9;
                y9 =11,27-28= a10; b10 =11,27-30= w9;
                y9 =11,27-30= (w9 -> x9); v9 =11,27-30= x9;
                d10 =11,27-32= t9; v9 =11,27-32= (t9 -> u9);
                s9 =11,27-32= u9; b10 =11,29-30= c10; d10 =11,31-32= e10;
                f10 =11,34-35= g10; }
[DBG typing] Unifying
               {(int -> (int -> int)) =Pervasives.(+)= m9;
                (l8 -> (l8 -> bool)) =Pervasives.(>=)= k8; d9 =9,4-11,35= s7;
                s7 =9,4-11,35= t7; s10 =9,21-11,35= p10; s10 =9,21-11,35= x7;
                r10 =9,21-11,35= q10; r10 =9,21-11,35= w7;
                t7 =9,21-11,35= (r10 -> s10); c10 =9,22-23= u7;
                o9 =9,22-23= u7; n8 =9,22-23= u7; w7 =9,23-25= (u7 , v7);
                r9 =9,24-25= v7; p8 =9,24-25= v7; e10 =9,27-28= y7;
                r8 =9,27-28= y7; o10 =9,27-11,35= l10; o10 =9,27-11,35= a8;
                n10 =9,27-11,35= m10; n10 =9,27-11,35= y7;
                x7 =9,27-11,35= (n10 -> o10); g10 =9,29-30= b8;
                a10 =9,29-30= b8; k10 =9,29-11,35= h10; k10 =9,29-11,35= c8;
                j10 =9,29-11,35= i10; j10 =9,29-11,35= b8;
                a8 =9,29-11,35= (j10 -> k10); s8 =10,8-11,35= c8;
                q8 =10,8-11,35= c8; d8 =10,8-11,35= bool; m8 =10,11-12= n8;
                m8 =10,13-12= h8; j8 =10,13-12= (h8 -> i8); g8 =10,13-12= i8;
                k8 =10,13-15= j8; o8 =10,13-17= e8; g8 =10,13-17= (e8 -> f8);
                d8 =10,13-17= f8; o8 =10,16-17= p8; q8 =10,23-24= r8;
                c9 =11,8-16= d9; e9 =11,8-24= a9; c9 =11,8-24= (a9 -> b9);
                y8 =11,8-24= b9; s9 =11,8-32= w8; y8 =11,8-32= (w8 -> x8);
                v8 =11,8-32= x8; f10 =11,8-35= t8; v8 =11,8-35= (t8 -> u8);
                s8 =11,8-35= u8; n9 =11,18-19= o9; n9 =11,19-19= j9;
                l9 =11,19-19= (j9 -> k9); i9 =11,19-19= k9; m9 =11,19-20= l9;
                p9 =11,19-21= g9; i9 =11,19-21= (g9 -> h9); f9 =11,19-21= h9;
                int =11,20-21= p9; e9 =11,21-24= (f9 , q9); q9 =11,23-24= r9;
                y9 =11,27-28= a10; b10 =11,27-30= w9;
                y9 =11,27-30= (w9 -> x9); v9 =11,27-30= x9;
                d10 =11,27-32= t9; v9 =11,27-32= (t9 -> u9);
                s9 =11,27-32= u9; b10 =11,29-30= c10; d10 =11,31-32= e10;
                f10 =11,34-35= g10; }
[DBG typing] switching X, var: m9 = (int -> (int -> int))
[DBG typing] TyVar m9, (int -> (int -> int)): adding m9 -> (int -> (int -> int)) to E
[DBG typing] switching X, var: k8 = (l8 -> (l8 -> bool))
[DBG typing] TyVar k8, (l8 -> (l8 -> bool)): adding k8 -> (l8 -> (l8 -> bool)) to E
[DBG typing] TyVar d9, s7: adding d9 -> s7 to E
[DBG typing] TyVar s7, t7: adding s7 -> t7 to E
[DBG typing] TyVar s10, p10: adding s10 -> p10 to E
[DBG typing] TyVar s10, p10: --> p10 = x7 (lookup)
[DBG typing] TyVar r10, q10: adding r10 -> q10 to E
[DBG typing] TyVar r10, q10: --> q10 = w7 (lookup)
[DBG typing] TyVar q10, w7: adding q10 -> w7 to E
[DBG typing] TyVar p10, x7: adding p10 -> x7 to E
[DBG typing] TyVar t7, (r10 -> s10): adding t7 -> (r10 -> s10) to E
[DBG typing] TyVar c10, u7: adding c10 -> u7 to E
[DBG typing] TyVar o9, u7: adding o9 -> u7 to E
[DBG typing] TyVar n8, u7: adding n8 -> u7 to E
[DBG typing] TyVar w7, (u7 , v7): adding w7 -> (u7 , v7) to E
[DBG typing] TyVar r9, v7: adding r9 -> v7 to E
[DBG typing] TyVar p8, v7: adding p8 -> v7 to E
[DBG typing] TyVar e10, y7: adding e10 -> y7 to E
[DBG typing] TyVar r8, y7: adding r8 -> y7 to E
[DBG typing] TyVar o10, l10: adding o10 -> l10 to E
[DBG typing] TyVar o10, l10: --> l10 = a8 (lookup)
[DBG typing] TyVar n10, m10: adding n10 -> m10 to E
[DBG typing] TyVar n10, m10: --> m10 = y7 (lookup)
[DBG typing] TyVar m10, y7: adding m10 -> y7 to E
[DBG typing] TyVar l10, a8: adding l10 -> a8 to E
[DBG typing] TyVar x7, (n10 -> o10): adding x7 -> (n10 -> o10) to E
[DBG typing] TyVar g10, b8: adding g10 -> b8 to E
[DBG typing] TyVar a10, b8: adding a10 -> b8 to E
[DBG typing] TyVar k10, h10: adding k10 -> h10 to E
[DBG typing] TyVar k10, h10: --> h10 = c8 (lookup)
[DBG typing] TyVar j10, i10: adding j10 -> i10 to E
[DBG typing] TyVar j10, i10: --> i10 = b8 (lookup)
[DBG typing] TyVar i10, b8: adding i10 -> b8 to E
[DBG typing] TyVar h10, c8: adding h10 -> c8 to E
[DBG typing] TyVar a8, (j10 -> k10): adding a8 -> (j10 -> k10) to E
[DBG typing] TyVar s8, c8: adding s8 -> c8 to E
[DBG typing] TyVar q8, c8: adding q8 -> c8 to E
[DBG typing] TyVar d8, bool: adding d8 -> bool to E
[DBG typing] TyVar m8, n8: adding m8 -> n8 to E
[DBG typing] TyVar m8, n8: --> n8 = h8 (lookup)
[DBG typing] TyVar n8, u7: --> u7 = h8 (lookup)
[DBG typing] TyVar u7, h8: adding u7 -> h8 to E
[DBG typing] TyVar j8, (h8 -> i8): adding j8 -> (h8 -> i8) to E
[DBG typing] TyVar g8, i8: adding g8 -> i8 to E
[DBG typing] TyVar k8, (l8 -> (l8 -> bool)): --> (l8 -> (l8 -> bool)) = j8 (lookup)
[DBG typing] switching X, var: j8 = (l8 -> (l8 -> bool))
[DBG typing] TyVar j8, (h8 -> i8): --> (h8 -> i8) = (l8 -> (l8 -> bool)) (lookup)
[DBG typing] Unifying arrows (h8 -> i8), (l8 -> (l8 -> bool)) --> h8 = l8, i8 = (l8 -> bool)
[DBG typing] TyVar i8, (l8 -> bool): adding i8 -> (l8 -> bool) to E
[DBG typing] TyVar h8, l8: adding h8 -> l8 to E
[DBG typing] TyVar o8, e8: adding o8 -> e8 to E
[DBG typing] TyVar g8, i8: --> i8 = (e8 -> f8) (lookup)
[DBG typing] TyVar i8, (l8 -> bool): --> (l8 -> bool) = (e8 -> f8) (lookup)
[DBG typing] Unifying arrows (l8 -> bool), (e8 -> f8) --> l8 = e8, bool = f8
[DBG typing] switching X, var: f8 = bool
[DBG typing] TyVar l8, e8: adding l8 -> e8 to E
[DBG typing] TyVar f8, bool: adding f8 -> bool to E
[DBG typing] TyVar d8, bool: --> bool = f8 (lookup)
[DBG typing] switching X, var: f8 = bool
[DBG typing] TyVar f8, bool: --> bool = bool (lookup)
[DBG typing] Ctors bool, bool --> {}
[DBG typing] TyVar o8, e8: --> e8 = p8 (lookup)
[DBG typing] TyVar e8, p8: adding e8 -> p8 to E
[DBG typing] TyVar q8, c8: --> c8 = r8 (lookup)
[DBG typing] TyVar c8, r8: adding c8 -> r8 to E
[DBG typing] TyVar c9, d9: adding c9 -> d9 to E
[DBG typing] TyVar e9, a9: adding e9 -> a9 to E
[DBG typing] TyVar c9, d9: --> d9 = (a9 -> b9) (lookup)
[DBG typing] TyVar d9, s7: --> s7 = (a9 -> b9) (lookup)
[DBG typing] TyVar s7, t7: --> t7 = (a9 -> b9) (lookup)
[DBG typing] TyVar t7, (r10 -> s10): --> (r10 -> s10) = (a9 -> b9) (lookup)
[DBG typing] Unifying arrows (r10 -> s10), (a9 -> b9) --> r10 = a9, s10 = b9
[DBG typing] TyVar s10, p10: --> p10 = b9 (lookup)
[DBG typing] TyVar r10, q10: --> q10 = a9 (lookup)
[DBG typing] TyVar q10, w7: --> w7 = a9 (lookup)
[DBG typing] TyVar p10, x7: --> x7 = b9 (lookup)
[DBG typing] TyVar x7, (n10 -> o10): --> (n10 -> o10) = b9 (lookup)
[DBG typing] switching X, var: b9 = (n10 -> o10)
[DBG typing] TyVar b9, (n10 -> o10): adding b9 -> (n10 -> o10) to E
[DBG typing] TyVar w7, (u7 , v7): --> (u7 , v7) = a9 (lookup)
[DBG typing] switching X, var: a9 = (u7 , v7)
[DBG typing] TyVar a9, (u7 , v7): adding a9 -> (u7 , v7) to E
[DBG typing] TyVar y8, b9: adding y8 -> b9 to E
[DBG typing] TyVar s9, w8: adding s9 -> w8 to E
[DBG typing] TyVar y8, b9: --> b9 = (w8 -> x8) (lookup)
[DBG typing] TyVar b9, (n10 -> o10): --> (n10 -> o10) = (w8 -> x8) (lookup)
[DBG typing] Unifying arrows (n10 -> o10), (w8 -> x8) --> n10 = w8, o10 = x8
[DBG typing] TyVar o10, l10: --> l10 = x8 (lookup)
[DBG typing] TyVar n10, m10: --> m10 = w8 (lookup)
[DBG typing] TyVar m10, y7: --> y7 = w8 (lookup)
[DBG typing] TyVar l10, a8: --> a8 = x8 (lookup)
[DBG typing] TyVar a8, (j10 -> k10): --> (j10 -> k10) = x8 (lookup)
[DBG typing] switching X, var: x8 = (j10 -> k10)
[DBG typing] TyVar x8, (j10 -> k10): adding x8 -> (j10 -> k10) to E
[DBG typing] TyVar y7, w8: adding y7 -> w8 to E
[DBG typing] TyVar v8, x8: adding v8 -> x8 to E
[DBG typing] TyVar f10, t8: adding f10 -> t8 to E
[DBG typing] TyVar v8, x8: --> x8 = (t8 -> u8) (lookup)
[DBG typing] TyVar x8, (j10 -> k10): --> (j10 -> k10) = (t8 -> u8) (lookup)
[DBG typing] Unifying arrows (j10 -> k10), (t8 -> u8) --> j10 = t8, k10 = u8
[DBG typing] TyVar k10, h10: --> h10 = u8 (lookup)
[DBG typing] TyVar j10, i10: --> i10 = t8 (lookup)
[DBG typing] TyVar i10, b8: --> b8 = t8 (lookup)
[DBG typing] TyVar h10, c8: --> c8 = u8 (lookup)
[DBG typing] TyVar c8, r8: --> r8 = u8 (lookup)
[DBG typing] TyVar r8, y7: --> y7 = u8 (lookup)
[DBG typing] TyVar y7, w8: --> w8 = u8 (lookup)
[DBG typing] TyVar w8, u8: adding w8 -> u8 to E
[DBG typing] TyVar b8, t8: adding b8 -> t8 to E
[DBG typing] TyVar s8, c8: --> c8 = u8 (lookup)
[DBG typing] TyVar c8, r8: --> r8 = u8 (lookup)
[DBG typing] TyVar r8, y7: --> y7 = u8 (lookup)
[DBG typing] TyVar y7, w8: --> w8 = u8 (lookup)
[DBG typing] TyVar w8, u8: --> u8 = u8 (lookup)
[DBG typing] Ignore identity: u8 = u8
[DBG typing] TyVar n9, o9: adding n9 -> o9 to E
[DBG typing] TyVar n9, o9: --> o9 = j9 (lookup)
[DBG typing] TyVar o9, u7: --> u7 = j9 (lookup)
[DBG typing] TyVar u7, h8: --> h8 = j9 (lookup)
[DBG typing] TyVar h8, l8: --> l8 = j9 (lookup)
[DBG typing] TyVar l8, e8: --> e8 = j9 (lookup)
[DBG typing] TyVar e8, p8: --> p8 = j9 (lookup)
[DBG typing] TyVar p8, v7: --> v7 = j9 (lookup)
[DBG typing] TyVar v7, j9: adding v7 -> j9 to E
[DBG typing] TyVar l9, (j9 -> k9): adding l9 -> (j9 -> k9) to E
[DBG typing] TyVar i9, k9: adding i9 -> k9 to E
[DBG typing] TyVar m9, (int -> (int -> int)): --> (int -> (int -> int)) = l9 (lookup)
[DBG typing] switching X, var: l9 = (int -> (int -> int))
[DBG typing] TyVar l9, (j9 -> k9): --> (j9 -> k9) = (int -> (int -> int)) (lookup)
[DBG typing] Unifying arrows (j9 -> k9), (int -> (int -> int)) --> j9 = int, k9 = (int -> int)
[DBG typing] TyVar k9, (int -> int): adding k9 -> (int -> int) to E
[DBG typing] TyVar j9, int: adding j9 -> int to E
[DBG typing] TyVar p9, g9: adding p9 -> g9 to E
[DBG typing] TyVar i9, k9: --> k9 = (g9 -> h9) (lookup)
[DBG typing] TyVar k9, (int -> int): --> (int -> int) = (g9 -> h9) (lookup)
[DBG typing] Unifying arrows (int -> int), (g9 -> h9) --> int = g9, int = h9
[DBG typing] switching X, var: h9 = int
[DBG typing] switching X, var: g9 = int
[DBG typing] TyVar h9, int: adding h9 -> int to E
[DBG typing] TyVar g9, int: adding g9 -> int to E
[DBG typing] TyVar f9, h9: adding f9 -> h9 to E
[DBG typing] switching X, var: p9 = int
[DBG typing] TyVar p9, g9: --> g9 = int (lookup)
[DBG typing] TyVar g9, int: --> int = int (lookup)
[DBG typing] Ctors int, int --> {}
[DBG typing] TyVar e9, a9: --> a9 = (f9 , q9) (lookup)
[DBG typing] TyVar a9, (u7 , v7): --> (u7 , v7) = (f9 , q9) (lookup)
[DBG typing] Tuples (u7 , v7), (f9 , q9) --> {v7 = q9; u7 = f9; }
[DBG typing] TyVar v7, j9: --> j9 = q9 (lookup)
[DBG typing] TyVar j9, int: --> int = q9 (lookup)
[DBG typing] switching X, var: q9 = int
[DBG typing] TyVar q9, int: adding q9 -> int to E
[DBG typing] TyVar u7, h8: --> h8 = f9 (lookup)
[DBG typing] TyVar h8, l8: --> l8 = f9 (lookup)
[DBG typing] TyVar l8, e8: --> e8 = f9 (lookup)
[DBG typing] TyVar e8, p8: --> p8 = f9 (lookup)
[DBG typing] TyVar p8, v7: --> v7 = f9 (lookup)
[DBG typing] TyVar v7, j9: --> j9 = f9 (lookup)
[DBG typing] TyVar j9, int: --> int = f9 (lookup)
[DBG typing] switching X, var: f9 = int
[DBG typing] TyVar f9, h9: --> h9 = int (lookup)
[DBG typing] TyVar h9, int: --> int = int (lookup)
[DBG typing] Ignore identity: int = int
[DBG typing] TyVar q9, int: --> int = r9 (lookup)
[DBG typing] switching X, var: r9 = int
[DBG typing] TyVar r9, v7: --> v7 = int (lookup)
[DBG typing] TyVar v7, j9: --> j9 = int (lookup)
[DBG typing] TyVar j9, int: --> int = int (lookup)
[DBG typing] Ignore identity: int = int
[DBG typing] TyVar y9, a10: adding y9 -> a10 to E
[DBG typing] TyVar b10, w9: adding b10 -> w9 to E
[DBG typing] TyVar y9, a10: --> a10 = (w9 -> x9) (lookup)
[DBG typing] TyVar a10, b8: --> b8 = (w9 -> x9) (lookup)
[DBG typing] TyVar b8, t8: --> t8 = (w9 -> x9) (lookup)
[DBG typing] TyVar t8, (w9 -> x9): adding t8 -> (w9 -> x9) to E
[DBG typing] TyVar v9, x9: adding v9 -> x9 to E
[DBG typing] TyVar d10, t9: adding d10 -> t9 to E
[DBG typing] TyVar v9, x9: --> x9 = (t9 -> u9) (lookup)
[DBG typing] TyVar x9, (t9 -> u9): adding x9 -> (t9 -> u9) to E
[DBG typing] TyVar s9, w8: --> w8 = u9 (lookup)
[DBG typing] TyVar w8, u8: --> u8 = u9 (lookup)
[DBG typing] TyVar u8, u9: adding u8 -> u9 to E
[DBG typing] TyVar b10, w9: --> w9 = c10 (lookup)
[DBG typing] TyVar w9, c10: adding w9 -> c10 to E
[DBG typing] TyVar d10, t9: --> t9 = e10 (lookup)
[DBG typing] TyVar t9, e10: adding t9 -> e10 to E
[DBG typing] TyVar f10, t8: --> t8 = g10 (lookup)
[DBG typing] TyVar t8, (w9 -> x9): --> (w9 -> x9) = g10 (lookup)
[DBG typing] switching X, var: g10 = (w9 -> x9)
[DBG typing] TyVar g10, b8: --> b8 = (w9 -> x9) (lookup)
[DBG typing] TyVar b8, t8: --> t8 = (w9 -> x9) (lookup)
[DBG typing] TyVar t8, (w9 -> x9): --> (w9 -> x9) = (w9 -> x9) (lookup)
[DBG typing] Ignore identity: (w9 -> x9) = (w9 -> x9)
[INF typing] Constraints unified successfully.
[DBG typing] Resulting tyvarsubst:
               s10: (u9 -> ((int -> (u9 -> u9)) -> u9)); r10: (int , int); q10: (int , int); p10: (u9 -> ((int -> (u9 -> u9)) -> u9)); o10: ((int -> (u9 -> u9)) -> u9); n10: u9; m10: u9; l10: ((int -> (u9 -> u9)) -> u9); k10: u9; j10: (int -> (u9 -> u9)); i10: (int -> (u9 -> u9)); h10: u9; g10: (int -> (u9 -> u9)); f10: (int -> (u9 -> u9)); e10: u9; d10: u9; c10: int; b10: int; a10: (int -> (u9 -> u9)); y9: (int -> (u9 -> u9)); x9: (u9 -> u9); w9: int; v9: (u9 -> u9); t9: u9; s9: u9; r9: int; q9: int; p9: int; o9: int; n9: int; m9: (int -> (int -> int)); l9: (int -> (int -> int)); k9: (int -> int); j9: int; i9: (int -> int); h9: int; g9: int; f9: int; e9: (int , int); d9: ((int , int) -> (u9 -> ((int -> (u9 -> u9)) -> u9))); c9: ((int , int) -> (u9 -> ((int -> (u9 -> u9)) -> u9))); b9: (u9 -> ((int -> (u9 -> u9)) -> u9)); a9: (int , int); y8: (u9 -> ((int -> (u9 -> u9)) -> u9)); x8: ((int -> (u9 -> u9)) -> u9); w8: u9; v8: ((int -> (u9 -> u9)) -> u9); u8: u9; t8: (int -> (u9 -> u9)); s8: u9; r8: u9; q8: u9; p8: int; o8: int; n8: int; m8: int; l8: int; k8: (int -> (int -> bool)); j8: (int -> (int -> bool)); i8: (int -> bool); h8: int; g8: (int -> bool); f8: bool; e8: int; d8: bool; c8: u9; b8: (int -> (u9 -> u9)); a8: ((int -> (u9 -> u9)) -> u9); y7: u9; x7: (u9 -> ((int -> (u9 -> u9)) -> u9)); w7: (int , int); v7: int; u7: int; t7: ((int , int) -> (u9 -> ((int -> (u9 -> u9)) -> u9))); s7: ((int , int) -> (u9 -> ((int -> (u9 -> u9)) -> u9))); 
[INF typing] checked annotations
[INF typing] Constraints solved
[INF typing] Succeeded typing structure
  val int_fold: ((int , int) -> (u9 -> ((int -> (u9 -> u9)) -> u9)))
  with substitution
  s10: (u9 -> ((int -> (u9 -> u9)) -> u9)); r10: (int , int); q10: (int , int); p10: (u9 -> ((int -> (u9 -> u9)) -> u9)); o10: ((int -> (u9 -> u9)) -> u9); n10: u9; m10: u9; l10: ((int -> (u9 -> u9)) -> u9); k10: u9; j10: (int -> (u9 -> u9)); i10: (int -> (u9 -> u9)); h10: u9; g10: (int -> (u9 -> u9)); f10: (int -> (u9 -> u9)); e10: u9; d10: u9; c10: int; b10: int; a10: (int -> (u9 -> u9)); y9: (int -> (u9 -> u9)); x9: (u9 -> u9); w9: int; v9: (u9 -> u9); t9: u9; s9: u9; r9: int; q9: int; p9: int; o9: int; n9: int; m9: (int -> (int -> int)); l9: (int -> (int -> int)); k9: (int -> int); j9: int; i9: (int -> int); h9: int; g9: int; f9: int; e9: (int , int); d9: ((int , int) -> (u9 -> ((int -> (u9 -> u9)) -> u9))); c9: ((int , int) -> (u9 -> ((int -> (u9 -> u9)) -> u9))); b9: (u9 -> ((int -> (u9 -> u9)) -> u9)); a9: (int , int); y8: (u9 -> ((int -> (u9 -> u9)) -> u9)); x8: ((int -> (u9 -> u9)) -> u9); w8: u9; v8: ((int -> (u9 -> u9)) -> u9); u8: u9; t8: (int -> (u9 -> u9)); s8: u9; r8: u9; q8: u9; p8: int; o8: int; n8: int; m8: int; l8: int; k8: (int -> (int -> bool)); j8: (int -> (int -> bool)); i8: (int -> bool); h8: int; g8: (int -> bool); f8: bool; e8: int; d8: bool; c8: u9; b8: (int -> (u9 -> u9)); a8: ((int -> (u9 -> u9)) -> u9); y7: u9; x7: (u9 -> ((int -> (u9 -> u9)) -> u9)); w7: (int , int); v7: int; u7: int; t7: ((int , int) -> (u9 -> ((int -> (u9 -> u9)) -> u9))); s7: ((int , int) -> (u9 -> ((int -> (u9 -> u9)) -> u9))); 
  and env enriched by
  Values: int_fold: ((int , int) -> (u9 -> ((int -> (u9 -> u9)) -> u9))); 
  Types: 
[DBG ast_comp] Succeeded for:  Pstr_rec_value (9,4-11,35): int_fold
[INF ast_comp] Success comparing ecaml/ocaml typing
[DBG typing] Conf.load_path: [, /home/zhdf/easyocaml-0.49/ocaml-3.10.2/lib/ocaml]
[DBG enr_ast] Ocaml ast: [
  structure_item (/home/zhdf/demo/ml/sudoku1.ml[13,369+4]../home/zhdf/demo/ml/sudoku1.ml[15,485+46])
    Pstr_value Rec
    [
      <def>
        pattern (/home/zhdf/demo/ml/sudoku1.ml[13,369+12]../home/zhdf/demo/ml/sudoku1.ml[13,369+24])
          Ppat_var "string_foldi"
        expression (/home/zhdf/demo/ml/sudoku1.ml[13,369+25]../home/zhdf/demo/ml/sudoku1.ml[15,485+46])
          Pexp_function ""
          None
          [
            <case>
              pattern (/home/zhdf/demo/ml/sudoku1.ml[13,369+25]../home/zhdf/demo/ml/sudoku1.ml[13,369+35])
                Ppat_constraint                pattern (/home/zhdf/demo/ml/sudoku1.ml[13,369+26]../home/zhdf/demo/ml/sudoku1.ml[13,369+27])
                  Ppat_var "s"
                core_type (/home/zhdf/demo/ml/sudoku1.ml[13,369+28]../home/zhdf/demo/ml/sudoku1.ml[13,369+34])
                  Ptyp_constr "string"
                  []
              expression (/home/zhdf/demo/ml/sudoku1.ml[13,369+36]../home/zhdf/demo/ml/sudoku1.ml[15,485+46])
                Pexp_function ""
                None
                [
                  <case>
                    pattern (/home/zhdf/demo/ml/sudoku1.ml[13,369+36]../home/zhdf/demo/ml/sudoku1.ml[13,369+42])
                      Ppat_constraint                      pattern (/home/zhdf/demo/ml/sudoku1.ml[13,369+37]../home/zhdf/demo/ml/sudoku1.ml[13,369+38])
                        Ppat_var "a"
                      core_type (/home/zhdf/demo/ml/sudoku1.ml[13,369+39]../home/zhdf/demo/ml/sudoku1.ml[13,369+41])
                        Ptyp_var a
                    expression (/home/zhdf/demo/ml/sudoku1.ml[13,369+43]../home/zhdf/demo/ml/sudoku1.ml[15,485+46])
                      Pexp_function ""
                      None
                      [
                        <case>
                          pattern (/home/zhdf/demo/ml/sudoku1.ml[13,369+43]../home/zhdf/demo/ml/sudoku1.ml[13,369+59])
                            Ppat_constraint                            pattern (/home/zhdf/demo/ml/sudoku1.ml[13,369+44]../home/zhdf/demo/ml/sudoku1.ml[13,369+45])
                              Ppat_var "f"
                            core_type (/home/zhdf/demo/ml/sudoku1.ml[13,369+50]../home/zhdf/demo/ml/sudoku1.ml[13,369+58])
                              Ptyp_arrow
                              ""
                              core_type (/home/zhdf/demo/ml/sudoku1.ml[13,369+46]../home/zhdf/demo/ml/sudoku1.ml[13,369+50])
                                Ptyp_constr "char"
                                []
                              core_type (/home/zhdf/demo/ml/sudoku1.ml[13,369+54]../home/zhdf/demo/ml/sudoku1.ml[13,369+58])
                                Ptyp_arrow
                                ""
                                core_type (/home/zhdf/demo/ml/sudoku1.ml[13,369+52]../home/zhdf/demo/ml/sudoku1.ml[13,369+54])
                                  Ptyp_var a
                                core_type (/home/zhdf/demo/ml/sudoku1.ml[13,369+56]../home/zhdf/demo/ml/sudoku1.ml[13,369+58])
                                  Ptyp_var a
                          expression (/home/zhdf/demo/ml/sudoku1.ml[13,369+60]../home/zhdf/demo/ml/sudoku1.ml[15,485+46])
                            Pexp_function ""
                            None
                            [
                              <case>
                                pattern (/home/zhdf/demo/ml/sudoku1.ml[13,369+60]../home/zhdf/demo/ml/sudoku1.ml[13,369+67])
                                  Ppat_constraint                                  pattern (/home/zhdf/demo/ml/sudoku1.ml[13,369+61]../home/zhdf/demo/ml/sudoku1.ml[13,369+62])
                                    Ppat_var "i"
                                  core_type (/home/zhdf/demo/ml/sudoku1.ml[13,369+63]../home/zhdf/demo/ml/sudoku1.ml[13,369+66])
                                    Ptyp_constr "int"
                                    []
                                expression (/home/zhdf/demo/ml/sudoku1.ml[14,440+8]../home/zhdf/demo/ml/sudoku1.ml[15,485+46])
                                  Pexp_ifthenelse
                                  expression (/home/zhdf/demo/ml/sudoku1.ml[14,440+13]../home/zhdf/demo/ml/sudoku1.ml[14,440+31])
                                    Pexp_apply
                                    expression (/home/zhdf/demo/ml/sudoku1.ml[14,440+13]../home/zhdf/demo/ml/sudoku1.ml[14,440+15])
                                      Pexp_ident ">="
                                    [
                                      <label> ""
                                        expression (/home/zhdf/demo/ml/sudoku1.ml[14,440+11]../home/zhdf/demo/ml/sudoku1.ml[14,440+12])
                                          Pexp_ident "i"
                                      <label> ""
                                        expression (/home/zhdf/demo/ml/sudoku1.ml[14,440+30]../home/zhdf/demo/ml/sudoku1.ml[14,440+31])
                                          Pexp_apply
                                          expression (/home/zhdf/demo/ml/sudoku1.ml[14,440+16]../home/zhdf/demo/ml/sudoku1.ml[14,440+29])
                                            Pexp_ident "String.length"
                                          [
                                            <label> ""
                                              expression (/home/zhdf/demo/ml/sudoku1.ml[14,440+30]../home/zhdf/demo/ml/sudoku1.ml[14,440+31])
                                                Pexp_ident "s"
                                          ]
                                    ]
                                  expression (/home/zhdf/demo/ml/sudoku1.ml[14,440+37]../home/zhdf/demo/ml/sudoku1.ml[14,440+38])
                                    Pexp_ident "a"
                                  Some
                                    expression (/home/zhdf/demo/ml/sudoku1.ml[15,485+41]../home/zhdf/demo/ml/sudoku1.ml[15,485+46])
                                      Pexp_apply
                                      expression (/home/zhdf/demo/ml/sudoku1.ml[15,485+1]../home/zhdf/demo/ml/sudoku1.ml[15,485+13])
                                        Pexp_ident "string_foldi"
                                      [
                                        <label> ""
                                          expression (/home/zhdf/demo/ml/sudoku1.ml[15,485+14]../home/zhdf/demo/ml/sudoku1.ml[15,485+15])
                                            Pexp_ident "s"
                                        <label> ""
                                          expression (/home/zhdf/demo/ml/sudoku1.ml[15,485+36]../home/zhdf/demo/ml/sudoku1.ml[15,485+37])
                                            Pexp_apply
                                            expression (/home/zhdf/demo/ml/sudoku1.ml[15,485+17]../home/zhdf/demo/ml/sudoku1.ml[15,485+18])
                                              Pexp_ident "f"
                                            [
                                              <label> ""
                                                expression (/home/zhdf/demo/ml/sudoku1.ml[15,485+33]../home/zhdf/demo/ml/sudoku1.ml[15,485+34])
                                                  Pexp_apply
                                                  expression (/home/zhdf/demo/ml/sudoku1.ml[15,485+20]../home/zhdf/demo/ml/sudoku1.ml[15,485+30])
                                                    Pexp_ident "String.get"
                                                  [
                                                    <label> ""
                                                      expression (/home/zhdf/demo/ml/sudoku1.ml[15,485+31]../home/zhdf/demo/ml/sudoku1.ml[15,485+32])
                                                        Pexp_ident "s"
                                                    <label> ""
                                                      expression (/home/zhdf/demo/ml/sudoku1.ml[15,485+33]../home/zhdf/demo/ml/sudoku1.ml[15,485+34])
                                                        Pexp_ident "i"
                                                  ]
                                              <label> ""
                                                expression (/home/zhdf/demo/ml/sudoku1.ml[15,485+36]../home/zhdf/demo/ml/sudoku1.ml[15,485+37])
                                                  Pexp_ident "a"
                                            ]
                                        <label> ""
                                          expression (/home/zhdf/demo/ml/sudoku1.ml[15,485+39]../home/zhdf/demo/ml/sudoku1.ml[15,485+40])
                                            Pexp_ident "f"
                                        <label> ""
                                          expression (/home/zhdf/demo/ml/sudoku1.ml[15,485+43]../home/zhdf/demo/ml/sudoku1.ml[15,485+45])
                                            Pexp_apply
                                            expression (/home/zhdf/demo/ml/sudoku1.ml[15,485+43]../home/zhdf/demo/ml/sudoku1.ml[15,485+44])
                                              Pexp_ident "+"
                                            [
                                              <label> ""
                                                expression (/home/zhdf/demo/ml/sudoku1.ml[15,485+42]../home/zhdf/demo/ml/sudoku1.ml[15,485+43])
                                                  Pexp_ident "i"
                                              <label> ""
                                                expression (/home/zhdf/demo/ml/sudoku1.ml[15,485+44]../home/zhdf/demo/ml/sudoku1.ml[15,485+45])
                                                  Pexp_constant Const_int 1
                                            ]
                                      ]
                            ]
                      ]
                ]
          ]
    ]
]

[INF enr_ast] A different parser than Ocaml's default should be used to avoid inaccuracy for the location of multiple application (15,41-46).
[INF enr_ast] A different parser than Ocaml's default should be used to avoid inaccuracy for the location of multiple application (15,36-37).
[INF enr_ast] A different parser than Ocaml's default should be used to avoid inaccuracy for the location of multiple application (15,33-34).
[INF enr_ast] A different parser than Ocaml's default should be used to avoid inaccuracy for the location of multiple application (15,43-45).
[INF enr_ast] A different parser than Ocaml's default should be used to avoid inaccuracy for the location of multiple application (14,13-31).
[DBG env] Adding field contents
[DBG typing] Type structure in env:
               Values: !: (Pervasives.ref t10 -> t10);
               &&: (bool -> (bool -> bool)); &: (bool -> (bool -> bool));
               !=: (u10 -> (u10 -> bool)); **: (float -> (float -> float));
               +: (int -> (int -> int)); *.: (float -> (float -> float));
               -: (int -> (int -> int)); /: (int -> (int -> int));
               -.: (float -> (float -> float));
               +.: (float -> (float -> float)); *: (int -> (int -> int));
               <: (y10 -> (y10 -> bool));
               :=: (Pervasives.ref v10 -> (v10 -> unit));
               =: (o11 -> (o11 -> bool)); <>: (w10 -> (w10 -> bool));
               >=: (l11 -> (l11 -> bool)); >: (b11 -> (b11 -> bool));
               ==: (a11 -> (a11 -> bool)); <=: (x10 -> (x10 -> bool));
               /.: (float -> (float -> float));
               ^: (string -> (string -> string)); abs: (int -> int);
               ^^: (format6 d11 e11 f11 g11 h11 i11 -> (format6 i11 e11 f11 h11 j11 k11 -> format6 d11 e11 f11 g11 j11 k11));
               acos: (float -> float); asr: (int -> (int -> int));
               at_exit: ((unit -> unit) -> unit); asin: (float -> float);
               abs_float: (float -> float);
               atan2: (float -> (float -> float));
               bool_of_string: (string -> bool);
               classify_float: (float -> Pervasives.fpclass);
               char_of_int: (int -> char);
               close_in_noerr: (Pervasives.in_channel -> unit);
               close_in: (Pervasives.in_channel -> unit);
               ceil: (float -> float); atan: (float -> float);
               @: (list c11 -> (list c11 -> list c11));
               close_out_noerr: (Pervasives.out_channel -> unit);
               cos: (float -> float); cosh: (float -> float);
               compare: (m11 -> (m11 -> int)); epsilon_float: float;
               do_at_exit: (unit -> unit);
               decr: (Pervasives.ref int -> unit); failwith: (string -> c12);
               exp: (float -> float); float_of_int: (int -> float);
               float: (int -> float); floor: (float -> float);
               flush: (Pervasives.out_channel -> unit);
               frexp: (float -> (float , int));
               format_of_string: (format6 p11 q11 r11 s11 t11 u11 -> format6 p11 q11 r11 s11 t11 u11);
               flush_all: (unit -> unit); float_of_string: (string -> float);
               exit: (int -> n11); ignore: (x11 -> unit); infinity: float;
               incr: (Pervasives.ref int -> unit);
               in_channel_length: (Pervasives.in_channel -> int);
               input_byte: (Pervasives.in_channel -> int);
               input_binary_int: (Pervasives.in_channel -> int);
               input: (Pervasives.in_channel -> (string -> (int -> (int -> int))));
               input_line: (Pervasives.in_channel -> string);
               int_fold: ((int , int) -> (a12 -> ((int -> (a12 -> a12)) -> a12)));
               input_value: (Pervasives.in_channel -> y11);
               int_of_float: (float -> int); int_of_string: (string -> int);
               int_of_char: (char -> int); land: (int -> (int -> int));
               log: (float -> float); lnot: (int -> int);
               ldexp: (float -> (int -> float)); lor: (int -> (int -> int));
               lsl: (int -> (int -> int)); log10: (float -> float);
               invalid_arg: (string -> b12);
               input_char: (Pervasives.in_channel -> char);
               fst: ((v11 , w11) -> v11);
               close_out: (Pervasives.out_channel -> unit);
               lxor: (int -> (int -> int)); max_float: float;
               max: (e12 -> (e12 -> e12)); min: (d12 -> (d12 -> d12));
               mod: (int -> (int -> int)); min_int: int; min_float: float;
               max_int: int; modf: (float -> (float , float));
               neg_infinity: float; nan: float;
               open_in: (string -> Pervasives.in_channel);
               open_in_bin: (string -> Pervasives.in_channel);
               not: (bool -> bool);
               open_out: (string -> Pervasives.out_channel);
               or: (bool -> (bool -> bool));
               open_out_gen: (list Pervasives.open_flag -> (int -> (string -> Pervasives.out_channel)));
               open_out_bin: (string -> Pervasives.out_channel);
               output: (Pervasives.out_channel -> (string -> (int -> (int -> unit))));
               output_byte: (Pervasives.out_channel -> (int -> unit));
               output_binary_int: (Pervasives.out_channel -> (int -> unit));
               out_channel_length: (Pervasives.out_channel -> int);
               open_in_gen: (list Pervasives.open_flag -> (int -> (string -> Pervasives.in_channel)));
               mod_float: (float -> (float -> float));
               output_string: (Pervasives.out_channel -> (string -> unit));
               output_value: (Pervasives.out_channel -> (f12 -> unit));
               pos_out: (Pervasives.out_channel -> int);
               pos_in: (Pervasives.in_channel -> int);
               prerr_char: (char -> unit); prerr_float: (float -> unit);
               prerr_int: (int -> unit); prerr_endline: (string -> unit);
               pred: (int -> int); prerr_string: (string -> unit);
               print_float: (float -> unit); print_endline: (string -> unit);
               print_char: (char -> unit); print_newline: (unit -> unit);
               raise: (exn -> g12); print_string: (string -> unit);
               print_int: (int -> unit); read_int: (unit -> int);
               really_input: (Pervasives.in_channel -> (string -> (int -> (int -> unit))));
               read_line: (unit -> string);
               seek_in: (Pervasives.in_channel -> (int -> unit));
               ref: (h12 -> Pervasives.ref h12); read_float: (unit -> float);
               prerr_newline: (unit -> unit);
               set_binary_mode_out: (Pervasives.out_channel -> (bool -> unit));
               set_binary_mode_in: (Pervasives.in_channel -> (bool -> unit));
               sinh: (float -> float); sin: (float -> float);
               sqrt: (float -> float); stderr: Pervasives.out_channel;
               string_of_bool: (bool -> string);
               stdout: Pervasives.out_channel; stdin: Pervasives.in_channel;
               snd: ((i12 , j12) -> j12);
               string_of_format: (format6 k12 l12 m12 n12 o12 p12 -> string);
               tan: (float -> float); succ: (int -> int);
               string_of_int: (int -> string); truncate: (float -> int);
               unsafe_really_input: (Pervasives.in_channel -> (string -> (int -> (int -> unit))));
               ||: (bool -> (bool -> bool)); ~-.: (float -> float);
               ~-: (int -> int); valid_float_lexem: (string -> string);
               tanh: (float -> float); string_of_float: (float -> string);
               seek_out: (Pervasives.out_channel -> (int -> unit));
               output_char: (Pervasives.out_channel -> (char -> unit));
               lsr: (int -> (int -> int)); 
               Types: type (q12) array = <abstr>;
               type () bool = | false | true ; type () board = array int;
               type () exn = ;
               type (r12, s12, t12) format = Pervasives.format4 r12 s12 t12 t12;
               type () float = <abstr>; type () char = <abstr>;
               type (y12, a13, b13, c13, d13, e13) format6 = <abstr>;
               type () int = <abstr>; type () in_channel = <abstr>;
               type () fpclass = | FP_infinite | FP_nan | FP_normal | FP_subnormal | FP_zero ;
               type () int64 = <abstr>;
               type (g13) list = | :: of g13 * list g13 | [] ;
               type (f13) lazy_t = <abstr>; type () int32 = <abstr>;
               type (u12, v12, w12, x12) format4 = format6 u12 v12 w12 w12 w12 x12;
               type (i13) option = | None | Some of i13 ;
               type () open_flag = | Open_append | Open_binary | Open_creat | Open_excl | Open_nonblock | Open_rdonly | Open_text | Open_trunc | Open_wronly ;
               type () rectangle = (int , int , int , int);
               type () out_channel = <abstr>; type () string = <abstr>;
               type () unit = | () ;
               type (h13) ref = {contents -> Mutableh13; };
               type () nativeint = <abstr>; 
[DBG generate] for pattern at 13,25-35 s : string
  (bound: {s -> l13; }, ty: m13,
   cs: {n13 =13,25-35= l13; m13 =13,25-35= o13; o13 =13,28-34= string;
        n13 =13,28-34= string; })
[DBG generate] for pattern at 13,36-42 a : 'a
  (bound: {a -> q13; }, ty: r13,
   cs: {s13 =13,36-42= q13; r13 =13,36-42= t13; t13 =13,39-41= u13;
        s13 =13,39-41= u13; })
[DBG generate] for pattern at 13,43-59 f : (char -> ('a -> 'a))
  (bound: {f -> w13; }, ty: x13,
   cs: {y13 =13,43-59= w13; x13 =13,43-59= a14;
        a14 =13,50-58= (char -> (b14 -> b14));
        y13 =13,50-58= (char -> (b14 -> b14)); })
[DBG generate] for pattern at 13,60-67 i : int
  (bound: {i -> d14; }, ty: e14,
   cs: {f14 =13,60-67= d14; e14 =13,60-67= g14; g14 =13,63-66= int;
        f14 =13,63-66= int; })
[DBG generate] for_expr at 14,13-15 (>=): o14 -
  {(q14 -> (q14 -> bool)) =Pervasives.(>=)= p14; p14 =14,13-15= o14; }
[DBG generate] for_expr at 14,11-12 i: r14 -
  {s14 =13,61-62= d14; r14 =14,11-12= s14; }
[DBG generate] for_expr at 14,13-12 (>=)~i: l14 -
  {(q14 -> (q14 -> bool)) =Pervasives.(>=)= p14; s14 =13,61-62= d14;
   r14 =14,11-12= s14; r14 =14,13-12= m14; o14 =14,13-12= (m14 -> n14);
   l14 =14,13-12= n14; p14 =14,13-15= o14; }
[DBG generate] for_expr at 14,16-29 String.length: w14 -
  {(string -> int) =String.length= x14; x14 =14,16-29= w14; }
[DBG generate] for_expr at 14,30-31 s: y14 -
  {a15 =13,26-27= l13; y14 =14,30-31= a15; }
[DBG generate] for_expr at 14,30-31 String.length~s: t14 -
  {(string -> int) =String.length= x14; a15 =13,26-27= l13;
   x14 =14,16-29= w14; y14 =14,30-31= a15; y14 =14,30-31= u14;
   w14 =14,30-31= (u14 -> v14); t14 =14,30-31= v14; }
[DBG generate] for_expr at 14,13-31 i >= String.length~s: i14 -
  {(q14 -> (q14 -> bool)) =Pervasives.(>=)= p14;
   (string -> int) =String.length= x14; a15 =13,26-27= l13;
   s14 =13,61-62= d14; r14 =14,11-12= s14; r14 =14,13-12= m14;
   o14 =14,13-12= (m14 -> n14); l14 =14,13-12= n14; p14 =14,13-15= o14;
   t14 =14,13-31= j14; l14 =14,13-31= (j14 -> k14); i14 =14,13-31= k14;
   x14 =14,16-29= w14; y14 =14,30-31= a15; y14 =14,30-31= u14;
   w14 =14,30-31= (u14 -> v14); t14 =14,30-31= v14; }
[DBG generate] for_expr at 14,37-38 a: b15 -
  {c15 =13,37-38= q13; b15 =14,37-38= c15; }
[DBG generate] for_expr at 15,1-13 string_foldi: p15 -
  {q15 =13,4-15,46= j13; p15 =15,1-13= q15; }
[DBG generate] for_expr at 15,14-15 s: r15 -
  {s15 =13,26-27= l13; r15 =15,14-15= s15; }
[DBG generate] for_expr at 15,1-15 string_foldi~s: m15 -
  {q15 =13,4-15,46= j13; s15 =13,26-27= l13; p15 =15,1-13= q15;
   r15 =15,1-15= n15; p15 =15,1-15= (n15 -> o15); m15 =15,1-15= o15;
   r15 =15,14-15= s15; }
[DBG generate] for_expr at 15,17-18 f: a16 -
  {b16 =13,44-45= w13; a16 =15,17-18= b16; }
[DBG generate] for_expr at 15,20-30 String.get: i16 -
  {(string -> (int -> char)) =String.get= j16; j16 =15,20-30= i16; }
[DBG generate] for_expr at 15,31-32 s: k16 -
  {l16 =13,26-27= l13; k16 =15,31-32= l16; }
[DBG generate] for_expr at 15,20-32 String.get~s: f16 -
  {(string -> (int -> char)) =String.get= j16; l16 =13,26-27= l13;
   j16 =15,20-30= i16; k16 =15,20-32= g16; i16 =15,20-32= (g16 -> h16);
   f16 =15,20-32= h16; k16 =15,31-32= l16; }
[DBG generate] for_expr at 15,33-34 i: m16 -
  {n16 =13,61-62= d14; m16 =15,33-34= n16; }
[DBG generate] for_expr at 15,20-34 String.get~s~i: c16 -
  {(string -> (int -> char)) =String.get= j16; l16 =13,26-27= l13;
   n16 =13,61-62= d14; j16 =15,20-30= i16; k16 =15,20-32= g16;
   i16 =15,20-32= (g16 -> h16); f16 =15,20-32= h16; m16 =15,20-34= d16;
   f16 =15,20-34= (d16 -> e16); c16 =15,20-34= e16; k16 =15,31-32= l16;
   m16 =15,33-34= n16; }
[DBG generate] for_expr at 15,17-34 f~String.get~s~i: w15 -
  {(string -> (int -> char)) =String.get= j16; l16 =13,26-27= l13;
   b16 =13,44-45= w13; n16 =13,61-62= d14; a16 =15,17-18= b16;
   c16 =15,17-34= x15; a16 =15,17-34= (x15 -> y15); w15 =15,17-34= y15;
   j16 =15,20-30= i16; k16 =15,20-32= g16; i16 =15,20-32= (g16 -> h16);
   f16 =15,20-32= h16; m16 =15,20-34= d16; f16 =15,20-34= (d16 -> e16);
   c16 =15,20-34= e16; k16 =15,31-32= l16; m16 =15,33-34= n16; }
[DBG generate] for_expr at 15,36-37 a: o16 -
  {p16 =13,37-38= q13; o16 =15,36-37= p16; }
[DBG generate] for_expr at 15,17-37 f~String.get~s~i~a: t15 -
  {(string -> (int -> char)) =String.get= j16; l16 =13,26-27= l13;
   p16 =13,37-38= q13; b16 =13,44-45= w13; n16 =13,61-62= d14;
   a16 =15,17-18= b16; c16 =15,17-34= x15; a16 =15,17-34= (x15 -> y15);
   w15 =15,17-34= y15; o16 =15,17-37= u15; w15 =15,17-37= (u15 -> v15);
   t15 =15,17-37= v15; j16 =15,20-30= i16; k16 =15,20-32= g16;
   i16 =15,20-32= (g16 -> h16); f16 =15,20-32= h16; m16 =15,20-34= d16;
   f16 =15,20-34= (d16 -> e16); c16 =15,20-34= e16; k16 =15,31-32= l16;
   m16 =15,33-34= n16; o16 =15,36-37= p16; }
[DBG generate] for_expr at 15,1-37 string_foldi~s~f~String.get~s~i~a: j15 -
  {(string -> (int -> char)) =String.get= j16; q15 =13,4-15,46= j13;
   l16 =13,26-27= l13; s15 =13,26-27= l13; p16 =13,37-38= q13;
   b16 =13,44-45= w13; n16 =13,61-62= d14; p15 =15,1-13= q15;
   r15 =15,1-15= n15; p15 =15,1-15= (n15 -> o15); m15 =15,1-15= o15;
   t15 =15,1-37= k15; m15 =15,1-37= (k15 -> l15); j15 =15,1-37= l15;
   r15 =15,14-15= s15; a16 =15,17-18= b16; c16 =15,17-34= x15;
   a16 =15,17-34= (x15 -> y15); w15 =15,17-34= y15; o16 =15,17-37= u15;
   w15 =15,17-37= (u15 -> v15); t15 =15,17-37= v15; j16 =15,20-30= i16;
   k16 =15,20-32= g16; i16 =15,20-32= (g16 -> h16); f16 =15,20-32= h16;
   m16 =15,20-34= d16; f16 =15,20-34= (d16 -> e16); c16 =15,20-34= e16;
   k16 =15,31-32= l16; m16 =15,33-34= n16; o16 =15,36-37= p16; }
[DBG generate] for_expr at 15,39-40 f: q16 -
  {r16 =13,44-45= w13; q16 =15,39-40= r16; }
[DBG generate] for_expr at 15,1-40 string_foldi~s~f~String.get~s~i~a~f: g15 -
  {(string -> (int -> char)) =String.get= j16; q15 =13,4-15,46= j13;
   l16 =13,26-27= l13; s15 =13,26-27= l13; p16 =13,37-38= q13;
   r16 =13,44-45= w13; b16 =13,44-45= w13; n16 =13,61-62= d14;
   p15 =15,1-13= q15; r15 =15,1-15= n15; p15 =15,1-15= (n15 -> o15);
   m15 =15,1-15= o15; t15 =15,1-37= k15; m15 =15,1-37= (k15 -> l15);
   j15 =15,1-37= l15; q16 =15,1-40= h15; j15 =15,1-40= (h15 -> i15);
   g15 =15,1-40= i15; r15 =15,14-15= s15; a16 =15,17-18= b16;
   c16 =15,17-34= x15; a16 =15,17-34= (x15 -> y15); w15 =15,17-34= y15;
   o16 =15,17-37= u15; w15 =15,17-37= (u15 -> v15); t15 =15,17-37= v15;
   j16 =15,20-30= i16; k16 =15,20-32= g16; i16 =15,20-32= (g16 -> h16);
   f16 =15,20-32= h16; m16 =15,20-34= d16; f16 =15,20-34= (d16 -> e16);
   c16 =15,20-34= e16; k16 =15,31-32= l16; m16 =15,33-34= n16;
   o16 =15,36-37= p16; q16 =15,39-40= r16; }
[DBG generate] for_expr at 15,43-44 (+): y16 -
  {(int -> (int -> int)) =Pervasives.(+)= a17; a17 =15,43-44= y16; }
[DBG generate] for_expr at 15,42-43 i: b17 -
  {c17 =13,61-62= d14; b17 =15,42-43= c17; }
[DBG generate] for_expr at 15,43-43 (+)~i: v16 -
  {(int -> (int -> int)) =Pervasives.(+)= a17; c17 =13,61-62= d14;
   b17 =15,42-43= c17; b17 =15,43-43= w16; y16 =15,43-43= (w16 -> x16);
   v16 =15,43-43= x16; a17 =15,43-44= y16; }
[DBG generate] for_expr at 15,44-45 1: d17 - {int =15,44-45= d17; }
[DBG generate] for_expr at 15,43-45 i + 1: s16 -
  {(int -> (int -> int)) =Pervasives.(+)= a17; c17 =13,61-62= d14;
   b17 =15,42-43= c17; b17 =15,43-43= w16; y16 =15,43-43= (w16 -> x16);
   v16 =15,43-43= x16; a17 =15,43-44= y16; d17 =15,43-45= t16;
   v16 =15,43-45= (t16 -> u16); s16 =15,43-45= u16; int =15,44-45= d17; }
[DBG generate] for_expr at 15,1-45 string_foldi~s~f~String.get~s~i~a~f~i + 1:
  d15 -
  {(int -> (int -> int)) =Pervasives.(+)= a17;
   (string -> (int -> char)) =String.get= j16; q15 =13,4-15,46= j13;
   l16 =13,26-27= l13; s15 =13,26-27= l13; p16 =13,37-38= q13;
   r16 =13,44-45= w13; b16 =13,44-45= w13; c17 =13,61-62= d14;
   n16 =13,61-62= d14; p15 =15,1-13= q15; r15 =15,1-15= n15;
   p15 =15,1-15= (n15 -> o15); m15 =15,1-15= o15; t15 =15,1-37= k15;
   m15 =15,1-37= (k15 -> l15); j15 =15,1-37= l15; q16 =15,1-40= h15;
   j15 =15,1-40= (h15 -> i15); g15 =15,1-40= i15; s16 =15,1-45= e15;
   g15 =15,1-45= (e15 -> f15); d15 =15,1-45= f15; r15 =15,14-15= s15;
   a16 =15,17-18= b16; c16 =15,17-34= x15; a16 =15,17-34= (x15 -> y15);
   w15 =15,17-34= y15; o16 =15,17-37= u15; w15 =15,17-37= (u15 -> v15);
   t15 =15,17-37= v15; j16 =15,20-30= i16; k16 =15,20-32= g16;
   i16 =15,20-32= (g16 -> h16); f16 =15,20-32= h16; m16 =15,20-34= d16;
   f16 =15,20-34= (d16 -> e16); c16 =15,20-34= e16; k16 =15,31-32= l16;
   m16 =15,33-34= n16; o16 =15,36-37= p16; q16 =15,39-40= r16;
   b17 =15,42-43= c17; b17 =15,43-43= w16; y16 =15,43-43= (w16 -> x16);
   v16 =15,43-43= x16; a17 =15,43-44= y16; d17 =15,43-45= t16;
   v16 =15,43-45= (t16 -> u16); s16 =15,43-45= u16; int =15,44-45= d17; }
[DBG generate] for_expr at 14,8-15,46
  if i >= String.length~s then a
  else string_foldi~s~f~String.get~s~i~a~f~i + 1: h14 -
  {(int -> (int -> int)) =Pervasives.(+)= a17;
   (q14 -> (q14 -> bool)) =Pervasives.(>=)= p14;
   (string -> (int -> char)) =String.get= j16;
   (string -> int) =String.length= x14; q15 =13,4-15,46= j13;
   l16 =13,26-27= l13; s15 =13,26-27= l13; a15 =13,26-27= l13;
   p16 =13,37-38= q13; c15 =13,37-38= q13; r16 =13,44-45= w13;
   b16 =13,44-45= w13; c17 =13,61-62= d14; n16 =13,61-62= d14;
   s14 =13,61-62= d14; d15 =14,8-15,46= h14; b15 =14,8-15,46= h14;
   i14 =14,8-15,46= bool; r14 =14,11-12= s14; r14 =14,13-12= m14;
   o14 =14,13-12= (m14 -> n14); l14 =14,13-12= n14; p14 =14,13-15= o14;
   t14 =14,13-31= j14; l14 =14,13-31= (j14 -> k14); i14 =14,13-31= k14;
   x14 =14,16-29= w14; y14 =14,30-31= a15; y14 =14,30-31= u14;
   w14 =14,30-31= (u14 -> v14); t14 =14,30-31= v14; b15 =14,37-38= c15;
   p15 =15,1-13= q15; r15 =15,1-15= n15; p15 =15,1-15= (n15 -> o15);
   m15 =15,1-15= o15; t15 =15,1-37= k15; m15 =15,1-37= (k15 -> l15);
   j15 =15,1-37= l15; q16 =15,1-40= h15; j15 =15,1-40= (h15 -> i15);
   g15 =15,1-40= i15; s16 =15,1-45= e15; g15 =15,1-45= (e15 -> f15);
   d15 =15,1-45= f15; r15 =15,14-15= s15; a16 =15,17-18= b16;
   c16 =15,17-34= x15; a16 =15,17-34= (x15 -> y15); w15 =15,17-34= y15;
   o16 =15,17-37= u15; w15 =15,17-37= (u15 -> v15); t15 =15,17-37= v15;
   j16 =15,20-30= i16; k16 =15,20-32= g16; i16 =15,20-32= (g16 -> h16);
   f16 =15,20-32= h16; m16 =15,20-34= d16; f16 =15,20-34= (d16 -> e16);
   c16 =15,20-34= e16; k16 =15,31-32= l16; m16 =15,33-34= n16;
   o16 =15,36-37= p16; q16 =15,39-40= r16; b17 =15,42-43= c17;
   b17 =15,43-43= w16; y16 =15,43-43= (w16 -> x16); v16 =15,43-43= x16;
   a17 =15,43-44= y16; d17 =15,43-45= t16; v16 =15,43-45= (t16 -> u16);
   s16 =15,43-45= u16; int =15,44-45= d17; }
[DBG generate] for_expr at 13,60-15,46
  function
    i : int ->
    if i >= String.length~s then a
    else string_foldi~s~f~String.get~s~i~a~f~i + 1:
  c14 -
  {(int -> (int -> int)) =Pervasives.(+)= a17;
   (q14 -> (q14 -> bool)) =Pervasives.(>=)= p14;
   (string -> (int -> char)) =String.get= j16;
   (string -> int) =String.length= x14; q15 =13,4-15,46= j13;
   l16 =13,26-27= l13; s15 =13,26-27= l13; a15 =13,26-27= l13;
   p16 =13,37-38= q13; c15 =13,37-38= q13; r16 =13,44-45= w13;
   b16 =13,44-45= w13; f14 =13,60-67= d14; e14 =13,60-67= g14;
   h17 =13,60-15,46= e17; h17 =13,60-15,46= h14; g17 =13,60-15,46= f17;
   g17 =13,60-15,46= e14; c14 =13,60-15,46= (g17 -> h17); c17 =13,61-62= d14;
   n16 =13,61-62= d14; s14 =13,61-62= d14; g14 =13,63-66= int;
   f14 =13,63-66= int; d15 =14,8-15,46= h14; b15 =14,8-15,46= h14;
   i14 =14,8-15,46= bool; r14 =14,11-12= s14; r14 =14,13-12= m14;
   o14 =14,13-12= (m14 -> n14); l14 =14,13-12= n14; p14 =14,13-15= o14;
   t14 =14,13-31= j14; l14 =14,13-31= (j14 -> k14); i14 =14,13-31= k14;
   x14 =14,16-29= w14; y14 =14,30-31= a15; y14 =14,30-31= u14;
   w14 =14,30-31= (u14 -> v14); t14 =14,30-31= v14; b15 =14,37-38= c15;
   p15 =15,1-13= q15; r15 =15,1-15= n15; p15 =15,1-15= (n15 -> o15);
   m15 =15,1-15= o15; t15 =15,1-37= k15; m15 =15,1-37= (k15 -> l15);
   j15 =15,1-37= l15; q16 =15,1-40= h15; j15 =15,1-40= (h15 -> i15);
   g15 =15,1-40= i15; s16 =15,1-45= e15; g15 =15,1-45= (e15 -> f15);
   d15 =15,1-45= f15; r15 =15,14-15= s15; a16 =15,17-18= b16;
   c16 =15,17-34= x15; a16 =15,17-34= (x15 -> y15); w15 =15,17-34= y15;
   o16 =15,17-37= u15; w15 =15,17-37= (u15 -> v15); t15 =15,17-37= v15;
   j16 =15,20-30= i16; k16 =15,20-32= g16; i16 =15,20-32= (g16 -> h16);
   f16 =15,20-32= h16; m16 =15,20-34= d16; f16 =15,20-34= (d16 -> e16);
   c16 =15,20-34= e16; k16 =15,31-32= l16; m16 =15,33-34= n16;
   o16 =15,36-37= p16; q16 =15,39-40= r16; b17 =15,42-43= c17;
   b17 =15,43-43= w16; y16 =15,43-43= (w16 -> x16); v16 =15,43-43= x16;
   a17 =15,43-44= y16; d17 =15,43-45= t16; v16 =15,43-45= (t16 -> u16);
   s16 =15,43-45= u16; int =15,44-45= d17; }
[DBG generate] for_expr at 13,43-15,46
  function
    f : (char -> ('a -> 'a)) ->
    function
      i : int ->
      if i >= String.length~s then a
      else string_foldi~s~f~String.get~s~i~a~f~i + 1:
  v13 -
  {(int -> (int -> int)) =Pervasives.(+)= a17;
   (q14 -> (q14 -> bool)) =Pervasives.(>=)= p14;
   (string -> (int -> char)) =String.get= j16;
   (string -> int) =String.length= x14; q15 =13,4-15,46= j13;
   l16 =13,26-27= l13; s15 =13,26-27= l13; a15 =13,26-27= l13;
   p16 =13,37-38= q13; c15 =13,37-38= q13; y13 =13,43-59= w13;
   x13 =13,43-59= a14; l17 =13,43-15,46= i17; l17 =13,43-15,46= c14;
   k17 =13,43-15,46= j17; k17 =13,43-15,46= x13;
   v13 =13,43-15,46= (k17 -> l17); r16 =13,44-45= w13; b16 =13,44-45= w13;
   a14 =13,50-58= (char -> (b14 -> b14));
   y13 =13,50-58= (char -> (b14 -> b14)); f14 =13,60-67= d14;
   e14 =13,60-67= g14; h17 =13,60-15,46= e17; h17 =13,60-15,46= h14;
   g17 =13,60-15,46= f17; g17 =13,60-15,46= e14;
   c14 =13,60-15,46= (g17 -> h17); c17 =13,61-62= d14; n16 =13,61-62= d14;
   s14 =13,61-62= d14; g14 =13,63-66= int; f14 =13,63-66= int;
   d15 =14,8-15,46= h14; b15 =14,8-15,46= h14; i14 =14,8-15,46= bool;
   r14 =14,11-12= s14; r14 =14,13-12= m14; o14 =14,13-12= (m14 -> n14);
   l14 =14,13-12= n14; p14 =14,13-15= o14; t14 =14,13-31= j14;
   l14 =14,13-31= (j14 -> k14); i14 =14,13-31= k14; x14 =14,16-29= w14;
   y14 =14,30-31= a15; y14 =14,30-31= u14; w14 =14,30-31= (u14 -> v14);
   t14 =14,30-31= v14; b15 =14,37-38= c15; p15 =15,1-13= q15;
   r15 =15,1-15= n15; p15 =15,1-15= (n15 -> o15); m15 =15,1-15= o15;
   t15 =15,1-37= k15; m15 =15,1-37= (k15 -> l15); j15 =15,1-37= l15;
   q16 =15,1-40= h15; j15 =15,1-40= (h15 -> i15); g15 =15,1-40= i15;
   s16 =15,1-45= e15; g15 =15,1-45= (e15 -> f15); d15 =15,1-45= f15;
   r15 =15,14-15= s15; a16 =15,17-18= b16; c16 =15,17-34= x15;
   a16 =15,17-34= (x15 -> y15); w15 =15,17-34= y15; o16 =15,17-37= u15;
   w15 =15,17-37= (u15 -> v15); t15 =15,17-37= v15; j16 =15,20-30= i16;
   k16 =15,20-32= g16; i16 =15,20-32= (g16 -> h16); f16 =15,20-32= h16;
   m16 =15,20-34= d16; f16 =15,20-34= (d16 -> e16); c16 =15,20-34= e16;
   k16 =15,31-32= l16; m16 =15,33-34= n16; o16 =15,36-37= p16;
   q16 =15,39-40= r16; b17 =15,42-43= c17; b17 =15,43-43= w16;
   y16 =15,43-43= (w16 -> x16); v16 =15,43-43= x16; a17 =15,43-44= y16;
   d17 =15,43-45= t16; v16 =15,43-45= (t16 -> u16); s16 =15,43-45= u16;
   int =15,44-45= d17; }
[DBG generate] for_expr at 13,36-15,46
  function
    a : 'a ->
    function
      f : (char -> ('a -> 'a)) ->
      function
        i : int ->
        if i >= String.length~s then a
        else string_foldi~s~f~String.get~s~i~a~f~i + 1:
  p13 -
  {(int -> (int -> int)) =Pervasives.(+)= a17;
   (q14 -> (q14 -> bool)) =Pervasives.(>=)= p14;
   (string -> (int -> char)) =String.get= j16;
   (string -> int) =String.length= x14; q15 =13,4-15,46= j13;
   l16 =13,26-27= l13; s15 =13,26-27= l13; a15 =13,26-27= l13;
   s13 =13,36-42= q13; r13 =13,36-42= t13; p17 =13,36-15,46= m17;
   p17 =13,36-15,46= v13; o17 =13,36-15,46= n17; o17 =13,36-15,46= r13;
   p13 =13,36-15,46= (o17 -> p17); p16 =13,37-38= q13; c15 =13,37-38= q13;
   t13 =13,39-41= u13; s13 =13,39-41= u13; y13 =13,43-59= w13;
   x13 =13,43-59= a14; l17 =13,43-15,46= i17; l17 =13,43-15,46= c14;
   k17 =13,43-15,46= j17; k17 =13,43-15,46= x13;
   v13 =13,43-15,46= (k17 -> l17); r16 =13,44-45= w13; b16 =13,44-45= w13;
   a14 =13,50-58= (char -> (b14 -> b14));
   y13 =13,50-58= (char -> (b14 -> b14)); f14 =13,60-67= d14;
   e14 =13,60-67= g14; h17 =13,60-15,46= e17; h17 =13,60-15,46= h14;
   g17 =13,60-15,46= f17; g17 =13,60-15,46= e14;
   c14 =13,60-15,46= (g17 -> h17); c17 =13,61-62= d14; n16 =13,61-62= d14;
   s14 =13,61-62= d14; g14 =13,63-66= int; f14 =13,63-66= int;
   d15 =14,8-15,46= h14; b15 =14,8-15,46= h14; i14 =14,8-15,46= bool;
   r14 =14,11-12= s14; r14 =14,13-12= m14; o14 =14,13-12= (m14 -> n14);
   l14 =14,13-12= n14; p14 =14,13-15= o14; t14 =14,13-31= j14;
   l14 =14,13-31= (j14 -> k14); i14 =14,13-31= k14; x14 =14,16-29= w14;
   y14 =14,30-31= a15; y14 =14,30-31= u14; w14 =14,30-31= (u14 -> v14);
   t14 =14,30-31= v14; b15 =14,37-38= c15; p15 =15,1-13= q15;
   r15 =15,1-15= n15; p15 =15,1-15= (n15 -> o15); m15 =15,1-15= o15;
   t15 =15,1-37= k15; m15 =15,1-37= (k15 -> l15); j15 =15,1-37= l15;
   q16 =15,1-40= h15; j15 =15,1-40= (h15 -> i15); g15 =15,1-40= i15;
   s16 =15,1-45= e15; g15 =15,1-45= (e15 -> f15); d15 =15,1-45= f15;
   r15 =15,14-15= s15; a16 =15,17-18= b16; c16 =15,17-34= x15;
   a16 =15,17-34= (x15 -> y15); w15 =15,17-34= y15; o16 =15,17-37= u15;
   w15 =15,17-37= (u15 -> v15); t15 =15,17-37= v15; j16 =15,20-30= i16;
   k16 =15,20-32= g16; i16 =15,20-32= (g16 -> h16); f16 =15,20-32= h16;
   m16 =15,20-34= d16; f16 =15,20-34= (d16 -> e16); c16 =15,20-34= e16;
   k16 =15,31-32= l16; m16 =15,33-34= n16; o16 =15,36-37= p16;
   q16 =15,39-40= r16; b17 =15,42-43= c17; b17 =15,43-43= w16;
   y16 =15,43-43= (w16 -> x16); v16 =15,43-43= x16; a17 =15,43-44= y16;
   d17 =15,43-45= t16; v16 =15,43-45= (t16 -> u16); s16 =15,43-45= u16;
   int =15,44-45= d17; }
[DBG generate] for_expr at 13,25-15,46
  function
    s : string ->
    function
      a : 'a ->
      function
        f : (char -> ('a -> 'a)) ->
        function
          i : int ->
          if i >= String.length~s then a
          else string_foldi~s~f~String.get~s~i~a~f~i + 1:
  k13 -
  {(int -> (int -> int)) =Pervasives.(+)= a17;
   (q14 -> (q14 -> bool)) =Pervasives.(>=)= p14;
   (string -> (int -> char)) =String.get= j16;
   (string -> int) =String.length= x14; q15 =13,4-15,46= j13;
   n13 =13,25-35= l13; m13 =13,25-35= o13; t17 =13,25-15,46= q17;
   t17 =13,25-15,46= p13; s17 =13,25-15,46= r17; s17 =13,25-15,46= m13;
   k13 =13,25-15,46= (s17 -> t17); l16 =13,26-27= l13; s15 =13,26-27= l13;
   a15 =13,26-27= l13; o13 =13,28-34= string; n13 =13,28-34= string;
   s13 =13,36-42= q13; r13 =13,36-42= t13; p17 =13,36-15,46= m17;
   p17 =13,36-15,46= v13; o17 =13,36-15,46= n17; o17 =13,36-15,46= r13;
   p13 =13,36-15,46= (o17 -> p17); p16 =13,37-38= q13; c15 =13,37-38= q13;
   t13 =13,39-41= u13; s13 =13,39-41= u13; y13 =13,43-59= w13;
   x13 =13,43-59= a14; l17 =13,43-15,46= i17; l17 =13,43-15,46= c14;
   k17 =13,43-15,46= j17; k17 =13,43-15,46= x13;
   v13 =13,43-15,46= (k17 -> l17); r16 =13,44-45= w13; b16 =13,44-45= w13;
   a14 =13,50-58= (char -> (b14 -> b14));
   y13 =13,50-58= (char -> (b14 -> b14)); f14 =13,60-67= d14;
   e14 =13,60-67= g14; h17 =13,60-15,46= e17; h17 =13,60-15,46= h14;
   g17 =13,60-15,46= f17; g17 =13,60-15,46= e14;
   c14 =13,60-15,46= (g17 -> h17); c17 =13,61-62= d14; n16 =13,61-62= d14;
   s14 =13,61-62= d14; g14 =13,63-66= int; f14 =13,63-66= int;
   d15 =14,8-15,46= h14; b15 =14,8-15,46= h14; i14 =14,8-15,46= bool;
   r14 =14,11-12= s14; r14 =14,13-12= m14; o14 =14,13-12= (m14 -> n14);
   l14 =14,13-12= n14; p14 =14,13-15= o14; t14 =14,13-31= j14;
   l14 =14,13-31= (j14 -> k14); i14 =14,13-31= k14; x14 =14,16-29= w14;
   y14 =14,30-31= a15; y14 =14,30-31= u14; w14 =14,30-31= (u14 -> v14);
   t14 =14,30-31= v14; b15 =14,37-38= c15; p15 =15,1-13= q15;
   r15 =15,1-15= n15; p15 =15,1-15= (n15 -> o15); m15 =15,1-15= o15;
   t15 =15,1-37= k15; m15 =15,1-37= (k15 -> l15); j15 =15,1-37= l15;
   q16 =15,1-40= h15; j15 =15,1-40= (h15 -> i15); g15 =15,1-40= i15;
   s16 =15,1-45= e15; g15 =15,1-45= (e15 -> f15); d15 =15,1-45= f15;
   r15 =15,14-15= s15; a16 =15,17-18= b16; c16 =15,17-34= x15;
   a16 =15,17-34= (x15 -> y15); w15 =15,17-34= y15; o16 =15,17-37= u15;
   w15 =15,17-37= (u15 -> v15); t15 =15,17-37= v15; j16 =15,20-30= i16;
   k16 =15,20-32= g16; i16 =15,20-32= (g16 -> h16); f16 =15,20-32= h16;
   m16 =15,20-34= d16; f16 =15,20-34= (d16 -> e16); c16 =15,20-34= e16;
   k16 =15,31-32= l16; m16 =15,33-34= n16; o16 =15,36-37= p16;
   q16 =15,39-40= r16; b17 =15,42-43= c17; b17 =15,43-43= w16;
   y16 =15,43-43= (w16 -> x16); v16 =15,43-43= x16; a17 =15,43-44= y16;
   d17 =15,43-45= t16; v16 =15,43-45= (t16 -> u16); s16 =15,43-45= u16;
   int =15,44-45= d17; }
[DBG generate] for_structure_item at 13,4-15,46
  let rec string_foldi =
          function
            s : string ->
            function
              a : 'a ->
              function
                f : (char -> ('a -> 'a)) ->
                function
                  i : int ->
                  if i >= String.length~s then a
                  else string_foldi~s~f~String.get~s~i~a~f~i + 1:
  {(int -> (int -> int)) =Pervasives.(+)= a17;
   (q14 -> (q14 -> bool)) =Pervasives.(>=)= p14;
   (string -> (int -> char)) =String.get= j16;
   (string -> int) =String.length= x14; q15 =13,4-15,46= j13;
   j13 =13,4-15,46= k13; n13 =13,25-35= l13; m13 =13,25-35= o13;
   t17 =13,25-15,46= q17; t17 =13,25-15,46= p13; s17 =13,25-15,46= r17;
   s17 =13,25-15,46= m13; k13 =13,25-15,46= (s17 -> t17); l16 =13,26-27= l13;
   s15 =13,26-27= l13; a15 =13,26-27= l13; o13 =13,28-34= string;
   n13 =13,28-34= string; s13 =13,36-42= q13; r13 =13,36-42= t13;
   p17 =13,36-15,46= m17; p17 =13,36-15,46= v13; o17 =13,36-15,46= n17;
   o17 =13,36-15,46= r13; p13 =13,36-15,46= (o17 -> p17); p16 =13,37-38= q13;
   c15 =13,37-38= q13; t13 =13,39-41= u13; s13 =13,39-41= u13;
   y13 =13,43-59= w13; x13 =13,43-59= a14; l17 =13,43-15,46= i17;
   l17 =13,43-15,46= c14; k17 =13,43-15,46= j17; k17 =13,43-15,46= x13;
   v13 =13,43-15,46= (k17 -> l17); r16 =13,44-45= w13; b16 =13,44-45= w13;
   a14 =13,50-58= (char -> (b14 -> b14));
   y13 =13,50-58= (char -> (b14 -> b14)); f14 =13,60-67= d14;
   e14 =13,60-67= g14; h17 =13,60-15,46= e17; h17 =13,60-15,46= h14;
   g17 =13,60-15,46= f17; g17 =13,60-15,46= e14;
   c14 =13,60-15,46= (g17 -> h17); c17 =13,61-62= d14; n16 =13,61-62= d14;
   s14 =13,61-62= d14; g14 =13,63-66= int; f14 =13,63-66= int;
   d15 =14,8-15,46= h14; b15 =14,8-15,46= h14; i14 =14,8-15,46= bool;
   r14 =14,11-12= s14; r14 =14,13-12= m14; o14 =14,13-12= (m14 -> n14);
   l14 =14,13-12= n14; p14 =14,13-15= o14; t14 =14,13-31= j14;
   l14 =14,13-31= (j14 -> k14); i14 =14,13-31= k14; x14 =14,16-29= w14;
   y14 =14,30-31= a15; y14 =14,30-31= u14; w14 =14,30-31= (u14 -> v14);
   t14 =14,30-31= v14; b15 =14,37-38= c15; p15 =15,1-13= q15;
   r15 =15,1-15= n15; p15 =15,1-15= (n15 -> o15); m15 =15,1-15= o15;
   t15 =15,1-37= k15; m15 =15,1-37= (k15 -> l15); j15 =15,1-37= l15;
   q16 =15,1-40= h15; j15 =15,1-40= (h15 -> i15); g15 =15,1-40= i15;
   s16 =15,1-45= e15; g15 =15,1-45= (e15 -> f15); d15 =15,1-45= f15;
   r15 =15,14-15= s15; a16 =15,17-18= b16; c16 =15,17-34= x15;
   a16 =15,17-34= (x15 -> y15); w15 =15,17-34= y15; o16 =15,17-37= u15;
   w15 =15,17-37= (u15 -> v15); t15 =15,17-37= v15; j16 =15,20-30= i16;
   k16 =15,20-32= g16; i16 =15,20-32= (g16 -> h16); f16 =15,20-32= h16;
   m16 =15,20-34= d16; f16 =15,20-34= (d16 -> e16); c16 =15,20-34= e16;
   k16 =15,31-32= l16; m16 =15,33-34= n16; o16 =15,36-37= p16;
   q16 =15,39-40= r16; b17 =15,42-43= c17; b17 =15,43-43= w16;
   y16 =15,43-43= (w16 -> x16); v16 =15,43-43= x16; a17 =15,43-44= y16;
   d17 =15,43-45= t16; v16 =15,43-45= (t16 -> u16); s16 =15,43-45= u16;
   int =15,44-45= d17; }
[DBG generate] Generated for strit, resulting env:
Values: string_foldi: k13; 
  Types: 
[INF typing] 110 constraints generated.
[DBG typing] generated constraints:
               {(int -> (int -> int)) =Pervasives.(+)= a17;
                (q14 -> (q14 -> bool)) =Pervasives.(>=)= p14;
                (string -> (int -> char)) =String.get= j16;
                (string -> int) =String.length= x14; q15 =13,4-15,46= j13;
                j13 =13,4-15,46= k13; n13 =13,25-35= l13; m13 =13,25-35= o13;
                t17 =13,25-15,46= q17; t17 =13,25-15,46= p13;
                s17 =13,25-15,46= r17; s17 =13,25-15,46= m13;
                k13 =13,25-15,46= (s17 -> t17); l16 =13,26-27= l13;
                s15 =13,26-27= l13; a15 =13,26-27= l13;
                o13 =13,28-34= string; n13 =13,28-34= string;
                s13 =13,36-42= q13; r13 =13,36-42= t13;
                p17 =13,36-15,46= m17; p17 =13,36-15,46= v13;
                o17 =13,36-15,46= n17; o17 =13,36-15,46= r13;
                p13 =13,36-15,46= (o17 -> p17); p16 =13,37-38= q13;
                c15 =13,37-38= q13; t13 =13,39-41= u13; s13 =13,39-41= u13;
                y13 =13,43-59= w13; x13 =13,43-59= a14;
                l17 =13,43-15,46= i17; l17 =13,43-15,46= c14;
                k17 =13,43-15,46= j17; k17 =13,43-15,46= x13;
                v13 =13,43-15,46= (k17 -> l17); r16 =13,44-45= w13;
                b16 =13,44-45= w13; a14 =13,50-58= (char -> (b14 -> b14));
                y13 =13,50-58= (char -> (b14 -> b14)); f14 =13,60-67= d14;
                e14 =13,60-67= g14; h17 =13,60-15,46= e17;
                h17 =13,60-15,46= h14; g17 =13,60-15,46= f17;
                g17 =13,60-15,46= e14; c14 =13,60-15,46= (g17 -> h17);
                c17 =13,61-62= d14; n16 =13,61-62= d14; s14 =13,61-62= d14;
                g14 =13,63-66= int; f14 =13,63-66= int; d15 =14,8-15,46= h14;
                b15 =14,8-15,46= h14; i14 =14,8-15,46= bool;
                r14 =14,11-12= s14; r14 =14,13-12= m14;
                o14 =14,13-12= (m14 -> n14); l14 =14,13-12= n14;
                p14 =14,13-15= o14; t14 =14,13-31= j14;
                l14 =14,13-31= (j14 -> k14); i14 =14,13-31= k14;
                x14 =14,16-29= w14; y14 =14,30-31= a15; y14 =14,30-31= u14;
                w14 =14,30-31= (u14 -> v14); t14 =14,30-31= v14;
                b15 =14,37-38= c15; p15 =15,1-13= q15; r15 =15,1-15= n15;
                p15 =15,1-15= (n15 -> o15); m15 =15,1-15= o15;
                t15 =15,1-37= k15; m15 =15,1-37= (k15 -> l15);
                j15 =15,1-37= l15; q16 =15,1-40= h15;
                j15 =15,1-40= (h15 -> i15); g15 =15,1-40= i15;
                s16 =15,1-45= e15; g15 =15,1-45= (e15 -> f15);
                d15 =15,1-45= f15; r15 =15,14-15= s15; a16 =15,17-18= b16;
                c16 =15,17-34= x15; a16 =15,17-34= (x15 -> y15);
                w15 =15,17-34= y15; o16 =15,17-37= u15;
                w15 =15,17-37= (u15 -> v15); t15 =15,17-37= v15;
                j16 =15,20-30= i16; k16 =15,20-32= g16;
                i16 =15,20-32= (g16 -> h16); f16 =15,20-32= h16;
                m16 =15,20-34= d16; f16 =15,20-34= (d16 -> e16);
                c16 =15,20-34= e16; k16 =15,31-32= l16; m16 =15,33-34= n16;
                o16 =15,36-37= p16; q16 =15,39-40= r16; b17 =15,42-43= c17;
                b17 =15,43-43= w16; y16 =15,43-43= (w16 -> x16);
                v16 =15,43-43= x16; a17 =15,43-44= y16; d17 =15,43-45= t16;
                v16 =15,43-45= (t16 -> u16); s16 =15,43-45= u16;
                int =15,44-45= d17; }
[DBG typing] Unifying
               {(int -> (int -> int)) =Pervasives.(+)= a17;
                (q14 -> (q14 -> bool)) =Pervasives.(>=)= p14;
                (string -> (int -> char)) =String.get= j16;
                (string -> int) =String.length= x14; q15 =13,4-15,46= j13;
                j13 =13,4-15,46= k13; n13 =13,25-35= l13; m13 =13,25-35= o13;
                t17 =13,25-15,46= q17; t17 =13,25-15,46= p13;
                s17 =13,25-15,46= r17; s17 =13,25-15,46= m13;
                k13 =13,25-15,46= (s17 -> t17); l16 =13,26-27= l13;
                s15 =13,26-27= l13; a15 =13,26-27= l13;
                o13 =13,28-34= string; n13 =13,28-34= string;
                s13 =13,36-42= q13; r13 =13,36-42= t13;
                p17 =13,36-15,46= m17; p17 =13,36-15,46= v13;
                o17 =13,36-15,46= n17; o17 =13,36-15,46= r13;
                p13 =13,36-15,46= (o17 -> p17); p16 =13,37-38= q13;
                c15 =13,37-38= q13; t13 =13,39-41= u13; s13 =13,39-41= u13;
                y13 =13,43-59= w13; x13 =13,43-59= a14;
                l17 =13,43-15,46= i17; l17 =13,43-15,46= c14;
                k17 =13,43-15,46= j17; k17 =13,43-15,46= x13;
                v13 =13,43-15,46= (k17 -> l17); r16 =13,44-45= w13;
                b16 =13,44-45= w13; a14 =13,50-58= (char -> (b14 -> b14));
                y13 =13,50-58= (char -> (b14 -> b14)); f14 =13,60-67= d14;
                e14 =13,60-67= g14; h17 =13,60-15,46= e17;
                h17 =13,60-15,46= h14; g17 =13,60-15,46= f17;
                g17 =13,60-15,46= e14; c14 =13,60-15,46= (g17 -> h17);
                c17 =13,61-62= d14; n16 =13,61-62= d14; s14 =13,61-62= d14;
                g14 =13,63-66= int; f14 =13,63-66= int; d15 =14,8-15,46= h14;
                b15 =14,8-15,46= h14; i14 =14,8-15,46= bool;
                r14 =14,11-12= s14; r14 =14,13-12= m14;
                o14 =14,13-12= (m14 -> n14); l14 =14,13-12= n14;
                p14 =14,13-15= o14; t14 =14,13-31= j14;
                l14 =14,13-31= (j14 -> k14); i14 =14,13-31= k14;
                x14 =14,16-29= w14; y14 =14,30-31= a15; y14 =14,30-31= u14;
                w14 =14,30-31= (u14 -> v14); t14 =14,30-31= v14;
                b15 =14,37-38= c15; p15 =15,1-13= q15; r15 =15,1-15= n15;
                p15 =15,1-15= (n15 -> o15); m15 =15,1-15= o15;
                t15 =15,1-37= k15; m15 =15,1-37= (k15 -> l15);
                j15 =15,1-37= l15; q16 =15,1-40= h15;
                j15 =15,1-40= (h15 -> i15); g15 =15,1-40= i15;
                s16 =15,1-45= e15; g15 =15,1-45= (e15 -> f15);
                d15 =15,1-45= f15; r15 =15,14-15= s15; a16 =15,17-18= b16;
                c16 =15,17-34= x15; a16 =15,17-34= (x15 -> y15);
                w15 =15,17-34= y15; o16 =15,17-37= u15;
                w15 =15,17-37= (u15 -> v15); t15 =15,17-37= v15;
                j16 =15,20-30= i16; k16 =15,20-32= g16;
                i16 =15,20-32= (g16 -> h16); f16 =15,20-32= h16;
                m16 =15,20-34= d16; f16 =15,20-34= (d16 -> e16);
                c16 =15,20-34= e16; k16 =15,31-32= l16; m16 =15,33-34= n16;
                o16 =15,36-37= p16; q16 =15,39-40= r16; b17 =15,42-43= c17;
                b17 =15,43-43= w16; y16 =15,43-43= (w16 -> x16);
                v16 =15,43-43= x16; a17 =15,43-44= y16; d17 =15,43-45= t16;
                v16 =15,43-45= (t16 -> u16); s16 =15,43-45= u16;
                int =15,44-45= d17; }
[DBG typing] switching X, var: a17 = (int -> (int -> int))
[DBG typing] TyVar a17, (int -> (int -> int)): adding a17 -> (int -> (int -> int)) to E
[DBG typing] switching X, var: p14 = (q14 -> (q14 -> bool))
[DBG typing] TyVar p14, (q14 -> (q14 -> bool)): adding p14 -> (q14 -> (q14 -> bool)) to E
[DBG typing] switching X, var: j16 = (string -> (int -> char))
[DBG typing] TyVar j16, (string -> (int -> char)): adding j16 -> (string -> (int -> char)) to E
[DBG typing] switching X, var: x14 = (string -> int)
[DBG typing] TyVar x14, (string -> int): adding x14 -> (string -> int) to E
[DBG typing] TyVar q15, j13: adding q15 -> j13 to E
[DBG typing] TyVar j13, k13: adding j13 -> k13 to E
[DBG typing] TyVar n13, l13: adding n13 -> l13 to E
[DBG typing] TyVar m13, o13: adding m13 -> o13 to E
[DBG typing] TyVar t17, q17: adding t17 -> q17 to E
[DBG typing] TyVar t17, q17: --> q17 = p13 (lookup)
[DBG typing] TyVar s17, r17: adding s17 -> r17 to E
[DBG typing] TyVar s17, r17: --> r17 = m13 (lookup)
[DBG typing] TyVar r17, m13: adding r17 -> m13 to E
[DBG typing] TyVar q17, p13: adding q17 -> p13 to E
[DBG typing] TyVar k13, (s17 -> t17): adding k13 -> (s17 -> t17) to E
[DBG typing] TyVar l16, l13: adding l16 -> l13 to E
[DBG typing] TyVar s15, l13: adding s15 -> l13 to E
[DBG typing] TyVar a15, l13: adding a15 -> l13 to E
[DBG typing] TyVar o13, string: adding o13 -> string to E
[DBG typing] TyVar n13, l13: --> l13 = string (lookup)
[DBG typing] TyVar l13, string: adding l13 -> string to E
[DBG typing] TyVar s13, q13: adding s13 -> q13 to E
[DBG typing] TyVar r13, t13: adding r13 -> t13 to E
[DBG typing] TyVar p17, m17: adding p17 -> m17 to E
[DBG typing] TyVar p17, m17: --> m17 = v13 (lookup)
[DBG typing] TyVar o17, n17: adding o17 -> n17 to E
[DBG typing] TyVar o17, n17: --> n17 = r13 (lookup)
[DBG typing] TyVar n17, r13: adding n17 -> r13 to E
[DBG typing] TyVar m17, v13: adding m17 -> v13 to E
[DBG typing] TyVar p13, (o17 -> p17): adding p13 -> (o17 -> p17) to E
[DBG typing] TyVar p16, q13: adding p16 -> q13 to E
[DBG typing] TyVar c15, q13: adding c15 -> q13 to E
[DBG typing] TyVar t13, u13: adding t13 -> u13 to E
[DBG typing] TyVar s13, q13: --> q13 = u13 (lookup)
[DBG typing] TyVar q13, u13: adding q13 -> u13 to E
[DBG typing] TyVar y13, w13: adding y13 -> w13 to E
[DBG typing] TyVar x13, a14: adding x13 -> a14 to E
[DBG typing] TyVar l17, i17: adding l17 -> i17 to E
[DBG typing] TyVar l17, i17: --> i17 = c14 (lookup)
[DBG typing] TyVar k17, j17: adding k17 -> j17 to E
[DBG typing] TyVar k17, j17: --> j17 = x13 (lookup)
[DBG typing] TyVar j17, x13: adding j17 -> x13 to E
[DBG typing] TyVar i17, c14: adding i17 -> c14 to E
[DBG typing] TyVar v13, (k17 -> l17): adding v13 -> (k17 -> l17) to E
[DBG typing] TyVar r16, w13: adding r16 -> w13 to E
[DBG typing] TyVar b16, w13: adding b16 -> w13 to E
[DBG typing] TyVar a14, (char -> (b14 -> b14)): adding a14 -> (char -> (b14 -> b14)) to E
[DBG typing] TyVar y13, w13: --> w13 = (char -> (b14 -> b14)) (lookup)
[DBG typing] TyVar w13, (char -> (b14 -> b14)): adding w13 -> (char -> (b14 -> b14)) to E
[DBG typing] TyVar f14, d14: adding f14 -> d14 to E
[DBG typing] TyVar e14, g14: adding e14 -> g14 to E
[DBG typing] TyVar h17, e17: adding h17 -> e17 to E
[DBG typing] TyVar h17, e17: --> e17 = h14 (lookup)
[DBG typing] TyVar g17, f17: adding g17 -> f17 to E
[DBG typing] TyVar g17, f17: --> f17 = e14 (lookup)
[DBG typing] TyVar f17, e14: adding f17 -> e14 to E
[DBG typing] TyVar e17, h14: adding e17 -> h14 to E
[DBG typing] TyVar c14, (g17 -> h17): adding c14 -> (g17 -> h17) to E
[DBG typing] TyVar c17, d14: adding c17 -> d14 to E
[DBG typing] TyVar n16, d14: adding n16 -> d14 to E
[DBG typing] TyVar s14, d14: adding s14 -> d14 to E
[DBG typing] TyVar g14, int: adding g14 -> int to E
[DBG typing] TyVar f14, d14: --> d14 = int (lookup)
[DBG typing] TyVar d14, int: adding d14 -> int to E
[DBG typing] TyVar d15, h14: adding d15 -> h14 to E
[DBG typing] TyVar b15, h14: adding b15 -> h14 to E
[DBG typing] TyVar i14, bool: adding i14 -> bool to E
[DBG typing] TyVar r14, s14: adding r14 -> s14 to E
[DBG typing] TyVar r14, s14: --> s14 = m14 (lookup)
[DBG typing] TyVar s14, d14: --> d14 = m14 (lookup)
[DBG typing] TyVar d14, int: --> int = m14 (lookup)
[DBG typing] switching X, var: m14 = int
[DBG typing] TyVar m14, int: adding m14 -> int to E
[DBG typing] TyVar o14, (m14 -> n14): adding o14 -> (m14 -> n14) to E
[DBG typing] TyVar l14, n14: adding l14 -> n14 to E
[DBG typing] TyVar p14, (q14 -> (q14 -> bool)): --> (q14 -> (q14 -> bool)) = o14 (lookup)
[DBG typing] switching X, var: o14 = (q14 -> (q14 -> bool))
[DBG typing] TyVar o14, (m14 -> n14): --> (m14 -> n14) = (q14 -> (q14 -> bool)) (lookup)
[DBG typing] Unifying arrows (m14 -> n14), (q14 -> (q14 -> bool)) --> m14 = q14, n14 = (q14 -> bool)
[DBG typing] TyVar n14, (q14 -> bool): adding n14 -> (q14 -> bool) to E
[DBG typing] TyVar m14, int: --> int = q14 (lookup)
[DBG typing] switching X, var: q14 = int
[DBG typing] TyVar q14, int: adding q14 -> int to E
[DBG typing] TyVar t14, j14: adding t14 -> j14 to E
[DBG typing] TyVar l14, n14: --> n14 = (j14 -> k14) (lookup)
[DBG typing] TyVar n14, (q14 -> bool): --> (q14 -> bool) = (j14 -> k14) (lookup)
[DBG typing] Unifying arrows (q14 -> bool), (j14 -> k14) --> q14 = j14, bool = k14
[DBG typing] switching X, var: k14 = bool
[DBG typing] TyVar q14, int: --> int = j14 (lookup)
[DBG typing] switching X, var: j14 = int
[DBG typing] TyVar j14, int: adding j14 -> int to E
[DBG typing] TyVar k14, bool: adding k14 -> bool to E
[DBG typing] TyVar i14, bool: --> bool = k14 (lookup)
[DBG typing] switching X, var: k14 = bool
[DBG typing] TyVar k14, bool: --> bool = bool (lookup)
[DBG typing] Ctors bool, bool --> {}
[DBG typing] TyVar x14, (string -> int): --> (string -> int) = w14 (lookup)
[DBG typing] switching X, var: w14 = (string -> int)
[DBG typing] TyVar w14, (string -> int): adding w14 -> (string -> int) to E
[DBG typing] TyVar y14, a15: adding y14 -> a15 to E
[DBG typing] TyVar y14, a15: --> a15 = u14 (lookup)
[DBG typing] TyVar a15, l13: --> l13 = u14 (lookup)
[DBG typing] TyVar l13, string: --> string = u14 (lookup)
[DBG typing] switching X, var: u14 = string
[DBG typing] TyVar u14, string: adding u14 -> string to E
[DBG typing] TyVar w14, (string -> int): --> (string -> int) = (u14 -> v14) (lookup)
[DBG typing] Unifying arrows (string -> int), (u14 -> v14) --> string = u14, int = v14
[DBG typing] switching X, var: v14 = int
[DBG typing] switching X, var: u14 = string
[DBG typing] TyVar v14, int: adding v14 -> int to E
[DBG typing] TyVar u14, string: --> string = string (lookup)
[DBG typing] Ctors string, string --> {}
[DBG typing] TyVar t14, j14: --> j14 = v14 (lookup)
[DBG typing] TyVar j14, int: --> int = v14 (lookup)
[DBG typing] switching X, var: v14 = int
[DBG typing] TyVar v14, int: --> int = int (lookup)
[DBG typing] Ctors int, int --> {}
[DBG typing] TyVar b15, h14: --> h14 = c15 (lookup)
[DBG typing] TyVar h14, c15: adding h14 -> c15 to E
[DBG typing] TyVar p15, q15: adding p15 -> q15 to E
[DBG typing] TyVar r15, n15: adding r15 -> n15 to E
[DBG typing] TyVar p15, q15: --> q15 = (n15 -> o15) (lookup)
[DBG typing] TyVar q15, j13: --> j13 = (n15 -> o15) (lookup)
[DBG typing] TyVar j13, k13: --> k13 = (n15 -> o15) (lookup)
[DBG typing] TyVar k13, (s17 -> t17): --> (s17 -> t17) = (n15 -> o15) (lookup)
[DBG typing] Unifying arrows (s17 -> t17), (n15 -> o15) --> s17 = n15, t17 = o15
[DBG typing] TyVar t17, q17: --> q17 = o15 (lookup)
[DBG typing] TyVar s17, r17: --> r17 = n15 (lookup)
[DBG typing] TyVar r17, m13: --> m13 = n15 (lookup)
[DBG typing] TyVar q17, p13: --> p13 = o15 (lookup)
[DBG typing] TyVar p13, (o17 -> p17): --> (o17 -> p17) = o15 (lookup)
[DBG typing] switching X, var: o15 = (o17 -> p17)
[DBG typing] TyVar o15, (o17 -> p17): adding o15 -> (o17 -> p17) to E
[DBG typing] TyVar m13, o13: --> o13 = n15 (lookup)
[DBG typing] TyVar o13, string: --> string = n15 (lookup)
[DBG typing] switching X, var: n15 = string
[DBG typing] TyVar n15, string: adding n15 -> string to E
[DBG typing] TyVar m15, o15: adding m15 -> o15 to E
[DBG typing] TyVar t15, k15: adding t15 -> k15 to E
[DBG typing] TyVar m15, o15: --> o15 = (k15 -> l15) (lookup)
[DBG typing] TyVar o15, (o17 -> p17): --> (o17 -> p17) = (k15 -> l15) (lookup)
[DBG typing] Unifying arrows (o17 -> p17), (k15 -> l15) --> o17 = k15, p17 = l15
[DBG typing] TyVar p17, m17: --> m17 = l15 (lookup)
[DBG typing] TyVar o17, n17: --> n17 = k15 (lookup)
[DBG typing] TyVar n17, r13: --> r13 = k15 (lookup)
[DBG typing] TyVar m17, v13: --> v13 = l15 (lookup)
[DBG typing] TyVar v13, (k17 -> l17): --> (k17 -> l17) = l15 (lookup)
[DBG typing] switching X, var: l15 = (k17 -> l17)
[DBG typing] TyVar l15, (k17 -> l17): adding l15 -> (k17 -> l17) to E
[DBG typing] TyVar r13, t13: --> t13 = k15 (lookup)
[DBG typing] TyVar t13, u13: --> u13 = k15 (lookup)
[DBG typing] TyVar u13, k15: adding u13 -> k15 to E
[DBG typing] TyVar j15, l15: adding j15 -> l15 to E
[DBG typing] TyVar q16, h15: adding q16 -> h15 to E
[DBG typing] TyVar j15, l15: --> l15 = (h15 -> i15) (lookup)
[DBG typing] TyVar l15, (k17 -> l17): --> (k17 -> l17) = (h15 -> i15) (lookup)
[DBG typing] Unifying arrows (k17 -> l17), (h15 -> i15) --> k17 = h15, l17 = i15
[DBG typing] TyVar l17, i17: --> i17 = i15 (lookup)
[DBG typing] TyVar k17, j17: --> j17 = h15 (lookup)
[DBG typing] TyVar j17, x13: --> x13 = h15 (lookup)
[DBG typing] TyVar i17, c14: --> c14 = i15 (lookup)
[DBG typing] TyVar c14, (g17 -> h17): --> (g17 -> h17) = i15 (lookup)
[DBG typing] switching X, var: i15 = (g17 -> h17)
[DBG typing] TyVar i15, (g17 -> h17): adding i15 -> (g17 -> h17) to E
[DBG typing] TyVar x13, a14: --> a14 = h15 (lookup)
[DBG typing] TyVar a14, (char -> (b14 -> b14)): --> (char -> (b14 -> b14)) = h15 (lookup)
[DBG typing] switching X, var: h15 = (char -> (b14 -> b14))
[DBG typing] TyVar h15, (char -> (b14 -> b14)): adding h15 -> (char -> (b14 -> b14)) to E
[DBG typing] TyVar g15, i15: adding g15 -> i15 to E
[DBG typing] TyVar s16, e15: adding s16 -> e15 to E
[DBG typing] TyVar g15, i15: --> i15 = (e15 -> f15) (lookup)
[DBG typing] TyVar i15, (g17 -> h17): --> (g17 -> h17) = (e15 -> f15) (lookup)
[DBG typing] Unifying arrows (g17 -> h17), (e15 -> f15) --> g17 = e15, h17 = f15
[DBG typing] TyVar h17, e17: --> e17 = f15 (lookup)
[DBG typing] TyVar g17, f17: --> f17 = e15 (lookup)
[DBG typing] TyVar f17, e14: --> e14 = e15 (lookup)
[DBG typing] TyVar e17, h14: --> h14 = f15 (lookup)
[DBG typing] TyVar h14, c15: --> c15 = f15 (lookup)
[DBG typing] TyVar c15, q13: --> q13 = f15 (lookup)
[DBG typing] TyVar q13, u13: --> u13 = f15 (lookup)
[DBG typing] TyVar u13, k15: --> k15 = f15 (lookup)
[DBG typing] TyVar k15, f15: adding k15 -> f15 to E
[DBG typing] TyVar e14, g14: --> g14 = e15 (lookup)
[DBG typing] TyVar g14, int: --> int = e15 (lookup)
[DBG typing] switching X, var: e15 = int
[DBG typing] TyVar e15, int: adding e15 -> int to E
[DBG typing] TyVar d15, h14: --> h14 = f15 (lookup)
[DBG typing] TyVar h14, c15: --> c15 = f15 (lookup)
[DBG typing] TyVar c15, q13: --> q13 = f15 (lookup)
[DBG typing] TyVar q13, u13: --> u13 = f15 (lookup)
[DBG typing] TyVar u13, k15: --> k15 = f15 (lookup)
[DBG typing] TyVar k15, f15: --> f15 = f15 (lookup)
[DBG typing] Ignore identity: f15 = f15
[DBG typing] TyVar r15, n15: --> n15 = s15 (lookup)
[DBG typing] TyVar n15, string: --> string = s15 (lookup)
[DBG typing] switching X, var: s15 = string
[DBG typing] TyVar s15, l13: --> l13 = string (lookup)
[DBG typing] TyVar l13, string: --> string = string (lookup)
[DBG typing] Ignore identity: string = string
[DBG typing] TyVar a16, b16: adding a16 -> b16 to E
[DBG typing] TyVar c16, x15: adding c16 -> x15 to E
[DBG typing] TyVar a16, b16: --> b16 = (x15 -> y15) (lookup)
[DBG typing] TyVar b16, w13: --> w13 = (x15 -> y15) (lookup)
[DBG typing] TyVar w13, (char -> (b14 -> b14)): --> (char -> (b14 -> b14)) = (x15 -> y15) (lookup)
[DBG typing] Unifying arrows (char -> (b14 -> b14)), (x15 -> y15) --> char = x15, (b14 -> b14) = y15
[DBG typing] switching X, var: y15 = (b14 -> b14)
[DBG typing] switching X, var: x15 = char
[DBG typing] TyVar y15, (b14 -> b14): adding y15 -> (b14 -> b14) to E
[DBG typing] TyVar x15, char: adding x15 -> char to E
[DBG typing] TyVar w15, y15: adding w15 -> y15 to E
[DBG typing] TyVar o16, u15: adding o16 -> u15 to E
[DBG typing] TyVar w15, y15: --> y15 = (u15 -> v15) (lookup)
[DBG typing] TyVar y15, (b14 -> b14): --> (b14 -> b14) = (u15 -> v15) (lookup)
[DBG typing] Unifying arrows (b14 -> b14), (u15 -> v15) --> b14 = u15, b14 = v15
[DBG typing] TyVar b14, v15: adding b14 -> v15 to E
[DBG typing] TyVar b14, v15: --> v15 = u15 (lookup)
[DBG typing] TyVar v15, u15: adding v15 -> u15 to E
[DBG typing] TyVar t15, k15: --> k15 = v15 (lookup)
[DBG typing] TyVar k15, f15: --> f15 = v15 (lookup)
[DBG typing] TyVar f15, v15: adding f15 -> v15 to E
[DBG typing] TyVar j16, (string -> (int -> char)): --> (string -> (int -> char)) = i16 (lookup)
[DBG typing] switching X, var: i16 = (string -> (int -> char))
[DBG typing] TyVar i16, (string -> (int -> char)): adding i16 -> (string -> (int -> char)) to E
[DBG typing] TyVar k16, g16: adding k16 -> g16 to E
[DBG typing] TyVar i16, (string -> (int -> char)): --> (string -> (int -> char)) = (g16 -> h16) (lookup)
[DBG typing] Unifying arrows (string -> (int -> char)), (g16 -> h16) --> string = g16, (int -> char) = h16
[DBG typing] switching X, var: h16 = (int -> char)
[DBG typing] switching X, var: g16 = string
[DBG typing] TyVar h16, (int -> char): adding h16 -> (int -> char) to E
[DBG typing] TyVar g16, string: adding g16 -> string to E
[DBG typing] TyVar f16, h16: adding f16 -> h16 to E
[DBG typing] TyVar m16, d16: adding m16 -> d16 to E
[DBG typing] TyVar f16, h16: --> h16 = (d16 -> e16) (lookup)
[DBG typing] TyVar h16, (int -> char): --> (int -> char) = (d16 -> e16) (lookup)
[DBG typing] Unifying arrows (int -> char), (d16 -> e16) --> int = d16, char = e16
[DBG typing] switching X, var: d16 = int
[DBG typing] switching X, var: e16 = char
[DBG typing] TyVar e16, char: adding e16 -> char to E
[DBG typing] TyVar d16, int: adding d16 -> int to E
[DBG typing] TyVar c16, x15: --> x15 = e16 (lookup)
[DBG typing] TyVar x15, char: --> char = e16 (lookup)
[DBG typing] switching X, var: e16 = char
[DBG typing] TyVar e16, char: --> char = char (lookup)
[DBG typing] Ctors char, char --> {}
[DBG typing] TyVar k16, g16: --> g16 = l16 (lookup)
[DBG typing] TyVar g16, string: --> string = l16 (lookup)
[DBG typing] switching X, var: l16 = string
[DBG typing] TyVar l16, l13: --> l13 = string (lookup)
[DBG typing] TyVar l13, string: --> string = string (lookup)
[DBG typing] Ctors string, string --> {}
[DBG typing] TyVar m16, d16: --> d16 = n16 (lookup)
[DBG typing] TyVar d16, int: --> int = n16 (lookup)
[DBG typing] switching X, var: n16 = int
[DBG typing] TyVar n16, d14: --> d14 = int (lookup)
[DBG typing] TyVar d14, int: --> int = int (lookup)
[DBG typing] Ctors int, int --> {}
[DBG typing] TyVar o16, u15: --> u15 = p16 (lookup)
[DBG typing] TyVar u15, p16: all zero, ignore
[DBG typing] TyVar q16, h15: --> h15 = r16 (lookup)
[DBG typing] TyVar h15, (char -> (b14 -> b14)): --> (char -> (b14 -> b14)) = r16 (lookup)
[DBG typing] switching X, var: r16 = (char -> (b14 -> b14))
[DBG typing] TyVar r16, w13: --> w13 = (char -> (b14 -> b14)) (lookup)
[DBG typing] TyVar w13, (char -> (b14 -> b14)): --> (char -> (b14 -> b14)) = (char -> (b14 -> b14)) (lookup)
[DBG typing] Ignore identity: (char -> (b14 -> b14)) = (char -> (b14 -> b14))
[DBG typing] TyVar b17, c17: adding b17 -> c17 to E
[DBG typing] TyVar b17, c17: --> c17 = w16 (lookup)
[DBG typing] TyVar c17, d14: --> d14 = w16 (lookup)
[DBG typing] TyVar d14, int: --> int = w16 (lookup)
[DBG typing] switching X, var: w16 = int
[DBG typing] TyVar w16, int: adding w16 -> int to E
[DBG typing] TyVar y16, (w16 -> x16): adding y16 -> (w16 -> x16) to E
[DBG typing] TyVar v16, x16: adding v16 -> x16 to E
[DBG typing] TyVar a17, (int -> (int -> int)): --> (int -> (int -> int)) = y16 (lookup)
[DBG typing] switching X, var: y16 = (int -> (int -> int))
[DBG typing] TyVar y16, (w16 -> x16): --> (w16 -> x16) = (int -> (int -> int)) (lookup)
[DBG typing] Unifying arrows (w16 -> x16), (int -> (int -> int)) --> w16 = int, x16 = (int -> int)
[DBG typing] TyVar x16, (int -> int): adding x16 -> (int -> int) to E
[DBG typing] TyVar w16, int: --> int = int (lookup)
[DBG typing] Ctors int, int --> {}
[DBG typing] TyVar d17, t16: adding d17 -> t16 to E
[DBG typing] TyVar v16, x16: --> x16 = (t16 -> u16) (lookup)
[DBG typing] TyVar x16, (int -> int): --> (int -> int) = (t16 -> u16) (lookup)
[DBG typing] Unifying arrows (int -> int), (t16 -> u16) --> int = t16, int = u16
[DBG typing] switching X, var: u16 = int
[DBG typing] switching X, var: t16 = int
[DBG typing] TyVar u16, int: adding u16 -> int to E
[DBG typing] TyVar t16, int: adding t16 -> int to E
[DBG typing] TyVar s16, e15: --> e15 = u16 (lookup)
[DBG typing] TyVar e15, int: --> int = u16 (lookup)
[DBG typing] switching X, var: u16 = int
[DBG typing] TyVar u16, int: --> int = int (lookup)
[DBG typing] Ctors int, int --> {}
[DBG typing] switching X, var: d17 = int
[DBG typing] TyVar d17, t16: --> t16 = int (lookup)
[DBG typing] TyVar t16, int: --> int = int (lookup)
[DBG typing] Ctors int, int --> {}
[INF typing] Constraints unified successfully.
[DBG typing] Resulting tyvarsubst:
               t17: (u15 -> ((char -> (u15 -> u15)) -> (int -> u15))); s17: string; r17: string; q17: (u15 -> ((char -> (u15 -> u15)) -> (int -> u15))); p17: ((char -> (u15 -> u15)) -> (int -> u15)); o17: u15; n17: u15; m17: ((char -> (u15 -> u15)) -> (int -> u15)); l17: (int -> u15); k17: (char -> (u15 -> u15)); j17: (char -> (u15 -> u15)); i17: (int -> u15); h17: u15; g17: int; f17: int; e17: u15; d17: int; c17: int; b17: int; a17: (int -> (int -> int)); y16: (int -> (int -> int)); x16: (int -> int); w16: int; v16: (int -> int); u16: int; t16: int; s16: int; r16: (char -> (u15 -> u15)); q16: (char -> (u15 -> u15)); p16: u15; o16: u15; n16: int; m16: int; l16: string; k16: string; j16: (string -> (int -> char)); i16: (string -> (int -> char)); h16: (int -> char); g16: string; f16: (int -> char); e16: char; d16: int; c16: char; b16: (char -> (u15 -> u15)); a16: (char -> (u15 -> u15)); y15: (u15 -> u15); x15: char; w15: (u15 -> u15); v15: u15; t15: u15; s15: string; r15: string; q15: (string -> (u15 -> ((char -> (u15 -> u15)) -> (int -> u15)))); p15: (string -> (u15 -> ((char -> (u15 -> u15)) -> (int -> u15)))); o15: (u15 -> ((char -> (u15 -> u15)) -> (int -> u15))); n15: string; m15: (u15 -> ((char -> (u15 -> u15)) -> (int -> u15))); l15: ((char -> (u15 -> u15)) -> (int -> u15)); k15: u15; j15: ((char -> (u15 -> u15)) -> (int -> u15)); i15: (int -> u15); h15: (char -> (u15 -> u15)); g15: (int -> u15); f15: u15; e15: int; d15: u15; c15: u15; b15: u15; a15: string; y14: string; x14: (string -> int); w14: (string -> int); v14: int; u14: string; t14: int; s14: int; r14: int; q14: int; p14: (int -> (int -> bool)); o14: (int -> (int -> bool)); n14: (int -> bool); m14: int; l14: (int -> bool); k14: bool; j14: int; i14: bool; h14: u15; g14: int; f14: int; e14: int; d14: int; c14: (int -> u15); b14: u15; a14: (char -> (u15 -> u15)); y13: (char -> (u15 -> u15)); x13: (char -> (u15 -> u15)); w13: (char -> (u15 -> u15)); v13: ((char -> (u15 -> u15)) -> (int -> u15)); u13: u15; t13: u15; s13: u15; r13: u15; q13: u15; p13: (u15 -> ((char -> (u15 -> u15)) -> (int -> u15))); o13: string; n13: string; m13: string; l13: string; k13: (string -> (u15 -> ((char -> (u15 -> u15)) -> (int -> u15)))); j13: (string -> (u15 -> ((char -> (u15 -> u15)) -> (int -> u15)))); 
[DBG coretys] Check string <= string
[DBG coretys] Check u15 <= u17
[DBG coretys] Check (char -> (u15 -> u15)) <= (char -> (w17 -> w17))
[DBG coretys] Check int <= int
[INF typing] checked annotations
[INF typing] Constraints solved
[INF typing] Succeeded typing structure
  val string_foldi: (string -> (u15 -> ((char -> (u15 -> u15)) -> (int -> u15))))
  with substitution
  t17: (u15 -> ((char -> (u15 -> u15)) -> (int -> u15))); s17: string; r17: string; q17: (u15 -> ((char -> (u15 -> u15)) -> (int -> u15))); p17: ((char -> (u15 -> u15)) -> (int -> u15)); o17: u15; n17: u15; m17: ((char -> (u15 -> u15)) -> (int -> u15)); l17: (int -> u15); k17: (char -> (u15 -> u15)); j17: (char -> (u15 -> u15)); i17: (int -> u15); h17: u15; g17: int; f17: int; e17: u15; d17: int; c17: int; b17: int; a17: (int -> (int -> int)); y16: (int -> (int -> int)); x16: (int -> int); w16: int; v16: (int -> int); u16: int; t16: int; s16: int; r16: (char -> (u15 -> u15)); q16: (char -> (u15 -> u15)); p16: u15; o16: u15; n16: int; m16: int; l16: string; k16: string; j16: (string -> (int -> char)); i16: (string -> (int -> char)); h16: (int -> char); g16: string; f16: (int -> char); e16: char; d16: int; c16: char; b16: (char -> (u15 -> u15)); a16: (char -> (u15 -> u15)); y15: (u15 -> u15); x15: char; w15: (u15 -> u15); v15: u15; t15: u15; s15: string; r15: string; q15: (string -> (u15 -> ((char -> (u15 -> u15)) -> (int -> u15)))); p15: (string -> (u15 -> ((char -> (u15 -> u15)) -> (int -> u15)))); o15: (u15 -> ((char -> (u15 -> u15)) -> (int -> u15))); n15: string; m15: (u15 -> ((char -> (u15 -> u15)) -> (int -> u15))); l15: ((char -> (u15 -> u15)) -> (int -> u15)); k15: u15; j15: ((char -> (u15 -> u15)) -> (int -> u15)); i15: (int -> u15); h15: (char -> (u15 -> u15)); g15: (int -> u15); f15: u15; e15: int; d15: u15; c15: u15; b15: u15; a15: string; y14: string; x14: (string -> int); w14: (string -> int); v14: int; u14: string; t14: int; s14: int; r14: int; q14: int; p14: (int -> (int -> bool)); o14: (int -> (int -> bool)); n14: (int -> bool); m14: int; l14: (int -> bool); k14: bool; j14: int; i14: bool; h14: u15; g14: int; f14: int; e14: int; d14: int; c14: (int -> u15); b14: u15; a14: (char -> (u15 -> u15)); y13: (char -> (u15 -> u15)); x13: (char -> (u15 -> u15)); w13: (char -> (u15 -> u15)); v13: ((char -> (u15 -> u15)) -> (int -> u15)); u13: u15; t13: u15; s13: u15; r13: u15; q13: u15; p13: (u15 -> ((char -> (u15 -> u15)) -> (int -> u15))); o13: string; n13: string; m13: string; l13: string; k13: (string -> (u15 -> ((char -> (u15 -> u15)) -> (int -> u15)))); j13: (string -> (u15 -> ((char -> (u15 -> u15)) -> (int -> u15)))); 
  and env enriched by
  Values: string_foldi: (string -> (u15 -> ((char -> (u15 -> u15)) -> (int -> u15))));
   Types: 
[DBG ast_comp] Succeeded for:  Pstr_rec_value (13,4-15,46): string_foldi
[INF ast_comp] Success comparing ecaml/ocaml typing
[DBG typing] Conf.load_path: [, /home/zhdf/easyocaml-0.49/ocaml-3.10.2/lib/ocaml]
[DBG enr_ast] Ocaml ast: [
  structure_item (/home/zhdf/demo/ml/sudoku1.ml[17,535+4]../home/zhdf/demo/ml/sudoku1.ml[17,535+48])
    Pstr_value Nonrec
    [
      <def>
        pattern (/home/zhdf/demo/ml/sudoku1.ml[17,535+8]../home/zhdf/demo/ml/sudoku1.ml[17,535+19])
          Ppat_var "string_fold"
        expression (/home/zhdf/demo/ml/sudoku1.ml[17,535+20]../home/zhdf/demo/ml/sudoku1.ml[17,535+48])
          Pexp_function ""
          None
          [
            <case>
              pattern (/home/zhdf/demo/ml/sudoku1.ml[17,535+20]../home/zhdf/demo/ml/sudoku1.ml[17,535+21])
                Ppat_var "s"
              expression (/home/zhdf/demo/ml/sudoku1.ml[17,535+22]../home/zhdf/demo/ml/sudoku1.ml[17,535+48])
                Pexp_function ""
                None
                [
                  <case>
                    pattern (/home/zhdf/demo/ml/sudoku1.ml[17,535+22]../home/zhdf/demo/ml/sudoku1.ml[17,535+23])
                      Ppat_var "a"
                    expression (/home/zhdf/demo/ml/sudoku1.ml[17,535+24]../home/zhdf/demo/ml/sudoku1.ml[17,535+48])
                      Pexp_function ""
                      None
                      [
                        <case>
                          pattern (/home/zhdf/demo/ml/sudoku1.ml[17,535+24]../home/zhdf/demo/ml/sudoku1.ml[17,535+25])
                            Ppat_var "f"
                          expression (/home/zhdf/demo/ml/sudoku1.ml[17,535+47]../home/zhdf/demo/ml/sudoku1.ml[17,535+48])
                            Pexp_apply
                            expression (/home/zhdf/demo/ml/sudoku1.ml[17,535+28]../home/zhdf/demo/ml/sudoku1.ml[17,535+40])
                              Pexp_ident "string_foldi"
                            [
                              <label> ""
                                expression (/home/zhdf/demo/ml/sudoku1.ml[17,535+41]../home/zhdf/demo/ml/sudoku1.ml[17,535+42])
                                  Pexp_ident "s"
                              <label> ""
                                expression (/home/zhdf/demo/ml/sudoku1.ml[17,535+43]../home/zhdf/demo/ml/sudoku1.ml[17,535+44])
                                  Pexp_ident "a"
                              <label> ""
                                expression (/home/zhdf/demo/ml/sudoku1.ml[17,535+45]../home/zhdf/demo/ml/sudoku1.ml[17,535+46])
                                  Pexp_ident "f"
                              <label> ""
                                expression (/home/zhdf/demo/ml/sudoku1.ml[17,535+47]../home/zhdf/demo/ml/sudoku1.ml[17,535+48])
                                  Pexp_constant Const_int 0
                            ]
                      ]
                ]
          ]
    ]
]

[INF enr_ast] A different parser than Ocaml's default should be used to avoid inaccuracy for the location of multiple application (17,47-48).
[DBG env] Adding field contents
[DBG typing] Type structure in env:
               Values: !: (Pervasives.ref y17 -> y17);
               &&: (bool -> (bool -> bool)); &: (bool -> (bool -> bool));
               !=: (a18 -> (a18 -> bool)); **: (float -> (float -> float));
               +: (int -> (int -> int)); *.: (float -> (float -> float));
               -: (int -> (int -> int)); /: (int -> (int -> int));
               -.: (float -> (float -> float));
               +.: (float -> (float -> float)); *: (int -> (int -> int));
               <: (e18 -> (e18 -> bool));
               :=: (Pervasives.ref b18 -> (b18 -> unit));
               =: (t18 -> (t18 -> bool)); <>: (c18 -> (c18 -> bool));
               >=: (q18 -> (q18 -> bool)); >: (g18 -> (g18 -> bool));
               ==: (f18 -> (f18 -> bool)); <=: (d18 -> (d18 -> bool));
               /.: (float -> (float -> float));
               ^: (string -> (string -> string)); abs: (int -> int);
               ^^: (format6 i18 j18 k18 l18 m18 n18 -> (format6 n18 j18 k18 m18 o18 p18 -> format6 i18 j18 k18 l18 o18 p18));
               acos: (float -> float); asr: (int -> (int -> int));
               at_exit: ((unit -> unit) -> unit); asin: (float -> float);
               abs_float: (float -> float);
               atan2: (float -> (float -> float));
               bool_of_string: (string -> bool);
               classify_float: (float -> Pervasives.fpclass);
               char_of_int: (int -> char);
               close_in_noerr: (Pervasives.in_channel -> unit);
               close_in: (Pervasives.in_channel -> unit);
               ceil: (float -> float); atan: (float -> float);
               @: (list h18 -> (list h18 -> list h18));
               close_out_noerr: (Pervasives.out_channel -> unit);
               cos: (float -> float); cosh: (float -> float);
               compare: (r18 -> (r18 -> int)); epsilon_float: float;
               do_at_exit: (unit -> unit);
               decr: (Pervasives.ref int -> unit); failwith: (string -> h19);
               exp: (float -> float); float_of_int: (int -> float);
               float: (int -> float); floor: (float -> float);
               flush: (Pervasives.out_channel -> unit);
               frexp: (float -> (float , int));
               format_of_string: (format6 u18 v18 w18 x18 y18 a19 -> format6 u18 v18 w18 x18 y18 a19);
               flush_all: (unit -> unit); float_of_string: (string -> float);
               exit: (int -> s18); ignore: (d19 -> unit); infinity: float;
               incr: (Pervasives.ref int -> unit);
               in_channel_length: (Pervasives.in_channel -> int);
               input_byte: (Pervasives.in_channel -> int);
               input_binary_int: (Pervasives.in_channel -> int);
               input: (Pervasives.in_channel -> (string -> (int -> (int -> int))));
               input_line: (Pervasives.in_channel -> string);
               int_fold: ((int , int) -> (f19 -> ((int -> (f19 -> f19)) -> f19)));
               input_value: (Pervasives.in_channel -> e19);
               int_of_float: (float -> int); int_of_string: (string -> int);
               int_of_char: (char -> int); land: (int -> (int -> int));
               log: (float -> float); lnot: (int -> int);
               ldexp: (float -> (int -> float)); lor: (int -> (int -> int));
               lsl: (int -> (int -> int)); log10: (float -> float);
               invalid_arg: (string -> g19);
               input_char: (Pervasives.in_channel -> char);
               fst: ((b19 , c19) -> b19);
               close_out: (Pervasives.out_channel -> unit);
               lxor: (int -> (int -> int)); max_float: float;
               max: (j19 -> (j19 -> j19)); min: (i19 -> (i19 -> i19));
               mod: (int -> (int -> int)); min_int: int; min_float: float;
               max_int: int; modf: (float -> (float , float));
               neg_infinity: float; nan: float;
               open_in: (string -> Pervasives.in_channel);
               open_in_bin: (string -> Pervasives.in_channel);
               not: (bool -> bool);
               open_out: (string -> Pervasives.out_channel);
               or: (bool -> (bool -> bool));
               open_out_gen: (list Pervasives.open_flag -> (int -> (string -> Pervasives.out_channel)));
               open_out_bin: (string -> Pervasives.out_channel);
               output: (Pervasives.out_channel -> (string -> (int -> (int -> unit))));
               output_byte: (Pervasives.out_channel -> (int -> unit));
               output_binary_int: (Pervasives.out_channel -> (int -> unit));
               out_channel_length: (Pervasives.out_channel -> int);
               open_in_gen: (list Pervasives.open_flag -> (int -> (string -> Pervasives.in_channel)));
               mod_float: (float -> (float -> float));
               output_string: (Pervasives.out_channel -> (string -> unit));
               output_value: (Pervasives.out_channel -> (k19 -> unit));
               pos_out: (Pervasives.out_channel -> int);
               pos_in: (Pervasives.in_channel -> int);
               prerr_char: (char -> unit); prerr_float: (float -> unit);
               prerr_int: (int -> unit); prerr_endline: (string -> unit);
               pred: (int -> int); prerr_string: (string -> unit);
               print_float: (float -> unit); print_endline: (string -> unit);
               print_char: (char -> unit); print_newline: (unit -> unit);
               raise: (exn -> l19); print_string: (string -> unit);
               print_int: (int -> unit); read_int: (unit -> int);
               really_input: (Pervasives.in_channel -> (string -> (int -> (int -> unit))));
               read_line: (unit -> string);
               seek_in: (Pervasives.in_channel -> (int -> unit));
               ref: (m19 -> Pervasives.ref m19); read_float: (unit -> float);
               prerr_newline: (unit -> unit);
               set_binary_mode_out: (Pervasives.out_channel -> (bool -> unit));
               set_binary_mode_in: (Pervasives.in_channel -> (bool -> unit));
               sinh: (float -> float); sqrt: (float -> float);
               snd: ((n19 , o19) -> o19); sin: (float -> float);
               stdin: Pervasives.in_channel;
               string_of_bool: (bool -> string);
               string_foldi: (string -> (p19 -> ((char -> (p19 -> p19)) -> (int -> p19))));
               stdout: Pervasives.out_channel;
               stderr: Pervasives.out_channel;
               string_of_format: (format6 q19 r19 s19 t19 u19 v19 -> string);
               tan: (float -> float); succ: (int -> int);
               string_of_int: (int -> string); truncate: (float -> int);
               unsafe_really_input: (Pervasives.in_channel -> (string -> (int -> (int -> unit))));
               ||: (bool -> (bool -> bool)); ~-.: (float -> float);
               ~-: (int -> int); valid_float_lexem: (string -> string);
               tanh: (float -> float); string_of_float: (float -> string);
               seek_out: (Pervasives.out_channel -> (int -> unit));
               output_char: (Pervasives.out_channel -> (char -> unit));
               lsr: (int -> (int -> int)); 
               Types: type (w19) array = <abstr>;
               type () bool = | false | true ; type () board = array int;
               type () exn = ;
               type (x19, y19, a20) format = Pervasives.format4 x19 y19 a20 a20;
               type () float = <abstr>; type () char = <abstr>;
               type (f20, g20, h20, i20, j20, k20) format6 = <abstr>;
               type () int = <abstr>; type () in_channel = <abstr>;
               type () fpclass = | FP_infinite | FP_nan | FP_normal | FP_subnormal | FP_zero ;
               type () int64 = <abstr>;
               type (m20) list = | :: of m20 * list m20 | [] ;
               type (l20) lazy_t = <abstr>; type () int32 = <abstr>;
               type (b20, c20, d20, e20) format4 = format6 b20 c20 d20 d20 d20 e20;
               type (o20) option = | None | Some of o20 ;
               type () open_flag = | Open_append | Open_binary | Open_creat | Open_excl | Open_nonblock | Open_rdonly | Open_text | Open_trunc | Open_wronly ;
               type () rectangle = (int , int , int , int);
               type () out_channel = <abstr>; type () string = <abstr>;
               type () unit = | () ;
               type (n20) ref = {contents -> Mutablen20; };
               type () nativeint = <abstr>; 
[DBG generate] for pattern at 17,8-19 string_fold
  (bound: {string_fold -> p20; }, ty: p20, cs: {})
[DBG generate] for pattern at 17,20-21 s
  (bound: {s -> r20; }, ty: r20, cs: {})
[DBG generate] for pattern at 17,22-23 a
  (bound: {a -> t20; }, ty: t20, cs: {})
[DBG generate] for pattern at 17,24-25 f
  (bound: {f -> v20; }, ty: v20, cs: {})
[DBG generate] for_expr at 17,28-40 string_foldi: j21 -
  {(string -> (l21 -> ((char -> (l21 -> l21)) -> (int -> l21)))) =string_foldi= k21;
   k21 =17,28-40= j21; }
[DBG generate] for_expr at 17,41-42 s: m21 -
  {n21 =17,20-21= r20; m21 =17,41-42= n21; }
[DBG generate] for_expr at 17,28-42 string_foldi~s: g21 -
  {(string -> (l21 -> ((char -> (l21 -> l21)) -> (int -> l21)))) =string_foldi= k21;
   n21 =17,20-21= r20; k21 =17,28-40= j21; m21 =17,28-42= h21;
   j21 =17,28-42= (h21 -> i21); g21 =17,28-42= i21; m21 =17,41-42= n21; }
[DBG generate] for_expr at 17,43-44 a: o21 -
  {p21 =17,22-23= t20; o21 =17,43-44= p21; }
[DBG generate] for_expr at 17,28-44 string_foldi~s~a: d21 -
  {(string -> (l21 -> ((char -> (l21 -> l21)) -> (int -> l21)))) =string_foldi= k21;
   n21 =17,20-21= r20; p21 =17,22-23= t20; k21 =17,28-40= j21;
   m21 =17,28-42= h21; j21 =17,28-42= (h21 -> i21); g21 =17,28-42= i21;
   o21 =17,28-44= e21; g21 =17,28-44= (e21 -> f21); d21 =17,28-44= f21;
   m21 =17,41-42= n21; o21 =17,43-44= p21; }
[DBG generate] for_expr at 17,45-46 f: q21 -
  {r21 =17,24-25= v20; q21 =17,45-46= r21; }
[DBG generate] for_expr at 17,28-46 string_foldi~s~a~f: a21 -
  {(string -> (l21 -> ((char -> (l21 -> l21)) -> (int -> l21)))) =string_foldi= k21;
   n21 =17,20-21= r20; p21 =17,22-23= t20; r21 =17,24-25= v20;
   k21 =17,28-40= j21; m21 =17,28-42= h21; j21 =17,28-42= (h21 -> i21);
   g21 =17,28-42= i21; o21 =17,28-44= e21; g21 =17,28-44= (e21 -> f21);
   d21 =17,28-44= f21; q21 =17,28-46= b21; d21 =17,28-46= (b21 -> c21);
   a21 =17,28-46= c21; m21 =17,41-42= n21; o21 =17,43-44= p21;
   q21 =17,45-46= r21; }
[DBG generate] for_expr at 17,47-48 0: s21 - {int =17,47-48= s21; }
[DBG generate] for_expr at 17,28-48 string_foldi~s~a~f~0: w20 -
  {(string -> (l21 -> ((char -> (l21 -> l21)) -> (int -> l21)))) =string_foldi= k21;
   n21 =17,20-21= r20; p21 =17,22-23= t20; r21 =17,24-25= v20;
   k21 =17,28-40= j21; m21 =17,28-42= h21; j21 =17,28-42= (h21 -> i21);
   g21 =17,28-42= i21; o21 =17,28-44= e21; g21 =17,28-44= (e21 -> f21);
   d21 =17,28-44= f21; q21 =17,28-46= b21; d21 =17,28-46= (b21 -> c21);
   a21 =17,28-46= c21; s21 =17,28-48= x20; a21 =17,28-48= (x20 -> y20);
   w20 =17,28-48= y20; m21 =17,41-42= n21; o21 =17,43-44= p21;
   q21 =17,45-46= r21; int =17,47-48= s21; }
[DBG generate] for_expr at 17,24-48 function f -> string_foldi~s~a~f~0: u20 -
  {(string -> (l21 -> ((char -> (l21 -> l21)) -> (int -> l21)))) =string_foldi= k21;
   n21 =17,20-21= r20; p21 =17,22-23= t20; r21 =17,24-25= v20;
   w21 =17,24-48= t21; w21 =17,24-48= w20; v21 =17,24-48= u21;
   v21 =17,24-48= v20; u20 =17,24-48= (v21 -> w21); k21 =17,28-40= j21;
   m21 =17,28-42= h21; j21 =17,28-42= (h21 -> i21); g21 =17,28-42= i21;
   o21 =17,28-44= e21; g21 =17,28-44= (e21 -> f21); d21 =17,28-44= f21;
   q21 =17,28-46= b21; d21 =17,28-46= (b21 -> c21); a21 =17,28-46= c21;
   s21 =17,28-48= x20; a21 =17,28-48= (x20 -> y20); w20 =17,28-48= y20;
   m21 =17,41-42= n21; o21 =17,43-44= p21; q21 =17,45-46= r21;
   int =17,47-48= s21; }
[DBG generate] for_expr at 17,22-48
  function a -> function f -> string_foldi~s~a~f~0: s20 -
  {(string -> (l21 -> ((char -> (l21 -> l21)) -> (int -> l21)))) =string_foldi= k21;
   n21 =17,20-21= r20; p21 =17,22-23= t20; b22 =17,22-48= x21;
   b22 =17,22-48= u20; a22 =17,22-48= y21; a22 =17,22-48= t20;
   s20 =17,22-48= (a22 -> b22); r21 =17,24-25= v20; w21 =17,24-48= t21;
   w21 =17,24-48= w20; v21 =17,24-48= u21; v21 =17,24-48= v20;
   u20 =17,24-48= (v21 -> w21); k21 =17,28-40= j21; m21 =17,28-42= h21;
   j21 =17,28-42= (h21 -> i21); g21 =17,28-42= i21; o21 =17,28-44= e21;
   g21 =17,28-44= (e21 -> f21); d21 =17,28-44= f21; q21 =17,28-46= b21;
   d21 =17,28-46= (b21 -> c21); a21 =17,28-46= c21; s21 =17,28-48= x20;
   a21 =17,28-48= (x20 -> y20); w20 =17,28-48= y20; m21 =17,41-42= n21;
   o21 =17,43-44= p21; q21 =17,45-46= r21; int =17,47-48= s21; }
[DBG generate] for_expr at 17,20-48
  function s -> function a -> function f -> string_foldi~s~a~f~0: q20 -
  {(string -> (l21 -> ((char -> (l21 -> l21)) -> (int -> l21)))) =string_foldi= k21;
   n21 =17,20-21= r20; f22 =17,20-48= c22; f22 =17,20-48= s20;
   e22 =17,20-48= d22; e22 =17,20-48= r20; q20 =17,20-48= (e22 -> f22);
   p21 =17,22-23= t20; b22 =17,22-48= x21; b22 =17,22-48= u20;
   a22 =17,22-48= y21; a22 =17,22-48= t20; s20 =17,22-48= (a22 -> b22);
   r21 =17,24-25= v20; w21 =17,24-48= t21; w21 =17,24-48= w20;
   v21 =17,24-48= u21; v21 =17,24-48= v20; u20 =17,24-48= (v21 -> w21);
   k21 =17,28-40= j21; m21 =17,28-42= h21; j21 =17,28-42= (h21 -> i21);
   g21 =17,28-42= i21; o21 =17,28-44= e21; g21 =17,28-44= (e21 -> f21);
   d21 =17,28-44= f21; q21 =17,28-46= b21; d21 =17,28-46= (b21 -> c21);
   a21 =17,28-46= c21; s21 =17,28-48= x20; a21 =17,28-48= (x20 -> y20);
   w20 =17,28-48= y20; m21 =17,41-42= n21; o21 =17,43-44= p21;
   q21 =17,45-46= r21; int =17,47-48= s21; }
[DBG generate] for_structure_item at 17,4-48
  let string_fold =
      function s -> function a -> function f -> string_foldi~s~a~f~0:
  {(string -> (l21 -> ((char -> (l21 -> l21)) -> (int -> l21)))) =string_foldi= k21;
   p20 =17,4-48= q20; n21 =17,20-21= r20; f22 =17,20-48= c22;
   f22 =17,20-48= s20; e22 =17,20-48= d22; e22 =17,20-48= r20;
   q20 =17,20-48= (e22 -> f22); p21 =17,22-23= t20; b22 =17,22-48= x21;
   b22 =17,22-48= u20; a22 =17,22-48= y21; a22 =17,22-48= t20;
   s20 =17,22-48= (a22 -> b22); r21 =17,24-25= v20; w21 =17,24-48= t21;
   w21 =17,24-48= w20; v21 =17,24-48= u21; v21 =17,24-48= v20;
   u20 =17,24-48= (v21 -> w21); k21 =17,28-40= j21; m21 =17,28-42= h21;
   j21 =17,28-42= (h21 -> i21); g21 =17,28-42= i21; o21 =17,28-44= e21;
   g21 =17,28-44= (e21 -> f21); d21 =17,28-44= f21; q21 =17,28-46= b21;
   d21 =17,28-46= (b21 -> c21); a21 =17,28-46= c21; s21 =17,28-48= x20;
   a21 =17,28-48= (x20 -> y20); w20 =17,28-48= y20; m21 =17,41-42= n21;
   o21 =17,43-44= p21; q21 =17,45-46= r21; int =17,47-48= s21; }
[DBG generate] Generated for strit, resulting env:
Values: string_fold: p20; 
  Types: 
[INF typing] 37 constraints generated.
[DBG typing] generated constraints:
               {(string -> (l21 -> ((char -> (l21 -> l21)) -> (int -> l21)))) =string_foldi= k21;
                p20 =17,4-48= q20; n21 =17,20-21= r20; f22 =17,20-48= c22;
                f22 =17,20-48= s20; e22 =17,20-48= d22; e22 =17,20-48= r20;
                q20 =17,20-48= (e22 -> f22); p21 =17,22-23= t20;
                b22 =17,22-48= x21; b22 =17,22-48= u20; a22 =17,22-48= y21;
                a22 =17,22-48= t20; s20 =17,22-48= (a22 -> b22);
                r21 =17,24-25= v20; w21 =17,24-48= t21; w21 =17,24-48= w20;
                v21 =17,24-48= u21; v21 =17,24-48= v20;
                u20 =17,24-48= (v21 -> w21); k21 =17,28-40= j21;
                m21 =17,28-42= h21; j21 =17,28-42= (h21 -> i21);
                g21 =17,28-42= i21; o21 =17,28-44= e21;
                g21 =17,28-44= (e21 -> f21); d21 =17,28-44= f21;
                q21 =17,28-46= b21; d21 =17,28-46= (b21 -> c21);
                a21 =17,28-46= c21; s21 =17,28-48= x20;
                a21 =17,28-48= (x20 -> y20); w20 =17,28-48= y20;
                m21 =17,41-42= n21; o21 =17,43-44= p21; q21 =17,45-46= r21;
                int =17,47-48= s21; }
[DBG typing] Unifying
               {(string -> (l21 -> ((char -> (l21 -> l21)) -> (int -> l21)))) =string_foldi= k21;
                p20 =17,4-48= q20; n21 =17,20-21= r20; f22 =17,20-48= c22;
                f22 =17,20-48= s20; e22 =17,20-48= d22; e22 =17,20-48= r20;
                q20 =17,20-48= (e22 -> f22); p21 =17,22-23= t20;
                b22 =17,22-48= x21; b22 =17,22-48= u20; a22 =17,22-48= y21;
                a22 =17,22-48= t20; s20 =17,22-48= (a22 -> b22);
                r21 =17,24-25= v20; w21 =17,24-48= t21; w21 =17,24-48= w20;
                v21 =17,24-48= u21; v21 =17,24-48= v20;
                u20 =17,24-48= (v21 -> w21); k21 =17,28-40= j21;
                m21 =17,28-42= h21; j21 =17,28-42= (h21 -> i21);
                g21 =17,28-42= i21; o21 =17,28-44= e21;
                g21 =17,28-44= (e21 -> f21); d21 =17,28-44= f21;
                q21 =17,28-46= b21; d21 =17,28-46= (b21 -> c21);
                a21 =17,28-46= c21; s21 =17,28-48= x20;
                a21 =17,28-48= (x20 -> y20); w20 =17,28-48= y20;
                m21 =17,41-42= n21; o21 =17,43-44= p21; q21 =17,45-46= r21;
                int =17,47-48= s21; }
[DBG typing] switching X, var: k21 = (string -> (l21 -> ((char -> (l21 -> l21)) -> (int -> l21))))
[DBG typing] TyVar k21, (string -> (l21 -> ((char -> (l21 -> l21)) -> (int -> l21)))): adding k21 -> (string -> (l21 -> ((char -> (l21 -> l21)) -> (int -> l21)))) to E
[DBG typing] TyVar p20, q20: adding p20 -> q20 to E
[DBG typing] TyVar n21, r20: adding n21 -> r20 to E
[DBG typing] TyVar f22, c22: adding f22 -> c22 to E
[DBG typing] TyVar f22, c22: --> c22 = s20 (lookup)
[DBG typing] TyVar e22, d22: adding e22 -> d22 to E
[DBG typing] TyVar e22, d22: --> d22 = r20 (lookup)
[DBG typing] TyVar d22, r20: adding d22 -> r20 to E
[DBG typing] TyVar c22, s20: adding c22 -> s20 to E
[DBG typing] TyVar q20, (e22 -> f22): adding q20 -> (e22 -> f22) to E
[DBG typing] TyVar p21, t20: adding p21 -> t20 to E
[DBG typing] TyVar b22, x21: adding b22 -> x21 to E
[DBG typing] TyVar b22, x21: --> x21 = u20 (lookup)
[DBG typing] TyVar a22, y21: adding a22 -> y21 to E
[DBG typing] TyVar a22, y21: --> y21 = t20 (lookup)
[DBG typing] TyVar y21, t20: adding y21 -> t20 to E
[DBG typing] TyVar x21, u20: adding x21 -> u20 to E
[DBG typing] TyVar s20, (a22 -> b22): adding s20 -> (a22 -> b22) to E
[DBG typing] TyVar r21, v20: adding r21 -> v20 to E
[DBG typing] TyVar w21, t21: adding w21 -> t21 to E
[DBG typing] TyVar w21, t21: --> t21 = w20 (lookup)
[DBG typing] TyVar v21, u21: adding v21 -> u21 to E
[DBG typing] TyVar v21, u21: --> u21 = v20 (lookup)
[DBG typing] TyVar u21, v20: adding u21 -> v20 to E
[DBG typing] TyVar t21, w20: adding t21 -> w20 to E
[DBG typing] TyVar u20, (v21 -> w21): adding u20 -> (v21 -> w21) to E
[DBG typing] TyVar k21, (string -> (l21 -> ((char -> (l21 -> l21)) -> (int -> l21)))): --> (string -> (l21 -> ((char -> (l21 -> l21)) -> (int -> l21)))) = j21 (lookup)
[DBG typing] switching X, var: j21 = (string -> (l21 -> ((char -> (l21 -> l21)) -> (int -> l21))))
[DBG typing] TyVar j21, (string -> (l21 -> ((char -> (l21 -> l21)) -> (int -> l21)))): adding j21 -> (string -> (l21 -> ((char -> (l21 -> l21)) -> (int -> l21)))) to E
[DBG typing] TyVar m21, h21: adding m21 -> h21 to E
[DBG typing] TyVar j21, (string -> (l21 -> ((char -> (l21 -> l21)) -> (int -> l21)))): --> (string -> (l21 -> ((char -> (l21 -> l21)) -> (int -> l21)))) = (h21 -> i21) (lookup)
[DBG typing] Unifying arrows (string -> (l21 -> ((char -> (l21 -> l21)) -> (int -> l21)))), (h21 -> i21) --> string = h21, (l21 -> ((char -> (l21 -> l21)) -> (int -> l21))) = i21
[DBG typing] switching X, var: i21 = (l21 -> ((char -> (l21 -> l21)) -> (int -> l21)))
[DBG typing] switching X, var: h21 = string
[DBG typing] TyVar i21, (l21 -> ((char -> (l21 -> l21)) -> (int -> l21))): adding i21 -> (l21 -> ((char -> (l21 -> l21)) -> (int -> l21))) to E
[DBG typing] TyVar h21, string: adding h21 -> string to E
[DBG typing] TyVar g21, i21: adding g21 -> i21 to E
[DBG typing] TyVar o21, e21: adding o21 -> e21 to E
[DBG typing] TyVar g21, i21: --> i21 = (e21 -> f21) (lookup)
[DBG typing] TyVar i21, (l21 -> ((char -> (l21 -> l21)) -> (int -> l21))): --> (l21 -> ((char -> (l21 -> l21)) -> (int -> l21))) = (e21 -> f21) (lookup)
[DBG typing] Unifying arrows (l21 -> ((char -> (l21 -> l21)) -> (int -> l21))), (e21 -> f21) --> l21 = e21, ((char -> (l21 -> l21)) -> (int -> l21)) = f21
[DBG typing] switching X, var: f21 = ((char -> (l21 -> l21)) -> (int -> l21))
[DBG typing] TyVar l21, e21: adding l21 -> e21 to E
[DBG typing] TyVar f21, ((char -> (l21 -> l21)) -> (int -> l21)): adding f21 -> ((char -> (l21 -> l21)) -> (int -> l21)) to E
[DBG typing] TyVar d21, f21: adding d21 -> f21 to E
[DBG typing] TyVar q21, b21: adding q21 -> b21 to E
[DBG typing] TyVar d21, f21: --> f21 = (b21 -> c21) (lookup)
[DBG typing] TyVar f21, ((char -> (l21 -> l21)) -> (int -> l21)): --> ((char -> (l21 -> l21)) -> (int -> l21)) = (b21 -> c21) (lookup)
[DBG typing] Unifying arrows ((char -> (l21 -> l21)) -> (int -> l21)), (b21 -> c21) --> (char -> (l21 -> l21)) = b21, (int -> l21) = c21
[DBG typing] switching X, var: c21 = (int -> l21)
[DBG typing] switching X, var: b21 = (char -> (l21 -> l21))
[DBG typing] TyVar c21, (int -> l21): adding c21 -> (int -> l21) to E
[DBG typing] TyVar b21, (char -> (l21 -> l21)): adding b21 -> (char -> (l21 -> l21)) to E
[DBG typing] TyVar a21, c21: adding a21 -> c21 to E
[DBG typing] TyVar s21, x20: adding s21 -> x20 to E
[DBG typing] TyVar a21, c21: --> c21 = (x20 -> y20) (lookup)
[DBG typing] TyVar c21, (int -> l21): --> (int -> l21) = (x20 -> y20) (lookup)
[DBG typing] Unifying arrows (int -> l21), (x20 -> y20) --> int = x20, l21 = y20
[DBG typing] switching X, var: x20 = int
[DBG typing] TyVar l21, e21: --> e21 = y20 (lookup)
[DBG typing] TyVar e21, y20: adding e21 -> y20 to E
[DBG typing] TyVar x20, int: adding x20 -> int to E
[DBG typing] TyVar w20, y20: adding w20 -> y20 to E
[DBG typing] TyVar m21, h21: --> h21 = n21 (lookup)
[DBG typing] TyVar h21, string: --> string = n21 (lookup)
[DBG typing] switching X, var: n21 = string
[DBG typing] TyVar n21, r20: --> r20 = string (lookup)
[DBG typing] TyVar r20, string: adding r20 -> string to E
[DBG typing] TyVar o21, e21: --> e21 = p21 (lookup)
[DBG typing] TyVar e21, y20: --> y20 = p21 (lookup)
[DBG typing] TyVar y20, p21: adding y20 -> p21 to E
[DBG typing] TyVar q21, b21: --> b21 = r21 (lookup)
[DBG typing] TyVar b21, (char -> (l21 -> l21)): --> (char -> (l21 -> l21)) = r21 (lookup)
[DBG typing] switching X, var: r21 = (char -> (l21 -> l21))
[DBG typing] TyVar r21, v20: --> v20 = (char -> (l21 -> l21)) (lookup)
[DBG typing] TyVar v20, (char -> (l21 -> l21)): adding v20 -> (char -> (l21 -> l21)) to E
[DBG typing] switching X, var: s21 = int
[DBG typing] TyVar s21, x20: --> x20 = int (lookup)
[DBG typing] TyVar x20, int: --> int = int (lookup)
[DBG typing] Ctors int, int --> {}
[INF typing] Constraints unified successfully.
[DBG typing] Resulting tyvarsubst:
               f22: (t20 -> ((char -> (t20 -> t20)) -> t20)); e22: string; d22: string; c22: (t20 -> ((char -> (t20 -> t20)) -> t20)); b22: ((char -> (t20 -> t20)) -> t20); a22: t20; y21: t20; x21: ((char -> (t20 -> t20)) -> t20); w21: t20; v21: (char -> (t20 -> t20)); u21: (char -> (t20 -> t20)); t21: t20; s21: int; r21: (char -> (t20 -> t20)); q21: (char -> (t20 -> t20)); p21: t20; o21: t20; n21: string; m21: string; l21: t20; k21: (string -> (t20 -> ((char -> (t20 -> t20)) -> (int -> t20)))); j21: (string -> (t20 -> ((char -> (t20 -> t20)) -> (int -> t20)))); i21: (t20 -> ((char -> (t20 -> t20)) -> (int -> t20))); h21: string; g21: (t20 -> ((char -> (t20 -> t20)) -> (int -> t20))); f21: ((char -> (t20 -> t20)) -> (int -> t20)); e21: t20; d21: ((char -> (t20 -> t20)) -> (int -> t20)); c21: (int -> t20); b21: (char -> (t20 -> t20)); a21: (int -> t20); y20: t20; x20: int; w20: t20; v20: (char -> (t20 -> t20)); u20: ((char -> (t20 -> t20)) -> t20); s20: (t20 -> ((char -> (t20 -> t20)) -> t20)); r20: string; q20: (string -> (t20 -> ((char -> (t20 -> t20)) -> t20))); p20: (string -> (t20 -> ((char -> (t20 -> t20)) -> t20))); 
[INF typing] checked annotations
[INF typing] Constraints solved
[INF typing] Succeeded typing structure
  val string_fold: (string -> (t20 -> ((char -> (t20 -> t20)) -> t20)))
  with substitution
  f22: (t20 -> ((char -> (t20 -> t20)) -> t20)); e22: string; d22: string; c22: (t20 -> ((char -> (t20 -> t20)) -> t20)); b22: ((char -> (t20 -> t20)) -> t20); a22: t20; y21: t20; x21: ((char -> (t20 -> t20)) -> t20); w21: t20; v21: (char -> (t20 -> t20)); u21: (char -> (t20 -> t20)); t21: t20; s21: int; r21: (char -> (t20 -> t20)); q21: (char -> (t20 -> t20)); p21: t20; o21: t20; n21: string; m21: string; l21: t20; k21: (string -> (t20 -> ((char -> (t20 -> t20)) -> (int -> t20)))); j21: (string -> (t20 -> ((char -> (t20 -> t20)) -> (int -> t20)))); i21: (t20 -> ((char -> (t20 -> t20)) -> (int -> t20))); h21: string; g21: (t20 -> ((char -> (t20 -> t20)) -> (int -> t20))); f21: ((char -> (t20 -> t20)) -> (int -> t20)); e21: t20; d21: ((char -> (t20 -> t20)) -> (int -> t20)); c21: (int -> t20); b21: (char -> (t20 -> t20)); a21: (int -> t20); y20: t20; x20: int; w20: t20; v20: (char -> (t20 -> t20)); u20: ((char -> (t20 -> t20)) -> t20); s20: (t20 -> ((char -> (t20 -> t20)) -> t20)); r20: string; q20: (string -> (t20 -> ((char -> (t20 -> t20)) -> t20))); p20: (string -> (t20 -> ((char -> (t20 -> t20)) -> t20))); 
  and env enriched by
  Values: string_fold: (string -> (t20 -> ((char -> (t20 -> t20)) -> t20))); 
  Types: 
[DBG ast_comp] Succeeded for:  Pstr_value (17,4-48): string_fold
[INF ast_comp] Success comparing ecaml/ocaml typing
[DBG typing] Conf.load_path: [, /home/zhdf/easyocaml-0.49/ocaml-3.10.2/lib/ocaml]
[DBG enr_ast] Ocaml ast: [
  structure_item (/home/zhdf/demo/ml/sudoku1.ml[21,732+4]../home/zhdf/demo/ml/sudoku1.ml[22,756+52])
    Pstr_type
    [
      "change_type"
        type_declaration (/home/zhdf/demo/ml/sudoku1.ml[22,756+1]../home/zhdf/demo/ml/sudoku1.ml[22,756+52])
          ptype_params =
            []
          ptype_cstrs =
            []
          ptype_kind =
            Ptype_variant Public
              [
                "FillSquare" (/home/zhdf/demo/ml/sudoku1.ml[22,756+1]../home/zhdf/demo/ml/sudoku1.ml[22,756+22])
                  [
                    core_type (/home/zhdf/demo/ml/sudoku1.ml[22,756+15]../home/zhdf/demo/ml/sudoku1.ml[22,756+18])
                      Ptyp_constr "int"
                      []
                    core_type (/home/zhdf/demo/ml/sudoku1.ml[22,756+19]../home/zhdf/demo/ml/sudoku1.ml[22,756+22])
                      Ptyp_constr "int"
                      []
                  ]
                "PlaceValue" (/home/zhdf/demo/ml/sudoku1.ml[22,756+25]../home/zhdf/demo/ml/sudoku1.ml[22,756+52])
                  [
                    core_type (/home/zhdf/demo/ml/sudoku1.ml[22,756+39]../home/zhdf/demo/ml/sudoku1.ml[22,756+48])
                      Ptyp_constr "rectangle"
                      []
                    core_type (/home/zhdf/demo/ml/sudoku1.ml[22,756+49]../home/zhdf/demo/ml/sudoku1.ml[22,756+52])
                      Ptyp_constr "int"
                      []
                  ]
              ]
          ptype_manifest =
            None
    ]
]

[DBG env] Adding field contents
[DBG typing] Type structure in env:
               Values: !: (Pervasives.ref g22 -> g22);
               &&: (bool -> (bool -> bool)); &: (bool -> (bool -> bool));
               !=: (h22 -> (h22 -> bool)); **: (float -> (float -> float));
               +: (int -> (int -> int)); *.: (float -> (float -> float));
               -: (int -> (int -> int)); /: (int -> (int -> int));
               -.: (float -> (float -> float));
               +.: (float -> (float -> float)); *: (int -> (int -> int));
               <: (l22 -> (l22 -> bool));
               :=: (Pervasives.ref i22 -> (i22 -> unit));
               =: (b23 -> (b23 -> bool)); <>: (j22 -> (j22 -> bool));
               >=: (x22 -> (x22 -> bool)); >: (n22 -> (n22 -> bool));
               ==: (m22 -> (m22 -> bool)); <=: (k22 -> (k22 -> bool));
               /.: (float -> (float -> float));
               ^: (string -> (string -> string)); abs: (int -> int);
               ^^: (format6 p22 q22 r22 s22 t22 u22 -> (format6 u22 q22 r22 t22 v22 w22 -> format6 p22 q22 r22 s22 v22 w22));
               acos: (float -> float); asr: (int -> (int -> int));
               at_exit: ((unit -> unit) -> unit); asin: (float -> float);
               abs_float: (float -> float);
               atan2: (float -> (float -> float));
               bool_of_string: (string -> bool);
               classify_float: (float -> Pervasives.fpclass);
               char_of_int: (int -> char);
               close_in_noerr: (Pervasives.in_channel -> unit);
               close_in: (Pervasives.in_channel -> unit);
               ceil: (float -> float); atan: (float -> float);
               @: (list o22 -> (list o22 -> list o22));
               close_out_noerr: (Pervasives.out_channel -> unit);
               cos: (float -> float); cosh: (float -> float);
               compare: (y22 -> (y22 -> int)); epsilon_float: float;
               do_at_exit: (unit -> unit);
               decr: (Pervasives.ref int -> unit); failwith: (string -> o23);
               exp: (float -> float); float_of_int: (int -> float);
               float: (int -> float); floor: (float -> float);
               flush: (Pervasives.out_channel -> unit);
               frexp: (float -> (float , int));
               format_of_string: (format6 c23 d23 e23 f23 g23 h23 -> format6 c23 d23 e23 f23 g23 h23);
               flush_all: (unit -> unit); float_of_string: (string -> float);
               exit: (int -> a23); ignore: (k23 -> unit); infinity: float;
               incr: (Pervasives.ref int -> unit);
               in_channel_length: (Pervasives.in_channel -> int);
               input_byte: (Pervasives.in_channel -> int);
               input_binary_int: (Pervasives.in_channel -> int);
               input: (Pervasives.in_channel -> (string -> (int -> (int -> int))));
               input_line: (Pervasives.in_channel -> string);
               int_fold: ((int , int) -> (m23 -> ((int -> (m23 -> m23)) -> m23)));
               input_value: (Pervasives.in_channel -> l23);
               int_of_float: (float -> int); int_of_string: (string -> int);
               int_of_char: (char -> int); land: (int -> (int -> int));
               log: (float -> float); lnot: (int -> int);
               ldexp: (float -> (int -> float)); lor: (int -> (int -> int));
               lsl: (int -> (int -> int)); log10: (float -> float);
               invalid_arg: (string -> n23);
               input_char: (Pervasives.in_channel -> char);
               fst: ((i23 , j23) -> i23);
               close_out: (Pervasives.out_channel -> unit);
               lxor: (int -> (int -> int)); max_float: float;
               max: (q23 -> (q23 -> q23)); min: (p23 -> (p23 -> p23));
               mod: (int -> (int -> int)); min_int: int; min_float: float;
               max_int: int; modf: (float -> (float , float));
               neg_infinity: float; nan: float;
               open_in: (string -> Pervasives.in_channel);
               open_in_bin: (string -> Pervasives.in_channel);
               not: (bool -> bool);
               open_out: (string -> Pervasives.out_channel);
               or: (bool -> (bool -> bool));
               open_out_gen: (list Pervasives.open_flag -> (int -> (string -> Pervasives.out_channel)));
               open_out_bin: (string -> Pervasives.out_channel);
               output: (Pervasives.out_channel -> (string -> (int -> (int -> unit))));
               output_byte: (Pervasives.out_channel -> (int -> unit));
               output_binary_int: (Pervasives.out_channel -> (int -> unit));
               out_channel_length: (Pervasives.out_channel -> int);
               open_in_gen: (list Pervasives.open_flag -> (int -> (string -> Pervasives.in_channel)));
               mod_float: (float -> (float -> float));
               output_string: (Pervasives.out_channel -> (string -> unit));
               output_value: (Pervasives.out_channel -> (r23 -> unit));
               pos_out: (Pervasives.out_channel -> int);
               pos_in: (Pervasives.in_channel -> int);
               prerr_char: (char -> unit); prerr_float: (float -> unit);
               prerr_int: (int -> unit); prerr_endline: (string -> unit);
               pred: (int -> int); prerr_string: (string -> unit);
               print_float: (float -> unit); print_endline: (string -> unit);
               print_char: (char -> unit); print_newline: (unit -> unit);
               raise: (exn -> s23); print_string: (string -> unit);
               print_int: (int -> unit); read_int: (unit -> int);
               really_input: (Pervasives.in_channel -> (string -> (int -> (int -> unit))));
               read_line: (unit -> string);
               seek_in: (Pervasives.in_channel -> (int -> unit));
               ref: (t23 -> Pervasives.ref t23); read_float: (unit -> float);
               prerr_newline: (unit -> unit);
               set_binary_mode_out: (Pervasives.out_channel -> (bool -> unit));
               set_binary_mode_in: (Pervasives.in_channel -> (bool -> unit));
               sinh: (float -> float); sin: (float -> float);
               sqrt: (float -> float); stdin: Pervasives.in_channel;
               stderr: Pervasives.out_channel;
               string_fold: (string -> (x23 -> ((char -> (x23 -> x23)) -> x23)));
               stdout: Pervasives.out_channel; snd: ((u23 , v23) -> v23);
               string_of_bool: (bool -> string);
               string_of_float: (float -> string);
               string_of_int: (int -> string); tan: (float -> float);
               succ: (int -> int);
               string_of_format: (format6 y23 a24 b24 c24 d24 e24 -> string);
               truncate: (float -> int);
               unsafe_really_input: (Pervasives.in_channel -> (string -> (int -> (int -> unit))));
               ||: (bool -> (bool -> bool)); ~-.: (float -> float);
               ~-: (int -> int); valid_float_lexem: (string -> string);
               tanh: (float -> float);
               string_foldi: (string -> (w23 -> ((char -> (w23 -> w23)) -> (int -> w23))));
               seek_out: (Pervasives.out_channel -> (int -> unit));
               output_char: (Pervasives.out_channel -> (char -> unit));
               lsr: (int -> (int -> int)); 
               Types: type (f24) array = <abstr>;
               type () bool = | false | true ; type () board = array int;
               type () exn = ;
               type (g24, h24, i24) format = Pervasives.format4 g24 h24 i24 i24;
               type () float = <abstr>; type () char = <abstr>;
               type (n24, o24, p24, q24, r24, s24) format6 = <abstr>;
               type () int = <abstr>; type () in_channel = <abstr>;
               type () fpclass = | FP_infinite | FP_nan | FP_normal | FP_subnormal | FP_zero ;
               type () int64 = <abstr>;
               type (u24) list = | :: of u24 * list u24 | [] ;
               type (t24) lazy_t = <abstr>; type () int32 = <abstr>;
               type (j24, k24, l24, m24) format4 = format6 j24 k24 l24 l24 l24 m24;
               type (w24) option = | None | Some of w24 ;
               type () open_flag = | Open_append | Open_binary | Open_creat | Open_excl | Open_nonblock | Open_rdonly | Open_text | Open_trunc | Open_wronly ;
               type () rectangle = (int , int , int , int);
               type () out_channel = <abstr>; type () string = <abstr>;
               type () unit = | () ;
               type (v24) ref = {contents -> Mutablev24; };
               type () nativeint = <abstr>; 
[DBG generate] for_structure_item at 21,4-22,52
  type change_type =  .
       FillSquare<2> of int * int | PlaceValue<2> of rectangle * int:
  {}
[DBG generate] Generated for strit, resulting env:
Values: 
  Types: type () change_type = | FillSquare of int * int | PlaceValue of rectangle * int ;
  
[INF typing] 0 constraints generated.
[DBG typing] generated constraints: {}
[DBG typing] Unifying {}
[INF typing] Constraints unified successfully.
[DBG typing] Resulting tyvarsubst: 
[INF typing] checked annotations
[INF typing] Constraints solved
[INF typing] Succeeded typing structure type change_type with substitution 
  and env enriched by Values: 
  Types: type () change_type = | FillSquare of int * int | PlaceValue of rectangle * int ;
  
[DBG ast_comp] Succeeded for:  <not interesting>
[INF ast_comp] Success comparing ecaml/ocaml typing
[DBG typing] Conf.load_path: [, /home/zhdf/easyocaml-0.49/ocaml-3.10.2/lib/ocaml]
[DBG enr_ast] Ocaml ast: [
  structure_item (/home/zhdf/demo/ml/sudoku1.ml[24,812+4]../home/zhdf/demo/ml/sudoku1.ml[24,812+43])
    Pstr_value Nonrec
    [
      <def>
        pattern (/home/zhdf/demo/ml/sudoku1.ml[24,812+8]../home/zhdf/demo/ml/sudoku1.ml[24,812+14])
          Ppat_var "create"
        expression (/home/zhdf/demo/ml/sudoku1.ml[24,812+15]../home/zhdf/demo/ml/sudoku1.ml[24,812+43])
          Pexp_function ""
          None
          [
            <case>
              pattern (/home/zhdf/demo/ml/sudoku1.ml[24,812+15]../home/zhdf/demo/ml/sudoku1.ml[24,812+17])
                Ppat_construct "()"
                None
                false
              expression (/home/zhdf/demo/ml/sudoku1.ml[24,812+18]../home/zhdf/demo/ml/sudoku1.ml[24,812+43])
                Pexp_constraint
                expression (/home/zhdf/demo/ml/sudoku1.ml[24,812+42]../home/zhdf/demo/ml/sudoku1.ml[24,812+43])
                  Pexp_apply
                  expression (/home/zhdf/demo/ml/sudoku1.ml[24,812+28]../home/zhdf/demo/ml/sudoku1.ml[24,812+38])
                    Pexp_ident "Array.make"
                  [
                    <label> ""
                      expression (/home/zhdf/demo/ml/sudoku1.ml[24,812+39]../home/zhdf/demo/ml/sudoku1.ml[24,812+41])
                        Pexp_constant Const_int 81
                    <label> ""
                      expression (/home/zhdf/demo/ml/sudoku1.ml[24,812+42]../home/zhdf/demo/ml/sudoku1.ml[24,812+43])
                        Pexp_constant Const_int 0
                  ]
                Some
                  core_type (/home/zhdf/demo/ml/sudoku1.ml[24,812+20]../home/zhdf/demo/ml/sudoku1.ml[24,812+25])
                    Ptyp_constr "board"
                    []
                None
          ]
    ]
]

[INF enr_ast] A different parser than Ocaml's default should be used to avoid inaccuracy for the location of multiple application (24,42-43).
[DBG env] Adding field contents
[DBG typing] Type structure in env:
               Values: !: (Pervasives.ref x24 -> x24);
               &&: (bool -> (bool -> bool)); &: (bool -> (bool -> bool));
               !=: (y24 -> (y24 -> bool)); **: (float -> (float -> float));
               +: (int -> (int -> int)); *.: (float -> (float -> float));
               -: (int -> (int -> int)); /: (int -> (int -> int));
               -.: (float -> (float -> float));
               +.: (float -> (float -> float)); *: (int -> (int -> int));
               <: (d25 -> (d25 -> bool));
               :=: (Pervasives.ref a25 -> (a25 -> unit));
               =: (s25 -> (s25 -> bool)); <>: (b25 -> (b25 -> bool));
               >=: (p25 -> (p25 -> bool)); >: (f25 -> (f25 -> bool));
               ==: (e25 -> (e25 -> bool)); <=: (c25 -> (c25 -> bool));
               /.: (float -> (float -> float));
               ^: (string -> (string -> string)); abs: (int -> int);
               ^^: (format6 h25 i25 j25 k25 l25 m25 -> (format6 m25 i25 j25 l25 n25 o25 -> format6 h25 i25 j25 k25 n25 o25));
               acos: (float -> float); asr: (int -> (int -> int));
               at_exit: ((unit -> unit) -> unit); asin: (float -> float);
               abs_float: (float -> float);
               atan2: (float -> (float -> float));
               bool_of_string: (string -> bool);
               classify_float: (float -> Pervasives.fpclass);
               char_of_int: (int -> char);
               close_in_noerr: (Pervasives.in_channel -> unit);
               close_in: (Pervasives.in_channel -> unit);
               ceil: (float -> float); atan: (float -> float);
               @: (list g25 -> (list g25 -> list g25));
               close_out_noerr: (Pervasives.out_channel -> unit);
               cos: (float -> float); cosh: (float -> float);
               compare: (q25 -> (q25 -> int)); epsilon_float: float;
               do_at_exit: (unit -> unit);
               decr: (Pervasives.ref int -> unit); failwith: (string -> g26);
               exp: (float -> float); float_of_int: (int -> float);
               float: (int -> float); floor: (float -> float);
               flush: (Pervasives.out_channel -> unit);
               frexp: (float -> (float , int));
               format_of_string: (format6 t25 u25 v25 w25 x25 y25 -> format6 t25 u25 v25 w25 x25 y25);
               flush_all: (unit -> unit); float_of_string: (string -> float);
               exit: (int -> r25); ignore: (c26 -> unit); infinity: float;
               incr: (Pervasives.ref int -> unit);
               in_channel_length: (Pervasives.in_channel -> int);
               input_byte: (Pervasives.in_channel -> int);
               input_binary_int: (Pervasives.in_channel -> int);
               input: (Pervasives.in_channel -> (string -> (int -> (int -> int))));
               input_line: (Pervasives.in_channel -> string);
               int_fold: ((int , int) -> (e26 -> ((int -> (e26 -> e26)) -> e26)));
               input_value: (Pervasives.in_channel -> d26);
               int_of_float: (float -> int); int_of_string: (string -> int);
               int_of_char: (char -> int); land: (int -> (int -> int));
               log: (float -> float); lnot: (int -> int);
               ldexp: (float -> (int -> float)); lor: (int -> (int -> int));
               lsl: (int -> (int -> int)); log10: (float -> float);
               invalid_arg: (string -> f26);
               input_char: (Pervasives.in_channel -> char);
               fst: ((a26 , b26) -> a26);
               close_out: (Pervasives.out_channel -> unit);
               lxor: (int -> (int -> int)); max_float: float;
               max: (i26 -> (i26 -> i26)); min: (h26 -> (h26 -> h26));
               mod: (int -> (int -> int)); min_int: int; min_float: float;
               max_int: int; modf: (float -> (float , float));
               neg_infinity: float; nan: float;
               open_in: (string -> Pervasives.in_channel);
               open_in_bin: (string -> Pervasives.in_channel);
               not: (bool -> bool);
               open_out: (string -> Pervasives.out_channel);
               or: (bool -> (bool -> bool));
               open_out_gen: (list Pervasives.open_flag -> (int -> (string -> Pervasives.out_channel)));
               open_out_bin: (string -> Pervasives.out_channel);
               output: (Pervasives.out_channel -> (string -> (int -> (int -> unit))));
               output_byte: (Pervasives.out_channel -> (int -> unit));
               output_binary_int: (Pervasives.out_channel -> (int -> unit));
               out_channel_length: (Pervasives.out_channel -> int);
               open_in_gen: (list Pervasives.open_flag -> (int -> (string -> Pervasives.in_channel)));
               mod_float: (float -> (float -> float));
               output_string: (Pervasives.out_channel -> (string -> unit));
               output_value: (Pervasives.out_channel -> (j26 -> unit));
               pos_out: (Pervasives.out_channel -> int);
               pos_in: (Pervasives.in_channel -> int);
               prerr_char: (char -> unit); prerr_float: (float -> unit);
               prerr_int: (int -> unit); prerr_endline: (string -> unit);
               pred: (int -> int); prerr_string: (string -> unit);
               print_float: (float -> unit); print_endline: (string -> unit);
               print_char: (char -> unit); print_newline: (unit -> unit);
               raise: (exn -> k26); print_string: (string -> unit);
               print_int: (int -> unit); read_int: (unit -> int);
               really_input: (Pervasives.in_channel -> (string -> (int -> (int -> unit))));
               read_line: (unit -> string);
               seek_in: (Pervasives.in_channel -> (int -> unit));
               ref: (l26 -> Pervasives.ref l26); read_float: (unit -> float);
               prerr_newline: (unit -> unit);
               set_binary_mode_out: (Pervasives.out_channel -> (bool -> unit));
               set_binary_mode_in: (Pervasives.in_channel -> (bool -> unit));
               sinh: (float -> float); sin: (float -> float);
               sqrt: (float -> float); stdin: Pervasives.in_channel;
               stderr: Pervasives.out_channel;
               string_fold: (string -> (p26 -> ((char -> (p26 -> p26)) -> p26)));
               stdout: Pervasives.out_channel; snd: ((m26 , n26) -> n26);
               string_of_bool: (bool -> string);
               string_of_float: (float -> string);
               string_of_int: (int -> string); tan: (float -> float);
               succ: (int -> int);
               string_of_format: (format6 q26 r26 s26 t26 u26 v26 -> string);
               truncate: (float -> int);
               unsafe_really_input: (Pervasives.in_channel -> (string -> (int -> (int -> unit))));
               ||: (bool -> (bool -> bool)); ~-.: (float -> float);
               ~-: (int -> int); valid_float_lexem: (string -> string);
               tanh: (float -> float);
               string_foldi: (string -> (o26 -> ((char -> (o26 -> o26)) -> (int -> o26))));
               seek_out: (Pervasives.out_channel -> (int -> unit));
               output_char: (Pervasives.out_channel -> (char -> unit));
               lsr: (int -> (int -> int)); 
               Types: type (w26) array = <abstr>;
               type () bool = | false | true ; type () board = array int;
               type () char = <abstr>;
               type () change_type = | FillSquare of int * int | PlaceValue of rectangle * int ;
               type () float = <abstr>;
               type (x26, y26, a27) format = Pervasives.format4 x26 y26 a27 a27;
               type (f27, g27, h27, i27, j27, k27) format6 = <abstr>;
               type () int = <abstr>; type () in_channel = <abstr>;
               type () fpclass = | FP_infinite | FP_nan | FP_normal | FP_subnormal | FP_zero ;
               type (b27, c27, d27, e27) format4 = format6 b27 c27 d27 d27 d27 e27;
               type () exn = ; type () int64 = <abstr>;
               type (m27) list = | :: of m27 * list m27 | [] ;
               type (l27) lazy_t = <abstr>;
               type (o27) option = | None | Some of o27 ;
               type () open_flag = | Open_append | Open_binary | Open_creat | Open_excl | Open_nonblock | Open_rdonly | Open_text | Open_trunc | Open_wronly ;
               type () nativeint = <abstr>;
               type () rectangle = (int , int , int , int);
               type () string = <abstr>; type () unit = | () ;
               type (n27) ref = {contents -> Mutablen27; };
               type () out_channel = <abstr>; type () int32 = <abstr>; 
[DBG generate] for pattern at 24,8-14 create
  (bound: {create -> p27; }, ty: p27, cs: {})
[DBG generate] for pattern at 24,15-17 () 
  (bound: {}, ty: r27, cs: {r27 =24,15-17= unit; })
[DBG generate] for_expr at 24,28-38 Array.make: i29 -
  {(int -> (k29 -> array k29)) =Array.make= j29; j29 =24,28-38= i29; }
[DBG generate] for_expr at 24,39-41 81: l29 - {int =24,39-41= l29; }
[DBG generate] for_expr at 24,28-41 Array.make~81: y27 -
  {(int -> (k29 -> array k29)) =Array.make= j29; j29 =24,28-38= i29;
   l29 =24,28-41= a28; i29 =24,28-41= (a28 -> b28); y27 =24,28-41= b28;
   int =24,39-41= l29; }
[DBG generate] for_expr at 24,42-43 0: m29 - {int =24,42-43= m29; }
[DBG generate] for_expr at 24,28-43 Array.make~81~0: v27 -
  {(int -> (k29 -> array k29)) =Array.make= j29; j29 =24,28-38= i29;
   l29 =24,28-41= a28; i29 =24,28-41= (a28 -> b28); y27 =24,28-41= b28;
   m29 =24,28-43= w27; y27 =24,28-43= (w27 -> x27); v27 =24,28-43= x27;
   int =24,39-41= l29; int =24,42-43= m29; }
[DBG generate] for_expr at 24,18-43 (Array.make~81~0 : board): s27 -
  {(int -> (k29 -> array k29)) =Array.make= j29; t27 =24,18-43= v27;
   s27 =24,18-43= u27; u27 =24,20-25= board; t27 =24,20-25= board;
   j29 =24,28-38= i29; l29 =24,28-41= a28; i29 =24,28-41= (a28 -> b28);
   y27 =24,28-41= b28; m29 =24,28-43= w27; y27 =24,28-43= (w27 -> x27);
   v27 =24,28-43= x27; int =24,39-41= l29; int =24,42-43= m29; }
[DBG generate] for_expr at 24,15-43
  function ()  -> (Array.make~81~0 : board): q27 -
  {(int -> (k29 -> array k29)) =Array.make= j29; r27 =24,15-17= unit;
   q29 =24,15-43= n29; q29 =24,15-43= s27; p29 =24,15-43= o29;
   p29 =24,15-43= r27; q27 =24,15-43= (p29 -> q29); t27 =24,18-43= v27;
   s27 =24,18-43= u27; u27 =24,20-25= board; t27 =24,20-25= board;
   j29 =24,28-38= i29; l29 =24,28-41= a28; i29 =24,28-41= (a28 -> b28);
   y27 =24,28-41= b28; m29 =24,28-43= w27; y27 =24,28-43= (w27 -> x27);
   v27 =24,28-43= x27; int =24,39-41= l29; int =24,42-43= m29; }
[DBG generate] for_structure_item at 24,4-43
  let create = function ()  -> (Array.make~81~0 : board):
  {(int -> (k29 -> array k29)) =Array.make= j29; p27 =24,4-43= q27;
   r27 =24,15-17= unit; q29 =24,15-43= n29; q29 =24,15-43= s27;
   p29 =24,15-43= o29; p29 =24,15-43= r27; q27 =24,15-43= (p29 -> q29);
   t27 =24,18-43= v27; s27 =24,18-43= u27; u27 =24,20-25= board;
   t27 =24,20-25= board; j29 =24,28-38= i29; l29 =24,28-41= a28;
   i29 =24,28-41= (a28 -> b28); y27 =24,28-41= b28; m29 =24,28-43= w27;
   y27 =24,28-43= (w27 -> x27); v27 =24,28-43= x27; int =24,39-41= l29;
   int =24,42-43= m29; }
[DBG generate] Generated for strit, resulting env:
Values: create: p27; 
  Types: 
[INF typing] 21 constraints generated.
[DBG typing] generated constraints:
               {(int -> (k29 -> array k29)) =Array.make= j29;
                p27 =24,4-43= q27; r27 =24,15-17= unit; q29 =24,15-43= n29;
                q29 =24,15-43= s27; p29 =24,15-43= o29; p29 =24,15-43= r27;
                q27 =24,15-43= (p29 -> q29); t27 =24,18-43= v27;
                s27 =24,18-43= u27; u27 =24,20-25= board;
                t27 =24,20-25= board; j29 =24,28-38= i29; l29 =24,28-41= a28;
                i29 =24,28-41= (a28 -> b28); y27 =24,28-41= b28;
                m29 =24,28-43= w27; y27 =24,28-43= (w27 -> x27);
                v27 =24,28-43= x27; int =24,39-41= l29; int =24,42-43= m29; }
[DBG typing] Unifying
               {(int -> (k29 -> array k29)) =Array.make= j29;
                p27 =24,4-43= q27; r27 =24,15-17= unit; q29 =24,15-43= n29;
                q29 =24,15-43= s27; p29 =24,15-43= o29; p29 =24,15-43= r27;
                q27 =24,15-43= (p29 -> q29); t27 =24,18-43= v27;
                s27 =24,18-43= u27; u27 =24,20-25= board;
                t27 =24,20-25= board; j29 =24,28-38= i29; l29 =24,28-41= a28;
                i29 =24,28-41= (a28 -> b28); y27 =24,28-41= b28;
                m29 =24,28-43= w27; y27 =24,28-43= (w27 -> x27);
                v27 =24,28-43= x27; int =24,39-41= l29; int =24,42-43= m29; }
[DBG typing] switching X, var: j29 = (int -> (k29 -> array k29))
[DBG typing] TyVar j29, (int -> (k29 -> array k29)): adding j29 -> (int -> (k29 -> array k29)) to E
[DBG typing] TyVar p27, q27: adding p27 -> q27 to E
[DBG typing] TyVar r27, unit: adding r27 -> unit to E
[DBG typing] TyVar q29, n29: adding q29 -> n29 to E
[DBG typing] TyVar q29, n29: --> n29 = s27 (lookup)
[DBG typing] TyVar p29, o29: adding p29 -> o29 to E
[DBG typing] TyVar p29, o29: --> o29 = r27 (lookup)
[DBG typing] TyVar o29, r27: adding o29 -> r27 to E
[DBG typing] TyVar n29, s27: adding n29 -> s27 to E
[DBG typing] TyVar q27, (p29 -> q29): adding q27 -> (p29 -> q29) to E
[DBG typing] TyVar t27, v27: adding t27 -> v27 to E
[DBG typing] TyVar s27, u27: adding s27 -> u27 to E
[DBG typing] TyVar u27, array int: adding u27 -> board to E
[DBG typing] TyVar t27, v27: --> v27 = board (lookup)
[DBG typing] TyVar v27, array int: adding v27 -> board to E
[DBG typing] TyVar j29, (int -> (k29 -> array k29)): --> (int -> (k29 -> array k29)) = i29 (lookup)
[DBG typing] switching X, var: i29 = (int -> (k29 -> array k29))
[DBG typing] TyVar i29, (int -> (k29 -> array k29)): adding i29 -> (int -> (k29 -> array k29)) to E
[DBG typing] TyVar l29, a28: adding l29 -> a28 to E
[DBG typing] TyVar i29, (int -> (k29 -> array k29)): --> (int -> (k29 -> array k29)) = (a28 -> b28) (lookup)
[DBG typing] Unifying arrows (int -> (k29 -> array k29)), (a28 -> b28) --> int = a28, (k29 -> array k29) = b28
[DBG typing] switching X, var: b28 = (k29 -> array k29)
[DBG typing] switching X, var: a28 = int
[DBG typing] TyVar b28, (k29 -> array k29): adding b28 -> (k29 -> array k29) to E
[DBG typing] TyVar a28, int: adding a28 -> int to E
[DBG typing] TyVar y27, b28: adding y27 -> b28 to E
[DBG typing] TyVar m29, w27: adding m29 -> w27 to E
[DBG typing] TyVar y27, b28: --> b28 = (w27 -> x27) (lookup)
[DBG typing] TyVar b28, (k29 -> array k29): --> (k29 -> array k29) = (w27 -> x27) (lookup)
[DBG typing] Unifying arrows (k29 -> array k29), (w27 -> x27) --> k29 = w27, array k29 = x27
[DBG typing] switching X, var: x27 = array k29
[DBG typing] TyVar k29, w27: adding k29 -> w27 to E
[DBG typing] TyVar x27, array k29: adding x27 -> array k29 to E
[DBG typing] TyVar v27, board: --> board = x27 (lookup)
[DBG typing] switching X, var: x27 = board
[DBG typing] TyVar x27, array k29: --> array k29 = board (lookup)
[DBG typing] Ctors array k29, array int --> {k29 = int; }
[DBG typing] TyVar k29, w27: --> w27 = int (lookup)
[DBG typing] TyVar w27, int: adding w27 -> int to E
[DBG typing] switching X, var: l29 = int
[DBG typing] TyVar l29, a28: --> a28 = int (lookup)
[DBG typing] TyVar a28, int: --> int = int (lookup)
[DBG typing] Ctors int, int --> {}
[DBG typing] switching X, var: m29 = int
[DBG typing] TyVar m29, w27: --> w27 = int (lookup)
[DBG typing] TyVar w27, int: --> int = int (lookup)
[DBG typing] Ctors int, int --> {}
[INF typing] Constraints unified successfully.
[DBG typing] Resulting tyvarsubst:
               q29: board; p29: unit; o29: unit; n29: board; m29: int; l29: int; k29: int; j29: (int -> (int -> array int)); i29: (int -> (int -> array int)); b28: (int -> array int); a28: int; y27: (int -> array int); x27: array int; w27: int; v27: board; u27: board; t27: board; s27: board; r27: unit; q27: (unit -> board); p27: (unit -> board); 
[DBG coretys] Check array int <= array int
[INF typing] checked annotations
[INF typing] Constraints solved
[INF typing] Succeeded typing structure val create: (unit -> board)
  with substitution
  q29: board; p29: unit; o29: unit; n29: board; m29: int; l29: int; k29: int; j29: (int -> (int -> array int)); i29: (int -> (int -> array int)); b28: (int -> array int); a28: int; y27: (int -> array int); x27: array int; w27: int; v27: board; u27: board; t27: board; s27: board; r27: unit; q27: (unit -> board); p27: (unit -> board); 
  and env enriched by Values: create: (unit -> board);  Types: 
[DBG ast_comp] Succeeded for:  Pstr_value (24,4-43): create
[INF ast_comp] Success comparing ecaml/ocaml typing
[DBG typing] Conf.load_path: [, /home/zhdf/easyocaml-0.49/ocaml-3.10.2/lib/ocaml]
[DBG enr_ast] Ocaml ast: [
  structure_item (/home/zhdf/demo/ml/sudoku1.ml[25,857+4]../home/zhdf/demo/ml/sudoku1.ml[25,857+40])
    Pstr_value Nonrec
    [
      <def>
        pattern (/home/zhdf/demo/ml/sudoku1.ml[25,857+8]../home/zhdf/demo/ml/sudoku1.ml[25,857+12])
          Ppat_var "bget"
        expression (/home/zhdf/demo/ml/sudoku1.ml[25,857+13]../home/zhdf/demo/ml/sudoku1.ml[25,857+40])
          Pexp_function ""
          None
          [
            <case>
              pattern (/home/zhdf/demo/ml/sudoku1.ml[25,857+13]../home/zhdf/demo/ml/sudoku1.ml[25,857+22])
                Ppat_constraint                pattern (/home/zhdf/demo/ml/sudoku1.ml[25,857+14]../home/zhdf/demo/ml/sudoku1.ml[25,857+15])
                  Ppat_var "b"
                core_type (/home/zhdf/demo/ml/sudoku1.ml[25,857+16]../home/zhdf/demo/ml/sudoku1.ml[25,857+21])
                  Ptyp_constr "board"
                  []
              expression (/home/zhdf/demo/ml/sudoku1.ml[25,857+23]../home/zhdf/demo/ml/sudoku1.ml[25,857+40])
                Pexp_function ""
                None
                [
                  <case>
                    pattern (/home/zhdf/demo/ml/sudoku1.ml[25,857+23]../home/zhdf/demo/ml/sudoku1.ml[25,857+24])
                      Ppat_var "i"
                    expression (/home/zhdf/demo/ml/sudoku1.ml[25,857+25]../home/zhdf/demo/ml/sudoku1.ml[25,857+40])
                      Pexp_function ""
                      None
                      [
                        <case>
                          pattern (/home/zhdf/demo/ml/sudoku1.ml[25,857+25]../home/zhdf/demo/ml/sudoku1.ml[25,857+26])
                            Ppat_var "j"
                          expression (/home/zhdf/demo/ml/sudoku1.ml[25,857+30]../home/zhdf/demo/ml/sudoku1.ml[25,857+40])
                            Pexp_apply
                            expression (/home/zhdf/demo/ml/sudoku1.ml[25,857+30]../home/zhdf/demo/ml/sudoku1.ml[25,857+40])
                              Pexp_ident "Array.get"
                            [
                              <label> ""
                                expression (/home/zhdf/demo/ml/sudoku1.ml[25,857+29]../home/zhdf/demo/ml/sudoku1.ml[25,857+30])
                                  Pexp_ident "b"
                              <label> ""
                                expression (/home/zhdf/demo/ml/sudoku1.ml[25,857+34]../home/zhdf/demo/ml/sudoku1.ml[25,857+39])
                                  Pexp_apply
                                  expression (/home/zhdf/demo/ml/sudoku1.ml[25,857+34]../home/zhdf/demo/ml/sudoku1.ml[25,857+35])
                                    Pexp_ident "+"
                                  [
                                    <label> ""
                                      expression (/home/zhdf/demo/ml/sudoku1.ml[25,857+32]../home/zhdf/demo/ml/sudoku1.ml[25,857+33])
                                        Pexp_ident "i"
                                    <label> ""
                                      expression (/home/zhdf/demo/ml/sudoku1.ml[25,857+37]../home/zhdf/demo/ml/sudoku1.ml[25,857+39])
                                        Pexp_apply
                                        expression (/home/zhdf/demo/ml/sudoku1.ml[25,857+37]../home/zhdf/demo/ml/sudoku1.ml[25,857+38])
                                          Pexp_ident "*"
                                        [
                                          <label> ""
                                            expression (/home/zhdf/demo/ml/sudoku1.ml[25,857+36]../home/zhdf/demo/ml/sudoku1.ml[25,857+37])
                                              Pexp_ident "j"
                                          <label> ""
                                            expression (/home/zhdf/demo/ml/sudoku1.ml[25,857+38]../home/zhdf/demo/ml/sudoku1.ml[25,857+39])
                                              Pexp_constant Const_int 9
                                        ]
                                  ]
                            ]
                      ]
                ]
          ]
    ]
]

[INF enr_ast] A different parser than Ocaml's default should be used to avoid inaccuracy for the location of multiple application (25,30-40).
[INF enr_ast] A different parser than Ocaml's default should be used to avoid inaccuracy for the location of multiple application (25,34-39).
[INF enr_ast] A different parser than Ocaml's default should be used to avoid inaccuracy for the location of multiple application (25,37-39).
[DBG env] Adding field contents
[DBG typing] Type structure in env:
               Values: !: (Pervasives.ref r29 -> r29);
               &&: (bool -> (bool -> bool)); &: (bool -> (bool -> bool));
               !=: (s29 -> (s29 -> bool)); **: (float -> (float -> float));
               +: (int -> (int -> int)); *.: (float -> (float -> float));
               -: (int -> (int -> int)); /: (int -> (int -> int));
               -.: (float -> (float -> float));
               +.: (float -> (float -> float)); *: (int -> (int -> int));
               <: (w29 -> (w29 -> bool));
               :=: (Pervasives.ref t29 -> (t29 -> unit));
               =: (m30 -> (m30 -> bool)); <>: (u29 -> (u29 -> bool));
               >=: (j30 -> (j30 -> bool)); >: (y29 -> (y29 -> bool));
               ==: (x29 -> (x29 -> bool)); <=: (v29 -> (v29 -> bool));
               /.: (float -> (float -> float));
               ^: (string -> (string -> string)); abs: (int -> int);
               ^^: (format6 b30 c30 d30 e30 f30 g30 -> (format6 g30 c30 d30 f30 h30 i30 -> format6 b30 c30 d30 e30 h30 i30));
               acos: (float -> float); asr: (int -> (int -> int));
               at_exit: ((unit -> unit) -> unit); asin: (float -> float);
               abs_float: (float -> float);
               atan2: (float -> (float -> float));
               bool_of_string: (string -> bool);
               classify_float: (float -> Pervasives.fpclass);
               char_of_int: (int -> char); ceil: (float -> float);
               atan: (float -> float);
               @: (list a30 -> (list a30 -> list a30));
               close_in_noerr: (Pervasives.in_channel -> unit);
               close_out_noerr: (Pervasives.out_channel -> unit);
               close_out: (Pervasives.out_channel -> unit);
               cos: (float -> float); cosh: (float -> float);
               compare: (k30 -> (k30 -> int));
               decr: (Pervasives.ref int -> unit); epsilon_float: float;
               do_at_exit: (unit -> unit); create: (unit -> board);
               failwith: (string -> a31); exp: (float -> float);
               float_of_int: (int -> float); float: (int -> float);
               floor: (float -> float);
               flush: (Pervasives.out_channel -> unit);
               frexp: (float -> (float , int));
               format_of_string: (format6 n30 o30 p30 q30 r30 s30 -> format6 n30 o30 p30 q30 r30 s30);
               flush_all: (unit -> unit); float_of_string: (string -> float);
               exit: (int -> l30); ignore: (v30 -> unit); infinity: float;
               incr: (Pervasives.ref int -> unit);
               in_channel_length: (Pervasives.in_channel -> int);
               input_byte: (Pervasives.in_channel -> int);
               input_binary_int: (Pervasives.in_channel -> int);
               input: (Pervasives.in_channel -> (string -> (int -> (int -> int))));
               input_line: (Pervasives.in_channel -> string);
               int_fold: ((int , int) -> (x30 -> ((int -> (x30 -> x30)) -> x30)));
               input_value: (Pervasives.in_channel -> w30);
               int_of_float: (float -> int); int_of_string: (string -> int);
               int_of_char: (char -> int); land: (int -> (int -> int));
               log: (float -> float); lnot: (int -> int);
               ldexp: (float -> (int -> float)); lor: (int -> (int -> int));
               lsl: (int -> (int -> int)); log10: (float -> float);
               invalid_arg: (string -> y30);
               input_char: (Pervasives.in_channel -> char);
               fst: ((t30 , u30) -> t30);
               close_in: (Pervasives.in_channel -> unit);
               lxor: (int -> (int -> int)); max_float: float;
               max: (c31 -> (c31 -> c31)); min: (b31 -> (b31 -> b31));
               mod: (int -> (int -> int)); min_int: int; min_float: float;
               max_int: int; modf: (float -> (float , float));
               neg_infinity: float; nan: float;
               open_in: (string -> Pervasives.in_channel);
               open_in_bin: (string -> Pervasives.in_channel);
               not: (bool -> bool);
               open_out: (string -> Pervasives.out_channel);
               or: (bool -> (bool -> bool));
               open_out_gen: (list Pervasives.open_flag -> (int -> (string -> Pervasives.out_channel)));
               open_out_bin: (string -> Pervasives.out_channel);
               output: (Pervasives.out_channel -> (string -> (int -> (int -> unit))));
               output_byte: (Pervasives.out_channel -> (int -> unit));
               output_binary_int: (Pervasives.out_channel -> (int -> unit));
               out_channel_length: (Pervasives.out_channel -> int);
               open_in_gen: (list Pervasives.open_flag -> (int -> (string -> Pervasives.in_channel)));
               mod_float: (float -> (float -> float));
               output_string: (Pervasives.out_channel -> (string -> unit));
               output_value: (Pervasives.out_channel -> (d31 -> unit));
               pos_out: (Pervasives.out_channel -> int);
               pos_in: (Pervasives.in_channel -> int);
               prerr_char: (char -> unit); prerr_float: (float -> unit);
               prerr_int: (int -> unit); prerr_endline: (string -> unit);
               pred: (int -> int); prerr_string: (string -> unit);
               print_float: (float -> unit); print_endline: (string -> unit);
               print_char: (char -> unit); print_newline: (unit -> unit);
               raise: (exn -> e31); print_string: (string -> unit);
               print_int: (int -> unit); read_int: (unit -> int);
               really_input: (Pervasives.in_channel -> (string -> (int -> (int -> unit))));
               read_line: (unit -> string);
               seek_in: (Pervasives.in_channel -> (int -> unit));
               ref: (f31 -> Pervasives.ref f31); read_float: (unit -> float);
               prerr_newline: (unit -> unit);
               set_binary_mode_out: (Pervasives.out_channel -> (bool -> unit));
               set_binary_mode_in: (Pervasives.in_channel -> (bool -> unit));
               sinh: (float -> float); sin: (float -> float);
               sqrt: (float -> float); stdin: Pervasives.in_channel;
               stderr: Pervasives.out_channel;
               string_fold: (string -> (j31 -> ((char -> (j31 -> j31)) -> j31)));
               stdout: Pervasives.out_channel; snd: ((g31 , h31) -> h31);
               string_of_bool: (bool -> string);
               string_of_float: (float -> string);
               string_of_int: (int -> string); tan: (float -> float);
               succ: (int -> int);
               string_of_format: (format6 k31 l31 m31 n31 o31 p31 -> string);
               truncate: (float -> int);
               unsafe_really_input: (Pervasives.in_channel -> (string -> (int -> (int -> unit))));
               ||: (bool -> (bool -> bool)); ~-.: (float -> float);
               ~-: (int -> int); valid_float_lexem: (string -> string);
               tanh: (float -> float);
               string_foldi: (string -> (i31 -> ((char -> (i31 -> i31)) -> (int -> i31))));
               seek_out: (Pervasives.out_channel -> (int -> unit));
               output_char: (Pervasives.out_channel -> (char -> unit));
               lsr: (int -> (int -> int)); 
               Types: type (q31) array = <abstr>;
               type () bool = | false | true ; type () board = array int;
               type () char = <abstr>;
               type () change_type = | FillSquare of int * int | PlaceValue of rectangle * int ;
               type () float = <abstr>;
               type (r31, s31, t31) format = Pervasives.format4 r31 s31 t31 t31;
               type (y31, a32, b32, c32, d32, e32) format6 = <abstr>;
               type () int = <abstr>; type () in_channel = <abstr>;
               type () fpclass = | FP_infinite | FP_nan | FP_normal | FP_subnormal | FP_zero ;
               type (u31, v31, w31, x31) format4 = format6 u31 v31 w31 w31 w31 x31;
               type () exn = ; type () int64 = <abstr>;
               type (g32) list = | :: of g32 * list g32 | [] ;
               type (f32) lazy_t = <abstr>;
               type (i32) option = | None | Some of i32 ;
               type () open_flag = | Open_append | Open_binary | Open_creat | Open_excl | Open_nonblock | Open_rdonly | Open_text | Open_trunc | Open_wronly ;
               type () nativeint = <abstr>;
               type () rectangle = (int , int , int , int);
               type () string = <abstr>; type () unit = | () ;
               type (h32) ref = {contents -> Mutableh32; };
               type () out_channel = <abstr>; type () int32 = <abstr>; 
[DBG generate] for pattern at 25,8-12 bget
  (bound: {bget -> j32; }, ty: j32, cs: {})
[DBG generate] for pattern at 25,13-22 b : board
  (bound: {b -> l32; }, ty: m32,
   cs: {n32 =25,13-22= l32; m32 =25,13-22= o32; o32 =25,16-21= board;
        n32 =25,16-21= board; })
[DBG generate] for pattern at 25,23-24 i
  (bound: {i -> q32; }, ty: q32, cs: {})
[DBG generate] for pattern at 25,25-26 j
  (bound: {j -> s32; }, ty: s32, cs: {})
[DBG generate] for_expr at 25,30-40 Array.get: a33 -
  {(array c33 -> (int -> c33)) =Array.get= b33; b33 =25,30-40= a33; }
[DBG generate] for_expr at 25,29-30 b: d33 -
  {e33 =25,14-15= l32; d33 =25,29-30= e33; }
[DBG generate] for_expr at 25,30-30 Array.get~b: w32 -
  {(array c33 -> (int -> c33)) =Array.get= b33; e33 =25,14-15= l32;
   d33 =25,29-30= e33; d33 =25,30-30= x32; a33 =25,30-30= (x32 -> y32);
   w32 =25,30-30= y32; b33 =25,30-40= a33; }
[DBG generate] for_expr at 25,34-35 (+): l33 -
  {(int -> (int -> int)) =Pervasives.(+)= m33; m33 =25,34-35= l33; }
[DBG generate] for_expr at 25,32-33 i: n33 -
  {o33 =25,23-24= q32; n33 =25,32-33= o33; }
[DBG generate] for_expr at 25,34-33 (+)~i: i33 -
  {(int -> (int -> int)) =Pervasives.(+)= m33; o33 =25,23-24= q32;
   n33 =25,32-33= o33; n33 =25,34-33= j33; l33 =25,34-33= (j33 -> k33);
   i33 =25,34-33= k33; m33 =25,34-35= l33; }
[DBG generate] for_expr at 25,37-38 (*): v33 -
  {(int -> (int -> int)) =Pervasives.(*)= w33; w33 =25,37-38= v33; }
[DBG generate] for_expr at 25,36-37 j: x33 -
  {y33 =25,25-26= s32; x33 =25,36-37= y33; }
[DBG generate] for_expr at 25,37-37 (*)~j: s33 -
  {(int -> (int -> int)) =Pervasives.(*)= w33; y33 =25,25-26= s32;
   x33 =25,36-37= y33; x33 =25,37-37= t33; v33 =25,37-37= (t33 -> u33);
   s33 =25,37-37= u33; w33 =25,37-38= v33; }
[DBG generate] for_expr at 25,38-39 9: a34 - {int =25,38-39= a34; }
[DBG generate] for_expr at 25,37-39 j * 9: p33 -
  {(int -> (int -> int)) =Pervasives.(*)= w33; y33 =25,25-26= s32;
   x33 =25,36-37= y33; x33 =25,37-37= t33; v33 =25,37-37= (t33 -> u33);
   s33 =25,37-37= u33; w33 =25,37-38= v33; a34 =25,37-39= q33;
   s33 =25,37-39= (q33 -> r33); p33 =25,37-39= r33; int =25,38-39= a34; }
[DBG generate] for_expr at 25,34-39 i + j * 9: f33 -
  {(int -> (int -> int)) =Pervasives.(*)= w33;
   (int -> (int -> int)) =Pervasives.(+)= m33; o33 =25,23-24= q32;
   y33 =25,25-26= s32; n33 =25,32-33= o33; n33 =25,34-33= j33;
   l33 =25,34-33= (j33 -> k33); i33 =25,34-33= k33; m33 =25,34-35= l33;
   p33 =25,34-39= g33; i33 =25,34-39= (g33 -> h33); f33 =25,34-39= h33;
   x33 =25,36-37= y33; x33 =25,37-37= t33; v33 =25,37-37= (t33 -> u33);
   s33 =25,37-37= u33; w33 =25,37-38= v33; a34 =25,37-39= q33;
   s33 =25,37-39= (q33 -> r33); p33 =25,37-39= r33; int =25,38-39= a34; }
[DBG generate] for_expr at 25,30-39 Array.get~b~i + j * 9: t32 -
  {(array c33 -> (int -> c33)) =Array.get= b33;
   (int -> (int -> int)) =Pervasives.(*)= w33;
   (int -> (int -> int)) =Pervasives.(+)= m33; e33 =25,14-15= l32;
   o33 =25,23-24= q32; y33 =25,25-26= s32; d33 =25,29-30= e33;
   d33 =25,30-30= x32; a33 =25,30-30= (x32 -> y32); w32 =25,30-30= y32;
   f33 =25,30-39= u32; w32 =25,30-39= (u32 -> v32); t32 =25,30-39= v32;
   b33 =25,30-40= a33; n33 =25,32-33= o33; n33 =25,34-33= j33;
   l33 =25,34-33= (j33 -> k33); i33 =25,34-33= k33; m33 =25,34-35= l33;
   p33 =25,34-39= g33; i33 =25,34-39= (g33 -> h33); f33 =25,34-39= h33;
   x33 =25,36-37= y33; x33 =25,37-37= t33; v33 =25,37-37= (t33 -> u33);
   s33 =25,37-37= u33; w33 =25,37-38= v33; a34 =25,37-39= q33;
   s33 =25,37-39= (q33 -> r33); p33 =25,37-39= r33; int =25,38-39= a34; }
[DBG generate] for_expr at 25,25-40 function j -> Array.get~b~i + j * 9:
  r32 -
  {(array c33 -> (int -> c33)) =Array.get= b33;
   (int -> (int -> int)) =Pervasives.(*)= w33;
   (int -> (int -> int)) =Pervasives.(+)= m33; e33 =25,14-15= l32;
   o33 =25,23-24= q32; y33 =25,25-26= s32; e34 =25,25-40= b34;
   e34 =25,25-40= t32; d34 =25,25-40= c34; d34 =25,25-40= s32;
   r32 =25,25-40= (d34 -> e34); d33 =25,29-30= e33; d33 =25,30-30= x32;
   a33 =25,30-30= (x32 -> y32); w32 =25,30-30= y32; f33 =25,30-39= u32;
   w32 =25,30-39= (u32 -> v32); t32 =25,30-39= v32; b33 =25,30-40= a33;
   n33 =25,32-33= o33; n33 =25,34-33= j33; l33 =25,34-33= (j33 -> k33);
   i33 =25,34-33= k33; m33 =25,34-35= l33; p33 =25,34-39= g33;
   i33 =25,34-39= (g33 -> h33); f33 =25,34-39= h33; x33 =25,36-37= y33;
   x33 =25,37-37= t33; v33 =25,37-37= (t33 -> u33); s33 =25,37-37= u33;
   w33 =25,37-38= v33; a34 =25,37-39= q33; s33 =25,37-39= (q33 -> r33);
   p33 =25,37-39= r33; int =25,38-39= a34; }
[DBG generate] for_expr at 25,23-40
  function i -> function j -> Array.get~b~i + j * 9: p32 -
  {(array c33 -> (int -> c33)) =Array.get= b33;
   (int -> (int -> int)) =Pervasives.(*)= w33;
   (int -> (int -> int)) =Pervasives.(+)= m33; e33 =25,14-15= l32;
   o33 =25,23-24= q32; i34 =25,23-40= f34; i34 =25,23-40= r32;
   h34 =25,23-40= g34; h34 =25,23-40= q32; p32 =25,23-40= (h34 -> i34);
   y33 =25,25-26= s32; e34 =25,25-40= b34; e34 =25,25-40= t32;
   d34 =25,25-40= c34; d34 =25,25-40= s32; r32 =25,25-40= (d34 -> e34);
   d33 =25,29-30= e33; d33 =25,30-30= x32; a33 =25,30-30= (x32 -> y32);
   w32 =25,30-30= y32; f33 =25,30-39= u32; w32 =25,30-39= (u32 -> v32);
   t32 =25,30-39= v32; b33 =25,30-40= a33; n33 =25,32-33= o33;
   n33 =25,34-33= j33; l33 =25,34-33= (j33 -> k33); i33 =25,34-33= k33;
   m33 =25,34-35= l33; p33 =25,34-39= g33; i33 =25,34-39= (g33 -> h33);
   f33 =25,34-39= h33; x33 =25,36-37= y33; x33 =25,37-37= t33;
   v33 =25,37-37= (t33 -> u33); s33 =25,37-37= u33; w33 =25,37-38= v33;
   a34 =25,37-39= q33; s33 =25,37-39= (q33 -> r33); p33 =25,37-39= r33;
   int =25,38-39= a34; }
[DBG generate] for_expr at 25,13-40
  function b : board -> function i -> function j -> Array.get~b~i + j * 9:
  k32 -
  {(array c33 -> (int -> c33)) =Array.get= b33;
   (int -> (int -> int)) =Pervasives.(*)= w33;
   (int -> (int -> int)) =Pervasives.(+)= m33; n32 =25,13-22= l32;
   m32 =25,13-22= o32; m34 =25,13-40= j34; m34 =25,13-40= p32;
   l34 =25,13-40= k34; l34 =25,13-40= m32; k32 =25,13-40= (l34 -> m34);
   e33 =25,14-15= l32; o32 =25,16-21= board; n32 =25,16-21= board;
   o33 =25,23-24= q32; i34 =25,23-40= f34; i34 =25,23-40= r32;
   h34 =25,23-40= g34; h34 =25,23-40= q32; p32 =25,23-40= (h34 -> i34);
   y33 =25,25-26= s32; e34 =25,25-40= b34; e34 =25,25-40= t32;
   d34 =25,25-40= c34; d34 =25,25-40= s32; r32 =25,25-40= (d34 -> e34);
   d33 =25,29-30= e33; d33 =25,30-30= x32; a33 =25,30-30= (x32 -> y32);
   w32 =25,30-30= y32; f33 =25,30-39= u32; w32 =25,30-39= (u32 -> v32);
   t32 =25,30-39= v32; b33 =25,30-40= a33; n33 =25,32-33= o33;
   n33 =25,34-33= j33; l33 =25,34-33= (j33 -> k33); i33 =25,34-33= k33;
   m33 =25,34-35= l33; p33 =25,34-39= g33; i33 =25,34-39= (g33 -> h33);
   f33 =25,34-39= h33; x33 =25,36-37= y33; x33 =25,37-37= t33;
   v33 =25,37-37= (t33 -> u33); s33 =25,37-37= u33; w33 =25,37-38= v33;
   a34 =25,37-39= q33; s33 =25,37-39= (q33 -> r33); p33 =25,37-39= r33;
   int =25,38-39= a34; }
[DBG generate] for_structure_item at 25,4-40
  let bget =
      function b : board -> function i -> function j -> Array.get~b~i + j * 9:
  {(array c33 -> (int -> c33)) =Array.get= b33;
   (int -> (int -> int)) =Pervasives.(*)= w33;
   (int -> (int -> int)) =Pervasives.(+)= m33; j32 =25,4-40= k32;
   n32 =25,13-22= l32; m32 =25,13-22= o32; m34 =25,13-40= j34;
   m34 =25,13-40= p32; l34 =25,13-40= k34; l34 =25,13-40= m32;
   k32 =25,13-40= (l34 -> m34); e33 =25,14-15= l32; o32 =25,16-21= board;
   n32 =25,16-21= board; o33 =25,23-24= q32; i34 =25,23-40= f34;
   i34 =25,23-40= r32; h34 =25,23-40= g34; h34 =25,23-40= q32;
   p32 =25,23-40= (h34 -> i34); y33 =25,25-26= s32; e34 =25,25-40= b34;
   e34 =25,25-40= t32; d34 =25,25-40= c34; d34 =25,25-40= s32;
   r32 =25,25-40= (d34 -> e34); d33 =25,29-30= e33; d33 =25,30-30= x32;
   a33 =25,30-30= (x32 -> y32); w32 =25,30-30= y32; f33 =25,30-39= u32;
   w32 =25,30-39= (u32 -> v32); t32 =25,30-39= v32; b33 =25,30-40= a33;
   n33 =25,32-33= o33; n33 =25,34-33= j33; l33 =25,34-33= (j33 -> k33);
   i33 =25,34-33= k33; m33 =25,34-35= l33; p33 =25,34-39= g33;
   i33 =25,34-39= (g33 -> h33); f33 =25,34-39= h33; x33 =25,36-37= y33;
   x33 =25,37-37= t33; v33 =25,37-37= (t33 -> u33); s33 =25,37-37= u33;
   w33 =25,37-38= v33; a34 =25,37-39= q33; s33 =25,37-39= (q33 -> r33);
   p33 =25,37-39= r33; int =25,38-39= a34; }
[DBG generate] Generated for strit, resulting env:
Values: bget: j32; 
  Types: 
[INF typing] 51 constraints generated.
[DBG typing] generated constraints:
               {(array c33 -> (int -> c33)) =Array.get= b33;
                (int -> (int -> int)) =Pervasives.(*)= w33;
                (int -> (int -> int)) =Pervasives.(+)= m33;
                j32 =25,4-40= k32; n32 =25,13-22= l32; m32 =25,13-22= o32;
                m34 =25,13-40= j34; m34 =25,13-40= p32; l34 =25,13-40= k34;
                l34 =25,13-40= m32; k32 =25,13-40= (l34 -> m34);
                e33 =25,14-15= l32; o32 =25,16-21= board;
                n32 =25,16-21= board; o33 =25,23-24= q32; i34 =25,23-40= f34;
                i34 =25,23-40= r32; h34 =25,23-40= g34; h34 =25,23-40= q32;
                p32 =25,23-40= (h34 -> i34); y33 =25,25-26= s32;
                e34 =25,25-40= b34; e34 =25,25-40= t32; d34 =25,25-40= c34;
                d34 =25,25-40= s32; r32 =25,25-40= (d34 -> e34);
                d33 =25,29-30= e33; d33 =25,30-30= x32;
                a33 =25,30-30= (x32 -> y32); w32 =25,30-30= y32;
                f33 =25,30-39= u32; w32 =25,30-39= (u32 -> v32);
                t32 =25,30-39= v32; b33 =25,30-40= a33; n33 =25,32-33= o33;
                n33 =25,34-33= j33; l33 =25,34-33= (j33 -> k33);
                i33 =25,34-33= k33; m33 =25,34-35= l33; p33 =25,34-39= g33;
                i33 =25,34-39= (g33 -> h33); f33 =25,34-39= h33;
                x33 =25,36-37= y33; x33 =25,37-37= t33;
                v33 =25,37-37= (t33 -> u33); s33 =25,37-37= u33;
                w33 =25,37-38= v33; a34 =25,37-39= q33;
                s33 =25,37-39= (q33 -> r33); p33 =25,37-39= r33;
                int =25,38-39= a34; }
[DBG typing] Unifying
               {(array c33 -> (int -> c33)) =Array.get= b33;
                (int -> (int -> int)) =Pervasives.(*)= w33;
                (int -> (int -> int)) =Pervasives.(+)= m33;
                j32 =25,4-40= k32; n32 =25,13-22= l32; m32 =25,13-22= o32;
                m34 =25,13-40= j34; m34 =25,13-40= p32; l34 =25,13-40= k34;
                l34 =25,13-40= m32; k32 =25,13-40= (l34 -> m34);
                e33 =25,14-15= l32; o32 =25,16-21= board;
                n32 =25,16-21= board; o33 =25,23-24= q32; i34 =25,23-40= f34;
                i34 =25,23-40= r32; h34 =25,23-40= g34; h34 =25,23-40= q32;
                p32 =25,23-40= (h34 -> i34); y33 =25,25-26= s32;
                e34 =25,25-40= b34; e34 =25,25-40= t32; d34 =25,25-40= c34;
                d34 =25,25-40= s32; r32 =25,25-40= (d34 -> e34);
                d33 =25,29-30= e33; d33 =25,30-30= x32;
                a33 =25,30-30= (x32 -> y32); w32 =25,30-30= y32;
                f33 =25,30-39= u32; w32 =25,30-39= (u32 -> v32);
                t32 =25,30-39= v32; b33 =25,30-40= a33; n33 =25,32-33= o33;
                n33 =25,34-33= j33; l33 =25,34-33= (j33 -> k33);
                i33 =25,34-33= k33; m33 =25,34-35= l33; p33 =25,34-39= g33;
                i33 =25,34-39= (g33 -> h33); f33 =25,34-39= h33;
                x33 =25,36-37= y33; x33 =25,37-37= t33;
                v33 =25,37-37= (t33 -> u33); s33 =25,37-37= u33;
                w33 =25,37-38= v33; a34 =25,37-39= q33;
                s33 =25,37-39= (q33 -> r33); p33 =25,37-39= r33;
                int =25,38-39= a34; }
[DBG typing] switching X, var: b33 = (array c33 -> (int -> c33))
[DBG typing] TyVar b33, (array c33 -> (int -> c33)): adding b33 -> (array c33 -> (int -> c33)) to E
[DBG typing] switching X, var: w33 = (int -> (int -> int))
[DBG typing] TyVar w33, (int -> (int -> int)): adding w33 -> (int -> (int -> int)) to E
[DBG typing] switching X, var: m33 = (int -> (int -> int))
[DBG typing] TyVar m33, (int -> (int -> int)): adding m33 -> (int -> (int -> int)) to E
[DBG typing] TyVar j32, k32: adding j32 -> k32 to E
[DBG typing] TyVar n32, l32: adding n32 -> l32 to E
[DBG typing] TyVar m32, o32: adding m32 -> o32 to E
[DBG typing] TyVar m34, j34: adding m34 -> j34 to E
[DBG typing] TyVar m34, j34: --> j34 = p32 (lookup)
[DBG typing] TyVar l34, k34: adding l34 -> k34 to E
[DBG typing] TyVar l34, k34: --> k34 = m32 (lookup)
[DBG typing] TyVar k34, m32: adding k34 -> m32 to E
[DBG typing] TyVar j34, p32: adding j34 -> p32 to E
[DBG typing] TyVar k32, (l34 -> m34): adding k32 -> (l34 -> m34) to E
[DBG typing] TyVar e33, l32: adding e33 -> l32 to E
[DBG typing] TyVar o32, array int: adding o32 -> board to E
[DBG typing] TyVar n32, l32: --> l32 = board (lookup)
[DBG typing] TyVar l32, array int: adding l32 -> board to E
[DBG typing] TyVar o33, q32: adding o33 -> q32 to E
[DBG typing] TyVar i34, f34: adding i34 -> f34 to E
[DBG typing] TyVar i34, f34: --> f34 = r32 (lookup)
[DBG typing] TyVar h34, g34: adding h34 -> g34 to E
[DBG typing] TyVar h34, g34: --> g34 = q32 (lookup)
[DBG typing] TyVar g34, q32: adding g34 -> q32 to E
[DBG typing] TyVar f34, r32: adding f34 -> r32 to E
[DBG typing] TyVar p32, (h34 -> i34): adding p32 -> (h34 -> i34) to E
[DBG typing] TyVar y33, s32: adding y33 -> s32 to E
[DBG typing] TyVar e34, b34: adding e34 -> b34 to E
[DBG typing] TyVar e34, b34: --> b34 = t32 (lookup)
[DBG typing] TyVar d34, c34: adding d34 -> c34 to E
[DBG typing] TyVar d34, c34: --> c34 = s32 (lookup)
[DBG typing] TyVar c34, s32: adding c34 -> s32 to E
[DBG typing] TyVar b34, t32: adding b34 -> t32 to E
[DBG typing] TyVar r32, (d34 -> e34): adding r32 -> (d34 -> e34) to E
[DBG typing] TyVar d33, e33: adding d33 -> e33 to E
[DBG typing] TyVar d33, e33: --> e33 = x32 (lookup)
[DBG typing] TyVar e33, l32: --> l32 = x32 (lookup)
[DBG typing] TyVar l32, board: --> board = x32 (lookup)
[DBG typing] switching X, var: x32 = board
[DBG typing] TyVar x32, array int: adding x32 -> board to E
[DBG typing] TyVar a33, (x32 -> y32): adding a33 -> (x32 -> y32) to E
[DBG typing] TyVar w32, y32: adding w32 -> y32 to E
[DBG typing] TyVar f33, u32: adding f33 -> u32 to E
[DBG typing] TyVar w32, y32: --> y32 = (u32 -> v32) (lookup)
[DBG typing] TyVar y32, (u32 -> v32): adding y32 -> (u32 -> v32) to E
[DBG typing] TyVar t32, v32: adding t32 -> v32 to E
[DBG typing] TyVar b33, (array c33 -> (int -> c33)): --> (array c33 -> (int -> c33)) = a33 (lookup)
[DBG typing] switching X, var: a33 = (array c33 -> (int -> c33))
[DBG typing] TyVar a33, (x32 -> y32): --> (x32 -> y32) = (array c33 -> (int -> c33)) (lookup)
[DBG typing] Unifying arrows (x32 -> y32), (array c33 -> (int -> c33)) --> x32 = array c33, y32 = (int -> c33)
[DBG typing] TyVar y32, (u32 -> v32): --> (u32 -> v32) = (int -> c33) (lookup)
[DBG typing] Unifying arrows (u32 -> v32), (int -> c33) --> u32 = int, v32 = c33
[DBG typing] TyVar v32, c33: adding v32 -> c33 to E
[DBG typing] TyVar u32, int: adding u32 -> int to E
[DBG typing] TyVar x32, board: --> board = array c33 (lookup)
[DBG typing] Ctors array int, array c33 --> {int = c33; }
[DBG typing] switching X, var: c33 = int
[DBG typing] TyVar c33, int: adding c33 -> int to E
[DBG typing] TyVar n33, o33: adding n33 -> o33 to E
[DBG typing] TyVar n33, o33: --> o33 = j33 (lookup)
[DBG typing] TyVar o33, q32: --> q32 = j33 (lookup)
[DBG typing] TyVar q32, j33: adding q32 -> j33 to E
[DBG typing] TyVar l33, (j33 -> k33): adding l33 -> (j33 -> k33) to E
[DBG typing] TyVar i33, k33: adding i33 -> k33 to E
[DBG typing] TyVar m33, (int -> (int -> int)): --> (int -> (int -> int)) = l33 (lookup)
[DBG typing] switching X, var: l33 = (int -> (int -> int))
[DBG typing] TyVar l33, (j33 -> k33): --> (j33 -> k33) = (int -> (int -> int)) (lookup)
[DBG typing] Unifying arrows (j33 -> k33), (int -> (int -> int)) --> j33 = int, k33 = (int -> int)
[DBG typing] TyVar k33, (int -> int): adding k33 -> (int -> int) to E
[DBG typing] TyVar j33, int: adding j33 -> int to E
[DBG typing] TyVar p33, g33: adding p33 -> g33 to E
[DBG typing] TyVar i33, k33: --> k33 = (g33 -> h33) (lookup)
[DBG typing] TyVar k33, (int -> int): --> (int -> int) = (g33 -> h33) (lookup)
[DBG typing] Unifying arrows (int -> int), (g33 -> h33) --> int = g33, int = h33
[DBG typing] switching X, var: h33 = int
[DBG typing] switching X, var: g33 = int
[DBG typing] TyVar h33, int: adding h33 -> int to E
[DBG typing] TyVar g33, int: adding g33 -> int to E
[DBG typing] TyVar f33, u32: --> u32 = h33 (lookup)
[DBG typing] TyVar u32, int: --> int = h33 (lookup)
[DBG typing] switching X, var: h33 = int
[DBG typing] TyVar h33, int: --> int = int (lookup)
[DBG typing] Ctors int, int --> {}
[DBG typing] TyVar x33, y33: adding x33 -> y33 to E
[DBG typing] TyVar x33, y33: --> y33 = t33 (lookup)
[DBG typing] TyVar y33, s32: --> s32 = t33 (lookup)
[DBG typing] TyVar s32, t33: adding s32 -> t33 to E
[DBG typing] TyVar v33, (t33 -> u33): adding v33 -> (t33 -> u33) to E
[DBG typing] TyVar s33, u33: adding s33 -> u33 to E
[DBG typing] TyVar w33, (int -> (int -> int)): --> (int -> (int -> int)) = v33 (lookup)
[DBG typing] switching X, var: v33 = (int -> (int -> int))
[DBG typing] TyVar v33, (t33 -> u33): --> (t33 -> u33) = (int -> (int -> int)) (lookup)
[DBG typing] Unifying arrows (t33 -> u33), (int -> (int -> int)) --> t33 = int, u33 = (int -> int)
[DBG typing] TyVar u33, (int -> int): adding u33 -> (int -> int) to E
[DBG typing] TyVar t33, int: adding t33 -> int to E
[DBG typing] TyVar a34, q33: adding a34 -> q33 to E
[DBG typing] TyVar s33, u33: --> u33 = (q33 -> r33) (lookup)
[DBG typing] TyVar u33, (int -> int): --> (int -> int) = (q33 -> r33) (lookup)
[DBG typing] Unifying arrows (int -> int), (q33 -> r33) --> int = q33, int = r33
[DBG typing] switching X, var: r33 = int
[DBG typing] switching X, var: q33 = int
[DBG typing] TyVar r33, int: adding r33 -> int to E
[DBG typing] TyVar q33, int: adding q33 -> int to E
[DBG typing] TyVar p33, g33: --> g33 = r33 (lookup)
[DBG typing] TyVar g33, int: --> int = r33 (lookup)
[DBG typing] switching X, var: r33 = int
[DBG typing] TyVar r33, int: --> int = int (lookup)
[DBG typing] Ctors int, int --> {}
[DBG typing] switching X, var: a34 = int
[DBG typing] TyVar a34, q33: --> q33 = int (lookup)
[DBG typing] TyVar q33, int: --> int = int (lookup)
[DBG typing] Ctors int, int --> {}
[INF typing] Constraints unified successfully.
[DBG typing] Resulting tyvarsubst:
               m34: (int -> (int -> int)); l34: board; k34: board; j34: (int -> (int -> int)); i34: (int -> int); h34: int; g34: int; f34: (int -> int); e34: int; d34: int; c34: int; b34: int; a34: int; y33: int; x33: int; w33: (int -> (int -> int)); v33: (int -> (int -> int)); u33: (int -> int); t33: int; s33: (int -> int); r33: int; q33: int; p33: int; o33: int; n33: int; m33: (int -> (int -> int)); l33: (int -> (int -> int)); k33: (int -> int); j33: int; i33: (int -> int); h33: int; g33: int; f33: int; e33: board; d33: board; c33: int; b33: (array int -> (int -> int)); a33: (board -> (int -> int)); y32: (int -> int); x32: board; w32: (int -> int); v32: int; u32: int; t32: int; s32: int; r32: (int -> int); q32: int; p32: (int -> (int -> int)); o32: board; n32: board; m32: board; l32: board; k32: (board -> (int -> (int -> int))); j32: (board -> (int -> (int -> int))); 
[DBG coretys] Check array int <= array int
[INF typing] checked annotations
[INF typing] Constraints solved
[INF typing] Succeeded typing structure
  val bget: (board -> (int -> (int -> int))) with substitution
  m34: (int -> (int -> int)); l34: board; k34: board; j34: (int -> (int -> int)); i34: (int -> int); h34: int; g34: int; f34: (int -> int); e34: int; d34: int; c34: int; b34: int; a34: int; y33: int; x33: int; w33: (int -> (int -> int)); v33: (int -> (int -> int)); u33: (int -> int); t33: int; s33: (int -> int); r33: int; q33: int; p33: int; o33: int; n33: int; m33: (int -> (int -> int)); l33: (int -> (int -> int)); k33: (int -> int); j33: int; i33: (int -> int); h33: int; g33: int; f33: int; e33: board; d33: board; c33: int; b33: (array int -> (int -> int)); a33: (board -> (int -> int)); y32: (int -> int); x32: board; w32: (int -> int); v32: int; u32: int; t32: int; s32: int; r32: (int -> int); q32: int; p32: (int -> (int -> int)); o32: board; n32: board; m32: board; l32: board; k32: (board -> (int -> (int -> int))); j32: (board -> (int -> (int -> int))); 
  and env enriched by Values: bget: (board -> (int -> (int -> int))); 
  Types: 
[DBG ast_comp] Succeeded for:  Pstr_value (25,4-40): bget
[INF ast_comp] Success comparing ecaml/ocaml typing
[DBG typing] Conf.load_path: [, /home/zhdf/easyocaml-0.49/ocaml-3.10.2/lib/ocaml]
[DBG enr_ast] Ocaml ast: [
  structure_item (/home/zhdf/demo/ml/sudoku1.ml[26,899+4]../home/zhdf/demo/ml/sudoku1.ml[26,899+47])
    Pstr_value Nonrec
    [
      <def>
        pattern (/home/zhdf/demo/ml/sudoku1.ml[26,899+8]../home/zhdf/demo/ml/sudoku1.ml[26,899+12])
          Ppat_var "bset"
        expression (/home/zhdf/demo/ml/sudoku1.ml[26,899+13]../home/zhdf/demo/ml/sudoku1.ml[26,899+47])
          Pexp_function ""
          None
          [
            <case>
              pattern (/home/zhdf/demo/ml/sudoku1.ml[26,899+13]../home/zhdf/demo/ml/sudoku1.ml[26,899+22])
                Ppat_constraint                pattern (/home/zhdf/demo/ml/sudoku1.ml[26,899+14]../home/zhdf/demo/ml/sudoku1.ml[26,899+15])
                  Ppat_var "b"
                core_type (/home/zhdf/demo/ml/sudoku1.ml[26,899+16]../home/zhdf/demo/ml/sudoku1.ml[26,899+21])
                  Ptyp_constr "board"
                  []
              expression (/home/zhdf/demo/ml/sudoku1.ml[26,899+23]../home/zhdf/demo/ml/sudoku1.ml[26,899+47])
                Pexp_function ""
                None
                [
                  <case>
                    pattern (/home/zhdf/demo/ml/sudoku1.ml[26,899+23]../home/zhdf/demo/ml/sudoku1.ml[26,899+24])
                      Ppat_var "i"
                    expression (/home/zhdf/demo/ml/sudoku1.ml[26,899+25]../home/zhdf/demo/ml/sudoku1.ml[26,899+47])
                      Pexp_function ""
                      None
                      [
                        <case>
                          pattern (/home/zhdf/demo/ml/sudoku1.ml[26,899+25]../home/zhdf/demo/ml/sudoku1.ml[26,899+26])
                            Ppat_var "j"
                          expression (/home/zhdf/demo/ml/sudoku1.ml[26,899+27]../home/zhdf/demo/ml/sudoku1.ml[26,899+47])
                            Pexp_function ""
                            None
                            [
                              <case>
                                pattern (/home/zhdf/demo/ml/sudoku1.ml[26,899+27]../home/zhdf/demo/ml/sudoku1.ml[26,899+28])
                                  Ppat_var "x"
                                expression (/home/zhdf/demo/ml/sudoku1.ml[26,899+43]../home/zhdf/demo/ml/sudoku1.ml[26,899+47])
                                  Pexp_apply
                                  expression (/home/zhdf/demo/ml/sudoku1.ml[26,899+43]../home/zhdf/demo/ml/sudoku1.ml[26,899+47])
                                    Pexp_ident "Array.set"
                                  [
                                    <label> ""
                                      expression (/home/zhdf/demo/ml/sudoku1.ml[26,899+31]../home/zhdf/demo/ml/sudoku1.ml[26,899+32])
                                        Pexp_ident "b"
                                    <label> ""
                                      expression (/home/zhdf/demo/ml/sudoku1.ml[26,899+36]../home/zhdf/demo/ml/sudoku1.ml[26,899+41])
                                        Pexp_apply
                                        expression (/home/zhdf/demo/ml/sudoku1.ml[26,899+36]../home/zhdf/demo/ml/sudoku1.ml[26,899+37])
                                          Pexp_ident "+"
                                        [
                                          <label> ""
                                            expression (/home/zhdf/demo/ml/sudoku1.ml[26,899+34]../home/zhdf/demo/ml/sudoku1.ml[26,899+35])
                                              Pexp_ident "i"
                                          <label> ""
                                            expression (/home/zhdf/demo/ml/sudoku1.ml[26,899+39]../home/zhdf/demo/ml/sudoku1.ml[26,899+41])
                                              Pexp_apply
                                              expression (/home/zhdf/demo/ml/sudoku1.ml[26,899+39]../home/zhdf/demo/ml/sudoku1.ml[26,899+40])
                                                Pexp_ident "*"
                                              [
                                                <label> ""
                                                  expression (/home/zhdf/demo/ml/sudoku1.ml[26,899+38]../home/zhdf/demo/ml/sudoku1.ml[26,899+39])
                                                    Pexp_ident "j"
                                                <label> ""
                                                  expression (/home/zhdf/demo/ml/sudoku1.ml[26,899+40]../home/zhdf/demo/ml/sudoku1.ml[26,899+41])
                                                    Pexp_constant Const_int 9
                                              ]
                                        ]
                                    <label> ""
                                      expression (/home/zhdf/demo/ml/sudoku1.ml[26,899+46]../home/zhdf/demo/ml/sudoku1.ml[26,899+47])
                                        Pexp_ident "x"
                                  ]
                            ]
                      ]
                ]
          ]
    ]
]

[INF enr_ast] A different parser than Ocaml's default should be used to avoid inaccuracy for the location of multiple application (26,43-47).
[INF enr_ast] A different parser than Ocaml's default should be used to avoid inaccuracy for the location of multiple application (26,36-41).
[INF enr_ast] A different parser than Ocaml's default should be used to avoid inaccuracy for the location of multiple application (26,39-41).
[DBG env] Adding field contents
[DBG typing] Type structure in env:
               Values: !: (Pervasives.ref n34 -> n34);
               &&: (bool -> (bool -> bool)); &: (bool -> (bool -> bool));
               !=: (o34 -> (o34 -> bool)); **: (float -> (float -> float));
               +: (int -> (int -> int)); *.: (float -> (float -> float));
               -: (int -> (int -> int)); /: (int -> (int -> int));
               -.: (float -> (float -> float));
               +.: (float -> (float -> float)); *: (int -> (int -> int));
               <: (s34 -> (s34 -> bool));
               :=: (Pervasives.ref p34 -> (p34 -> unit));
               =: (i35 -> (i35 -> bool)); <>: (q34 -> (q34 -> bool));
               >=: (f35 -> (f35 -> bool)); >: (u34 -> (u34 -> bool));
               ==: (t34 -> (t34 -> bool)); <=: (r34 -> (r34 -> bool));
               /.: (float -> (float -> float));
               ^: (string -> (string -> string)); abs: (int -> int);
               ^^: (format6 w34 x34 y34 a35 b35 c35 -> (format6 c35 x34 y34 b35 d35 e35 -> format6 w34 x34 y34 a35 d35 e35));
               acos: (float -> float); asr: (int -> (int -> int));
               at_exit: ((unit -> unit) -> unit); asin: (float -> float);
               abs_float: (float -> float);
               atan2: (float -> (float -> float));
               bget: (board -> (int -> (int -> int)));
               ceil: (float -> float);
               classify_float: (float -> Pervasives.fpclass);
               close_in: (Pervasives.in_channel -> unit);
               char_of_int: (int -> char); bool_of_string: (string -> bool);
               atan: (float -> float);
               @: (list v34 -> (list v34 -> list v34));
               close_out: (Pervasives.out_channel -> unit);
               cos: (float -> float); compare: (g35 -> (g35 -> int));
               close_out_noerr: (Pervasives.out_channel -> unit);
               create: (unit -> board); decr: (Pervasives.ref int -> unit);
               cosh: (float -> float); epsilon_float: float;
               failwith: (string -> v35); exp: (float -> float);
               exit: (int -> h35); float_of_int: (int -> float);
               floor: (float -> float); float_of_string: (string -> float);
               flush_all: (unit -> unit); frexp: (float -> (float , int));
               format_of_string: (format6 j35 k35 l35 m35 n35 o35 -> format6 j35 k35 l35 m35 n35 o35);
               flush: (Pervasives.out_channel -> unit);
               float: (int -> float); do_at_exit: (unit -> unit);
               ignore: (r35 -> unit); infinity: float;
               incr: (Pervasives.ref int -> unit);
               in_channel_length: (Pervasives.in_channel -> int);
               input_byte: (Pervasives.in_channel -> int);
               input_binary_int: (Pervasives.in_channel -> int);
               input: (Pervasives.in_channel -> (string -> (int -> (int -> int))));
               input_line: (Pervasives.in_channel -> string);
               int_fold: ((int , int) -> (t35 -> ((int -> (t35 -> t35)) -> t35)));
               input_value: (Pervasives.in_channel -> s35);
               int_of_float: (float -> int); int_of_string: (string -> int);
               int_of_char: (char -> int); land: (int -> (int -> int));
               log: (float -> float); lnot: (int -> int);
               ldexp: (float -> (int -> float)); lor: (int -> (int -> int));
               lsl: (int -> (int -> int)); log10: (float -> float);
               invalid_arg: (string -> u35);
               input_char: (Pervasives.in_channel -> char);
               fst: ((p35 , q35) -> p35);
               close_in_noerr: (Pervasives.in_channel -> unit);
               lxor: (int -> (int -> int)); max_float: float;
               max: (x35 -> (x35 -> x35)); min: (w35 -> (w35 -> w35));
               mod: (int -> (int -> int)); min_int: int; min_float: float;
               max_int: int; modf: (float -> (float , float));
               neg_infinity: float; nan: float;
               open_in: (string -> Pervasives.in_channel);
               open_in_bin: (string -> Pervasives.in_channel);
               not: (bool -> bool);
               open_out: (string -> Pervasives.out_channel);
               or: (bool -> (bool -> bool));
               open_out_gen: (list Pervasives.open_flag -> (int -> (string -> Pervasives.out_channel)));
               open_out_bin: (string -> Pervasives.out_channel);
               output: (Pervasives.out_channel -> (string -> (int -> (int -> unit))));
               output_byte: (Pervasives.out_channel -> (int -> unit));
               output_binary_int: (Pervasives.out_channel -> (int -> unit));
               out_channel_length: (Pervasives.out_channel -> int);
               open_in_gen: (list Pervasives.open_flag -> (int -> (string -> Pervasives.in_channel)));
               mod_float: (float -> (float -> float));
               output_string: (Pervasives.out_channel -> (string -> unit));
               output_value: (Pervasives.out_channel -> (y35 -> unit));
               pos_out: (Pervasives.out_channel -> int);
               pos_in: (Pervasives.in_channel -> int);
               prerr_char: (char -> unit); prerr_float: (float -> unit);
               prerr_int: (int -> unit); prerr_endline: (string -> unit);
               pred: (int -> int); prerr_string: (string -> unit);
               print_float: (float -> unit); print_endline: (string -> unit);
               print_char: (char -> unit); print_newline: (unit -> unit);
               raise: (exn -> a36); print_string: (string -> unit);
               print_int: (int -> unit); read_int: (unit -> int);
               really_input: (Pervasives.in_channel -> (string -> (int -> (int -> unit))));
               read_line: (unit -> string);
               seek_in: (Pervasives.in_channel -> (int -> unit));
               ref: (b36 -> Pervasives.ref b36); read_float: (unit -> float);
               prerr_newline: (unit -> unit);
               set_binary_mode_out: (Pervasives.out_channel -> (bool -> unit));
               set_binary_mode_in: (Pervasives.in_channel -> (bool -> unit));
               sinh: (float -> float); sin: (float -> float);
               sqrt: (float -> float); stdin: Pervasives.in_channel;
               stderr: Pervasives.out_channel;
               string_fold: (string -> (f36 -> ((char -> (f36 -> f36)) -> f36)));
               stdout: Pervasives.out_channel; snd: ((c36 , d36) -> d36);
               string_of_bool: (bool -> string);
               string_of_float: (float -> string);
               string_of_int: (int -> string); tan: (float -> float);
               succ: (int -> int);
               string_of_format: (format6 g36 h36 i36 j36 k36 l36 -> string);
               truncate: (float -> int);
               unsafe_really_input: (Pervasives.in_channel -> (string -> (int -> (int -> unit))));
               ||: (bool -> (bool -> bool)); ~-.: (float -> float);
               ~-: (int -> int); valid_float_lexem: (string -> string);
               tanh: (float -> float);
               string_foldi: (string -> (e36 -> ((char -> (e36 -> e36)) -> (int -> e36))));
               seek_out: (Pervasives.out_channel -> (int -> unit));
               output_char: (Pervasives.out_channel -> (char -> unit));
               lsr: (int -> (int -> int)); 
               Types: type (m36) array = <abstr>;
               type () bool = | false | true ; type () board = array int;
               type () char = <abstr>;
               type () change_type = | FillSquare of int * int | PlaceValue of rectangle * int ;
               type () float = <abstr>;
               type (n36, o36, p36) format = Pervasives.format4 n36 o36 p36 p36;
               type (u36, v36, w36, x36, y36, a37) format6 = <abstr>;
               type () int = <abstr>; type () in_channel = <abstr>;
               type () fpclass = | FP_infinite | FP_nan | FP_normal | FP_subnormal | FP_zero ;
               type (q36, r36, s36, t36) format4 = format6 q36 r36 s36 s36 s36 t36;
               type () exn = ; type () int64 = <abstr>;
               type (c37) list = | :: of c37 * list c37 | [] ;
               type (b37) lazy_t = <abstr>;
               type (e37) option = | None | Some of e37 ;
               type () open_flag = | Open_append | Open_binary | Open_creat | Open_excl | Open_nonblock | Open_rdonly | Open_text | Open_trunc | Open_wronly ;
               type () nativeint = <abstr>;
               type () rectangle = (int , int , int , int);
               type () string = <abstr>; type () unit = | () ;
               type (d37) ref = {contents -> Mutabled37; };
               type () out_channel = <abstr>; type () int32 = <abstr>; 
[DBG generate] for pattern at 26,8-12 bset
  (bound: {bset -> f37; }, ty: f37, cs: {})
[DBG generate] for pattern at 26,13-22 b : board
  (bound: {b -> h37; }, ty: i37,
   cs: {j37 =26,13-22= h37; i37 =26,13-22= k37; k37 =26,16-21= board;
        j37 =26,16-21= board; })
[DBG generate] for pattern at 26,23-24 i
  (bound: {i -> m37; }, ty: m37, cs: {})
[DBG generate] for pattern at 26,25-26 j
  (bound: {j -> o37; }, ty: o37, cs: {})
[DBG generate] for pattern at 26,27-28 x
  (bound: {x -> q37; }, ty: q37, cs: {})
[DBG generate] for_expr at 26,43-47 Array.set: b38 -
  {(array d38 -> (int -> (d38 -> unit))) =Array.set= c38; c38 =26,43-47= b38;
   }
[DBG generate] for_expr at 26,31-32 b: e38 -
  {f38 =26,14-15= h37; e38 =26,31-32= f38; }
[DBG generate] for_expr at 26,43-32 Array.set~b: x37 -
  {(array d38 -> (int -> (d38 -> unit))) =Array.set= c38; f38 =26,14-15= h37;
   e38 =26,31-32= f38; e38 =26,43-32= y37; b38 =26,43-32= (y37 -> a38);
   x37 =26,43-32= a38; c38 =26,43-47= b38; }
[DBG generate] for_expr at 26,36-37 (+): m38 -
  {(int -> (int -> int)) =Pervasives.(+)= n38; n38 =26,36-37= m38; }
[DBG generate] for_expr at 26,34-35 i: o38 -
  {p38 =26,23-24= m37; o38 =26,34-35= p38; }
[DBG generate] for_expr at 26,36-35 (+)~i: j38 -
  {(int -> (int -> int)) =Pervasives.(+)= n38; p38 =26,23-24= m37;
   o38 =26,34-35= p38; o38 =26,36-35= k38; m38 =26,36-35= (k38 -> l38);
   j38 =26,36-35= l38; n38 =26,36-37= m38; }
[DBG generate] for_expr at 26,39-40 (*): w38 -
  {(int -> (int -> int)) =Pervasives.(*)= x38; x38 =26,39-40= w38; }
[DBG generate] for_expr at 26,38-39 j: y38 -
  {a39 =26,25-26= o37; y38 =26,38-39= a39; }
[DBG generate] for_expr at 26,39-39 (*)~j: t38 -
  {(int -> (int -> int)) =Pervasives.(*)= x38; a39 =26,25-26= o37;
   y38 =26,38-39= a39; y38 =26,39-39= u38; w38 =26,39-39= (u38 -> v38);
   t38 =26,39-39= v38; x38 =26,39-40= w38; }
[DBG generate] for_expr at 26,40-41 9: b39 - {int =26,40-41= b39; }
[DBG generate] for_expr at 26,39-41 j * 9: q38 -
  {(int -> (int -> int)) =Pervasives.(*)= x38; a39 =26,25-26= o37;
   y38 =26,38-39= a39; y38 =26,39-39= u38; w38 =26,39-39= (u38 -> v38);
   t38 =26,39-39= v38; x38 =26,39-40= w38; b39 =26,39-41= r38;
   t38 =26,39-41= (r38 -> s38); q38 =26,39-41= s38; int =26,40-41= b39; }
[DBG generate] for_expr at 26,36-41 i + j * 9: g38 -
  {(int -> (int -> int)) =Pervasives.(*)= x38;
   (int -> (int -> int)) =Pervasives.(+)= n38; p38 =26,23-24= m37;
   a39 =26,25-26= o37; o38 =26,34-35= p38; o38 =26,36-35= k38;
   m38 =26,36-35= (k38 -> l38); j38 =26,36-35= l38; n38 =26,36-37= m38;
   q38 =26,36-41= h38; j38 =26,36-41= (h38 -> i38); g38 =26,36-41= i38;
   y38 =26,38-39= a39; y38 =26,39-39= u38; w38 =26,39-39= (u38 -> v38);
   t38 =26,39-39= v38; x38 =26,39-40= w38; b39 =26,39-41= r38;
   t38 =26,39-41= (r38 -> s38); q38 =26,39-41= s38; int =26,40-41= b39; }
[DBG generate] for_expr at 26,43-41 Array.set~b~i + j * 9: u37 -
  {(array d38 -> (int -> (d38 -> unit))) =Array.set= c38;
   (int -> (int -> int)) =Pervasives.(*)= x38;
   (int -> (int -> int)) =Pervasives.(+)= n38; f38 =26,14-15= h37;
   p38 =26,23-24= m37; a39 =26,25-26= o37; e38 =26,31-32= f38;
   o38 =26,34-35= p38; o38 =26,36-35= k38; m38 =26,36-35= (k38 -> l38);
   j38 =26,36-35= l38; n38 =26,36-37= m38; q38 =26,36-41= h38;
   j38 =26,36-41= (h38 -> i38); g38 =26,36-41= i38; y38 =26,38-39= a39;
   y38 =26,39-39= u38; w38 =26,39-39= (u38 -> v38); t38 =26,39-39= v38;
   x38 =26,39-40= w38; b39 =26,39-41= r38; t38 =26,39-41= (r38 -> s38);
   q38 =26,39-41= s38; int =26,40-41= b39; e38 =26,43-32= y37;
   b38 =26,43-32= (y37 -> a38); x37 =26,43-32= a38; g38 =26,43-41= v37;
   x37 =26,43-41= (v37 -> w37); u37 =26,43-41= w37; c38 =26,43-47= b38; }
[DBG generate] for_expr at 26,46-47 x: c39 -
  {d39 =26,27-28= q37; c39 =26,46-47= d39; }
[DBG generate] for_expr at 26,43-47 Array.set~b~i + j * 9~x: r37 -
  {(array d38 -> (int -> (d38 -> unit))) =Array.set= c38;
   (int -> (int -> int)) =Pervasives.(*)= x38;
   (int -> (int -> int)) =Pervasives.(+)= n38; f38 =26,14-15= h37;
   p38 =26,23-24= m37; a39 =26,25-26= o37; d39 =26,27-28= q37;
   e38 =26,31-32= f38; o38 =26,34-35= p38; o38 =26,36-35= k38;
   m38 =26,36-35= (k38 -> l38); j38 =26,36-35= l38; n38 =26,36-37= m38;
   q38 =26,36-41= h38; j38 =26,36-41= (h38 -> i38); g38 =26,36-41= i38;
   y38 =26,38-39= a39; y38 =26,39-39= u38; w38 =26,39-39= (u38 -> v38);
   t38 =26,39-39= v38; x38 =26,39-40= w38; b39 =26,39-41= r38;
   t38 =26,39-41= (r38 -> s38); q38 =26,39-41= s38; int =26,40-41= b39;
   e38 =26,43-32= y37; b38 =26,43-32= (y37 -> a38); x37 =26,43-32= a38;
   g38 =26,43-41= v37; x37 =26,43-41= (v37 -> w37); u37 =26,43-41= w37;
   c39 =26,43-47= s37; c38 =26,43-47= b38; u37 =26,43-47= (s37 -> t37);
   r37 =26,43-47= t37; c39 =26,46-47= d39; }
[DBG generate] for_expr at 26,27-47 function x -> Array.set~b~i + j * 9~x:
  p37 -
  {(array d38 -> (int -> (d38 -> unit))) =Array.set= c38;
   (int -> (int -> int)) =Pervasives.(*)= x38;
   (int -> (int -> int)) =Pervasives.(+)= n38; f38 =26,14-15= h37;
   p38 =26,23-24= m37; a39 =26,25-26= o37; d39 =26,27-28= q37;
   h39 =26,27-47= e39; h39 =26,27-47= r37; g39 =26,27-47= f39;
   g39 =26,27-47= q37; p37 =26,27-47= (g39 -> h39); e38 =26,31-32= f38;
   o38 =26,34-35= p38; o38 =26,36-35= k38; m38 =26,36-35= (k38 -> l38);
   j38 =26,36-35= l38; n38 =26,36-37= m38; q38 =26,36-41= h38;
   j38 =26,36-41= (h38 -> i38); g38 =26,36-41= i38; y38 =26,38-39= a39;
   y38 =26,39-39= u38; w38 =26,39-39= (u38 -> v38); t38 =26,39-39= v38;
   x38 =26,39-40= w38; b39 =26,39-41= r38; t38 =26,39-41= (r38 -> s38);
   q38 =26,39-41= s38; int =26,40-41= b39; e38 =26,43-32= y37;
   b38 =26,43-32= (y37 -> a38); x37 =26,43-32= a38; g38 =26,43-41= v37;
   x37 =26,43-41= (v37 -> w37); u37 =26,43-41= w37; c39 =26,43-47= s37;
   c38 =26,43-47= b38; u37 =26,43-47= (s37 -> t37); r37 =26,43-47= t37;
   c39 =26,46-47= d39; }
[DBG generate] for_expr at 26,25-47
  function j -> function x -> Array.set~b~i + j * 9~x: n37 -
  {(array d38 -> (int -> (d38 -> unit))) =Array.set= c38;
   (int -> (int -> int)) =Pervasives.(*)= x38;
   (int -> (int -> int)) =Pervasives.(+)= n38; f38 =26,14-15= h37;
   p38 =26,23-24= m37; a39 =26,25-26= o37; l39 =26,25-47= i39;
   l39 =26,25-47= p37; k39 =26,25-47= j39; k39 =26,25-47= o37;
   n37 =26,25-47= (k39 -> l39); d39 =26,27-28= q37; h39 =26,27-47= e39;
   h39 =26,27-47= r37; g39 =26,27-47= f39; g39 =26,27-47= q37;
   p37 =26,27-47= (g39 -> h39); e38 =26,31-32= f38; o38 =26,34-35= p38;
   o38 =26,36-35= k38; m38 =26,36-35= (k38 -> l38); j38 =26,36-35= l38;
   n38 =26,36-37= m38; q38 =26,36-41= h38; j38 =26,36-41= (h38 -> i38);
   g38 =26,36-41= i38; y38 =26,38-39= a39; y38 =26,39-39= u38;
   w38 =26,39-39= (u38 -> v38); t38 =26,39-39= v38; x38 =26,39-40= w38;
   b39 =26,39-41= r38; t38 =26,39-41= (r38 -> s38); q38 =26,39-41= s38;
   int =26,40-41= b39; e38 =26,43-32= y37; b38 =26,43-32= (y37 -> a38);
   x37 =26,43-32= a38; g38 =26,43-41= v37; x37 =26,43-41= (v37 -> w37);
   u37 =26,43-41= w37; c39 =26,43-47= s37; c38 =26,43-47= b38;
   u37 =26,43-47= (s37 -> t37); r37 =26,43-47= t37; c39 =26,46-47= d39; }
[DBG generate] for_expr at 26,23-47
  function i -> function j -> function x -> Array.set~b~i + j * 9~x: l37 -
  {(array d38 -> (int -> (d38 -> unit))) =Array.set= c38;
   (int -> (int -> int)) =Pervasives.(*)= x38;
   (int -> (int -> int)) =Pervasives.(+)= n38; f38 =26,14-15= h37;
   p38 =26,23-24= m37; p39 =26,23-47= m39; p39 =26,23-47= n37;
   o39 =26,23-47= n39; o39 =26,23-47= m37; l37 =26,23-47= (o39 -> p39);
   a39 =26,25-26= o37; l39 =26,25-47= i39; l39 =26,25-47= p37;
   k39 =26,25-47= j39; k39 =26,25-47= o37; n37 =26,25-47= (k39 -> l39);
   d39 =26,27-28= q37; h39 =26,27-47= e39; h39 =26,27-47= r37;
   g39 =26,27-47= f39; g39 =26,27-47= q37; p37 =26,27-47= (g39 -> h39);
   e38 =26,31-32= f38; o38 =26,34-35= p38; o38 =26,36-35= k38;
   m38 =26,36-35= (k38 -> l38); j38 =26,36-35= l38; n38 =26,36-37= m38;
   q38 =26,36-41= h38; j38 =26,36-41= (h38 -> i38); g38 =26,36-41= i38;
   y38 =26,38-39= a39; y38 =26,39-39= u38; w38 =26,39-39= (u38 -> v38);
   t38 =26,39-39= v38; x38 =26,39-40= w38; b39 =26,39-41= r38;
   t38 =26,39-41= (r38 -> s38); q38 =26,39-41= s38; int =26,40-41= b39;
   e38 =26,43-32= y37; b38 =26,43-32= (y37 -> a38); x37 =26,43-32= a38;
   g38 =26,43-41= v37; x37 =26,43-41= (v37 -> w37); u37 =26,43-41= w37;
   c39 =26,43-47= s37; c38 =26,43-47= b38; u37 =26,43-47= (s37 -> t37);
   r37 =26,43-47= t37; c39 =26,46-47= d39; }
[DBG generate] for_expr at 26,13-47
  function
    b : board ->
    function i -> function j -> function x -> Array.set~b~i + j * 9~x:
  g37 -
  {(array d38 -> (int -> (d38 -> unit))) =Array.set= c38;
   (int -> (int -> int)) =Pervasives.(*)= x38;
   (int -> (int -> int)) =Pervasives.(+)= n38; j37 =26,13-22= h37;
   i37 =26,13-22= k37; t39 =26,13-47= q39; t39 =26,13-47= l37;
   s39 =26,13-47= r39; s39 =26,13-47= i37; g37 =26,13-47= (s39 -> t39);
   f38 =26,14-15= h37; k37 =26,16-21= board; j37 =26,16-21= board;
   p38 =26,23-24= m37; p39 =26,23-47= m39; p39 =26,23-47= n37;
   o39 =26,23-47= n39; o39 =26,23-47= m37; l37 =26,23-47= (o39 -> p39);
   a39 =26,25-26= o37; l39 =26,25-47= i39; l39 =26,25-47= p37;
   k39 =26,25-47= j39; k39 =26,25-47= o37; n37 =26,25-47= (k39 -> l39);
   d39 =26,27-28= q37; h39 =26,27-47= e39; h39 =26,27-47= r37;
   g39 =26,27-47= f39; g39 =26,27-47= q37; p37 =26,27-47= (g39 -> h39);
   e38 =26,31-32= f38; o38 =26,34-35= p38; o38 =26,36-35= k38;
   m38 =26,36-35= (k38 -> l38); j38 =26,36-35= l38; n38 =26,36-37= m38;
   q38 =26,36-41= h38; j38 =26,36-41= (h38 -> i38); g38 =26,36-41= i38;
   y38 =26,38-39= a39; y38 =26,39-39= u38; w38 =26,39-39= (u38 -> v38);
   t38 =26,39-39= v38; x38 =26,39-40= w38; b39 =26,39-41= r38;
   t38 =26,39-41= (r38 -> s38); q38 =26,39-41= s38; int =26,40-41= b39;
   e38 =26,43-32= y37; b38 =26,43-32= (y37 -> a38); x37 =26,43-32= a38;
   g38 =26,43-41= v37; x37 =26,43-41= (v37 -> w37); u37 =26,43-41= w37;
   c39 =26,43-47= s37; c38 =26,43-47= b38; u37 =26,43-47= (s37 -> t37);
   r37 =26,43-47= t37; c39 =26,46-47= d39; }
[DBG generate] for_structure_item at 26,4-47
  let bset =
      function
        b : board ->
        function i -> function j -> function x -> Array.set~b~i + j * 9~x:
  {(array d38 -> (int -> (d38 -> unit))) =Array.set= c38;
   (int -> (int -> int)) =Pervasives.(*)= x38;
   (int -> (int -> int)) =Pervasives.(+)= n38; f37 =26,4-47= g37;
   j37 =26,13-22= h37; i37 =26,13-22= k37; t39 =26,13-47= q39;
   t39 =26,13-47= l37; s39 =26,13-47= r39; s39 =26,13-47= i37;
   g37 =26,13-47= (s39 -> t39); f38 =26,14-15= h37; k37 =26,16-21= board;
   j37 =26,16-21= board; p38 =26,23-24= m37; p39 =26,23-47= m39;
   p39 =26,23-47= n37; o39 =26,23-47= n39; o39 =26,23-47= m37;
   l37 =26,23-47= (o39 -> p39); a39 =26,25-26= o37; l39 =26,25-47= i39;
   l39 =26,25-47= p37; k39 =26,25-47= j39; k39 =26,25-47= o37;
   n37 =26,25-47= (k39 -> l39); d39 =26,27-28= q37; h39 =26,27-47= e39;
   h39 =26,27-47= r37; g39 =26,27-47= f39; g39 =26,27-47= q37;
   p37 =26,27-47= (g39 -> h39); e38 =26,31-32= f38; o38 =26,34-35= p38;
   o38 =26,36-35= k38; m38 =26,36-35= (k38 -> l38); j38 =26,36-35= l38;
   n38 =26,36-37= m38; q38 =26,36-41= h38; j38 =26,36-41= (h38 -> i38);
   g38 =26,36-41= i38; y38 =26,38-39= a39; y38 =26,39-39= u38;
   w38 =26,39-39= (u38 -> v38); t38 =26,39-39= v38; x38 =26,39-40= w38;
   b39 =26,39-41= r38; t38 =26,39-41= (r38 -> s38); q38 =26,39-41= s38;
   int =26,40-41= b39; e38 =26,43-32= y37; b38 =26,43-32= (y37 -> a38);
   x37 =26,43-32= a38; g38 =26,43-41= v37; x37 =26,43-41= (v37 -> w37);
   u37 =26,43-41= w37; c39 =26,43-47= s37; c38 =26,43-47= b38;
   u37 =26,43-47= (s37 -> t37); r37 =26,43-47= t37; c39 =26,46-47= d39; }
[DBG generate] Generated for strit, resulting env:
Values: bset: f37; 
  Types: 
[INF typing] 61 constraints generated.
[DBG typing] generated constraints:
               {(array d38 -> (int -> (d38 -> unit))) =Array.set= c38;
                (int -> (int -> int)) =Pervasives.(*)= x38;
                (int -> (int -> int)) =Pervasives.(+)= n38;
                f37 =26,4-47= g37; j37 =26,13-22= h37; i37 =26,13-22= k37;
                t39 =26,13-47= q39; t39 =26,13-47= l37; s39 =26,13-47= r39;
                s39 =26,13-47= i37; g37 =26,13-47= (s39 -> t39);
                f38 =26,14-15= h37; k37 =26,16-21= board;
                j37 =26,16-21= board; p38 =26,23-24= m37; p39 =26,23-47= m39;
                p39 =26,23-47= n37; o39 =26,23-47= n39; o39 =26,23-47= m37;
                l37 =26,23-47= (o39 -> p39); a39 =26,25-26= o37;
                l39 =26,25-47= i39; l39 =26,25-47= p37; k39 =26,25-47= j39;
                k39 =26,25-47= o37; n37 =26,25-47= (k39 -> l39);
                d39 =26,27-28= q37; h39 =26,27-47= e39; h39 =26,27-47= r37;
                g39 =26,27-47= f39; g39 =26,27-47= q37;
                p37 =26,27-47= (g39 -> h39); e38 =26,31-32= f38;
                o38 =26,34-35= p38; o38 =26,36-35= k38;
                m38 =26,36-35= (k38 -> l38); j38 =26,36-35= l38;
                n38 =26,36-37= m38; q38 =26,36-41= h38;
                j38 =26,36-41= (h38 -> i38); g38 =26,36-41= i38;
                y38 =26,38-39= a39; y38 =26,39-39= u38;
                w38 =26,39-39= (u38 -> v38); t38 =26,39-39= v38;
                x38 =26,39-40= w38; b39 =26,39-41= r38;
                t38 =26,39-41= (r38 -> s38); q38 =26,39-41= s38;
                int =26,40-41= b39; e38 =26,43-32= y37;
                b38 =26,43-32= (y37 -> a38); x37 =26,43-32= a38;
                g38 =26,43-41= v37; x37 =26,43-41= (v37 -> w37);
                u37 =26,43-41= w37; c39 =26,43-47= s37; c38 =26,43-47= b38;
                u37 =26,43-47= (s37 -> t37); r37 =26,43-47= t37;
                c39 =26,46-47= d39; }
[DBG typing] Unifying
               {(array d38 -> (int -> (d38 -> unit))) =Array.set= c38;
                (int -> (int -> int)) =Pervasives.(*)= x38;
                (int -> (int -> int)) =Pervasives.(+)= n38;
                f37 =26,4-47= g37; j37 =26,13-22= h37; i37 =26,13-22= k37;
                t39 =26,13-47= q39; t39 =26,13-47= l37; s39 =26,13-47= r39;
                s39 =26,13-47= i37; g37 =26,13-47= (s39 -> t39);
                f38 =26,14-15= h37; k37 =26,16-21= board;
                j37 =26,16-21= board; p38 =26,23-24= m37; p39 =26,23-47= m39;
                p39 =26,23-47= n37; o39 =26,23-47= n39; o39 =26,23-47= m37;
                l37 =26,23-47= (o39 -> p39); a39 =26,25-26= o37;
                l39 =26,25-47= i39; l39 =26,25-47= p37; k39 =26,25-47= j39;
                k39 =26,25-47= o37; n37 =26,25-47= (k39 -> l39);
                d39 =26,27-28= q37; h39 =26,27-47= e39; h39 =26,27-47= r37;
                g39 =26,27-47= f39; g39 =26,27-47= q37;
                p37 =26,27-47= (g39 -> h39); e38 =26,31-32= f38;
                o38 =26,34-35= p38; o38 =26,36-35= k38;
                m38 =26,36-35= (k38 -> l38); j38 =26,36-35= l38;
                n38 =26,36-37= m38; q38 =26,36-41= h38;
                j38 =26,36-41= (h38 -> i38); g38 =26,36-41= i38;
                y38 =26,38-39= a39; y38 =26,39-39= u38;
                w38 =26,39-39= (u38 -> v38); t38 =26,39-39= v38;
                x38 =26,39-40= w38; b39 =26,39-41= r38;
                t38 =26,39-41= (r38 -> s38); q38 =26,39-41= s38;
                int =26,40-41= b39; e38 =26,43-32= y37;
                b38 =26,43-32= (y37 -> a38); x37 =26,43-32= a38;
                g38 =26,43-41= v37; x37 =26,43-41= (v37 -> w37);
                u37 =26,43-41= w37; c39 =26,43-47= s37; c38 =26,43-47= b38;
                u37 =26,43-47= (s37 -> t37); r37 =26,43-47= t37;
                c39 =26,46-47= d39; }
[DBG typing] switching X, var: c38 = (array d38 -> (int -> (d38 -> unit)))
[DBG typing] TyVar c38, (array d38 -> (int -> (d38 -> unit))): adding c38 -> (array d38 -> (int -> (d38 -> unit))) to E
[DBG typing] switching X, var: x38 = (int -> (int -> int))
[DBG typing] TyVar x38, (int -> (int -> int)): adding x38 -> (int -> (int -> int)) to E
[DBG typing] switching X, var: n38 = (int -> (int -> int))
[DBG typing] TyVar n38, (int -> (int -> int)): adding n38 -> (int -> (int -> int)) to E
[DBG typing] TyVar f37, g37: adding f37 -> g37 to E
[DBG typing] TyVar j37, h37: adding j37 -> h37 to E
[DBG typing] TyVar i37, k37: adding i37 -> k37 to E
[DBG typing] TyVar t39, q39: adding t39 -> q39 to E
[DBG typing] TyVar t39, q39: --> q39 = l37 (lookup)
[DBG typing] TyVar s39, r39: adding s39 -> r39 to E
[DBG typing] TyVar s39, r39: --> r39 = i37 (lookup)
[DBG typing] TyVar r39, i37: adding r39 -> i37 to E
[DBG typing] TyVar q39, l37: adding q39 -> l37 to E
[DBG typing] TyVar g37, (s39 -> t39): adding g37 -> (s39 -> t39) to E
[DBG typing] TyVar f38, h37: adding f38 -> h37 to E
[DBG typing] TyVar k37, array int: adding k37 -> board to E
[DBG typing] TyVar j37, h37: --> h37 = board (lookup)
[DBG typing] TyVar h37, array int: adding h37 -> board to E
[DBG typing] TyVar p38, m37: adding p38 -> m37 to E
[DBG typing] TyVar p39, m39: adding p39 -> m39 to E
[DBG typing] TyVar p39, m39: --> m39 = n37 (lookup)
[DBG typing] TyVar o39, n39: adding o39 -> n39 to E
[DBG typing] TyVar o39, n39: --> n39 = m37 (lookup)
[DBG typing] TyVar n39, m37: adding n39 -> m37 to E
[DBG typing] TyVar m39, n37: adding m39 -> n37 to E
[DBG typing] TyVar l37, (o39 -> p39): adding l37 -> (o39 -> p39) to E
[DBG typing] TyVar a39, o37: adding a39 -> o37 to E
[DBG typing] TyVar l39, i39: adding l39 -> i39 to E
[DBG typing] TyVar l39, i39: --> i39 = p37 (lookup)
[DBG typing] TyVar k39, j39: adding k39 -> j39 to E
[DBG typing] TyVar k39, j39: --> j39 = o37 (lookup)
[DBG typing] TyVar j39, o37: adding j39 -> o37 to E
[DBG typing] TyVar i39, p37: adding i39 -> p37 to E
[DBG typing] TyVar n37, (k39 -> l39): adding n37 -> (k39 -> l39) to E
[DBG typing] TyVar d39, q37: adding d39 -> q37 to E
[DBG typing] TyVar h39, e39: adding h39 -> e39 to E
[DBG typing] TyVar h39, e39: --> e39 = r37 (lookup)
[DBG typing] TyVar g39, f39: adding g39 -> f39 to E
[DBG typing] TyVar g39, f39: --> f39 = q37 (lookup)
[DBG typing] TyVar f39, q37: adding f39 -> q37 to E
[DBG typing] TyVar e39, r37: adding e39 -> r37 to E
[DBG typing] TyVar p37, (g39 -> h39): adding p37 -> (g39 -> h39) to E
[DBG typing] TyVar e38, f38: adding e38 -> f38 to E
[DBG typing] TyVar o38, p38: adding o38 -> p38 to E
[DBG typing] TyVar o38, p38: --> p38 = k38 (lookup)
[DBG typing] TyVar p38, m37: --> m37 = k38 (lookup)
[DBG typing] TyVar m37, k38: adding m37 -> k38 to E
[DBG typing] TyVar m38, (k38 -> l38): adding m38 -> (k38 -> l38) to E
[DBG typing] TyVar j38, l38: adding j38 -> l38 to E
[DBG typing] TyVar n38, (int -> (int -> int)): --> (int -> (int -> int)) = m38 (lookup)
[DBG typing] switching X, var: m38 = (int -> (int -> int))
[DBG typing] TyVar m38, (k38 -> l38): --> (k38 -> l38) = (int -> (int -> int)) (lookup)
[DBG typing] Unifying arrows (k38 -> l38), (int -> (int -> int)) --> k38 = int, l38 = (int -> int)
[DBG typing] TyVar l38, (int -> int): adding l38 -> (int -> int) to E
[DBG typing] TyVar k38, int: adding k38 -> int to E
[DBG typing] TyVar q38, h38: adding q38 -> h38 to E
[DBG typing] TyVar j38, l38: --> l38 = (h38 -> i38) (lookup)
[DBG typing] TyVar l38, (int -> int): --> (int -> int) = (h38 -> i38) (lookup)
[DBG typing] Unifying arrows (int -> int), (h38 -> i38) --> int = h38, int = i38
[DBG typing] switching X, var: i38 = int
[DBG typing] switching X, var: h38 = int
[DBG typing] TyVar i38, int: adding i38 -> int to E
[DBG typing] TyVar h38, int: adding h38 -> int to E
[DBG typing] TyVar g38, i38: adding g38 -> i38 to E
[DBG typing] TyVar y38, a39: adding y38 -> a39 to E
[DBG typing] TyVar y38, a39: --> a39 = u38 (lookup)
[DBG typing] TyVar a39, o37: --> o37 = u38 (lookup)
[DBG typing] TyVar o37, u38: adding o37 -> u38 to E
[DBG typing] TyVar w38, (u38 -> v38): adding w38 -> (u38 -> v38) to E
[DBG typing] TyVar t38, v38: adding t38 -> v38 to E
[DBG typing] TyVar x38, (int -> (int -> int)): --> (int -> (int -> int)) = w38 (lookup)
[DBG typing] switching X, var: w38 = (int -> (int -> int))
[DBG typing] TyVar w38, (u38 -> v38): --> (u38 -> v38) = (int -> (int -> int)) (lookup)
[DBG typing] Unifying arrows (u38 -> v38), (int -> (int -> int)) --> u38 = int, v38 = (int -> int)
[DBG typing] TyVar v38, (int -> int): adding v38 -> (int -> int) to E
[DBG typing] TyVar u38, int: adding u38 -> int to E
[DBG typing] TyVar b39, r38: adding b39 -> r38 to E
[DBG typing] TyVar t38, v38: --> v38 = (r38 -> s38) (lookup)
[DBG typing] TyVar v38, (int -> int): --> (int -> int) = (r38 -> s38) (lookup)
[DBG typing] Unifying arrows (int -> int), (r38 -> s38) --> int = r38, int = s38
[DBG typing] switching X, var: s38 = int
[DBG typing] switching X, var: r38 = int
[DBG typing] TyVar s38, int: adding s38 -> int to E
[DBG typing] TyVar r38, int: adding r38 -> int to E
[DBG typing] TyVar q38, h38: --> h38 = s38 (lookup)
[DBG typing] TyVar h38, int: --> int = s38 (lookup)
[DBG typing] switching X, var: s38 = int
[DBG typing] TyVar s38, int: --> int = int (lookup)
[DBG typing] Ctors int, int --> {}
[DBG typing] switching X, var: b39 = int
[DBG typing] TyVar b39, r38: --> r38 = int (lookup)
[DBG typing] TyVar r38, int: --> int = int (lookup)
[DBG typing] Ctors int, int --> {}
[DBG typing] TyVar e38, f38: --> f38 = y37 (lookup)
[DBG typing] TyVar f38, h37: --> h37 = y37 (lookup)
[DBG typing] TyVar h37, board: --> board = y37 (lookup)
[DBG typing] switching X, var: y37 = board
[DBG typing] TyVar y37, array int: adding y37 -> board to E
[DBG typing] TyVar b38, (y37 -> a38): adding b38 -> (y37 -> a38) to E
[DBG typing] TyVar x37, a38: adding x37 -> a38 to E
[DBG typing] TyVar g38, i38: --> i38 = v37 (lookup)
[DBG typing] TyVar i38, int: --> int = v37 (lookup)
[DBG typing] switching X, var: v37 = int
[DBG typing] TyVar v37, int: adding v37 -> int to E
[DBG typing] TyVar x37, a38: --> a38 = (v37 -> w37) (lookup)
[DBG typing] TyVar a38, (v37 -> w37): adding a38 -> (v37 -> w37) to E
[DBG typing] TyVar u37, w37: adding u37 -> w37 to E
[DBG typing] TyVar c39, s37: adding c39 -> s37 to E
[DBG typing] TyVar c38, (array d38 -> (int -> (d38 -> unit))): --> (array d38 -> (int -> (d38 -> unit))) = b38 (lookup)
[DBG typing] switching X, var: b38 = (array d38 -> (int -> (d38 -> unit)))
[DBG typing] TyVar b38, (y37 -> a38): --> (y37 -> a38) = (array d38 -> (int -> (d38 -> unit))) (lookup)
[DBG typing] Unifying arrows (y37 -> a38), (array d38 -> (int -> (d38 -> unit))) --> y37 = array d38, a38 = (int -> (d38 -> unit))
[DBG typing] TyVar a38, (v37 -> w37): --> (v37 -> w37) = (int -> (d38 -> unit)) (lookup)
[DBG typing] Unifying arrows (v37 -> w37), (int -> (d38 -> unit)) --> v37 = int, w37 = (d38 -> unit)
[DBG typing] TyVar w37, (d38 -> unit): adding w37 -> (d38 -> unit) to E
[DBG typing] TyVar v37, int: --> int = int (lookup)
[DBG typing] Ctors int, int --> {}
[DBG typing] TyVar y37, board: --> board = array d38 (lookup)
[DBG typing] Ctors array int, array d38 --> {int = d38; }
[DBG typing] switching X, var: d38 = int
[DBG typing] TyVar d38, int: adding d38 -> int to E
[DBG typing] TyVar u37, w37: --> w37 = (s37 -> t37) (lookup)
[DBG typing] TyVar w37, (d38 -> unit): --> (d38 -> unit) = (s37 -> t37) (lookup)
[DBG typing] Unifying arrows (d38 -> unit), (s37 -> t37) --> d38 = s37, unit = t37
[DBG typing] switching X, var: t37 = unit
[DBG typing] TyVar d38, int: --> int = s37 (lookup)
[DBG typing] switching X, var: s37 = int
[DBG typing] TyVar s37, int: adding s37 -> int to E
[DBG typing] TyVar t37, unit: adding t37 -> unit to E
[DBG typing] TyVar r37, t37: adding r37 -> t37 to E
[DBG typing] TyVar c39, s37: --> s37 = d39 (lookup)
[DBG typing] TyVar s37, int: --> int = d39 (lookup)
[DBG typing] switching X, var: d39 = int
[DBG typing] TyVar d39, q37: --> q37 = int (lookup)
[DBG typing] TyVar q37, int: adding q37 -> int to E
[INF typing] Constraints unified successfully.
[DBG typing] Resulting tyvarsubst:
               t39: (int -> (int -> (int -> unit))); s39: board; r39: board; q39: (int -> (int -> (int -> unit))); p39: (int -> (int -> unit)); o39: int; n39: int; m39: (int -> (int -> unit)); l39: (int -> unit); k39: int; j39: int; i39: (int -> unit); h39: unit; g39: int; f39: int; e39: unit; d39: int; c39: int; b39: int; a39: int; y38: int; x38: (int -> (int -> int)); w38: (int -> (int -> int)); v38: (int -> int); u38: int; t38: (int -> int); s38: int; r38: int; q38: int; p38: int; o38: int; n38: (int -> (int -> int)); m38: (int -> (int -> int)); l38: (int -> int); k38: int; j38: (int -> int); i38: int; h38: int; g38: int; f38: board; e38: board; d38: int; c38: (array int -> (int -> (int -> unit))); b38: (board -> (int -> (int -> unit))); a38: (int -> (int -> unit)); y37: board; x37: (int -> (int -> unit)); w37: (int -> unit); v37: int; u37: (int -> unit); t37: unit; s37: int; r37: unit; q37: int; p37: (int -> unit); o37: int; n37: (int -> (int -> unit)); m37: int; l37: (int -> (int -> (int -> unit))); k37: board; j37: board; i37: board; h37: board; g37: (board -> (int -> (int -> (int -> unit)))); f37: (board -> (int -> (int -> (int -> unit)))); 
[DBG coretys] Check array int <= array int
[INF typing] checked annotations
[INF typing] Constraints solved
[INF typing] Succeeded typing structure
  val bset: (board -> (int -> (int -> (int -> unit)))) with substitution
  t39: (int -> (int -> (int -> unit))); s39: board; r39: board; q39: (int -> (int -> (int -> unit))); p39: (int -> (int -> unit)); o39: int; n39: int; m39: (int -> (int -> unit)); l39: (int -> unit); k39: int; j39: int; i39: (int -> unit); h39: unit; g39: int; f39: int; e39: unit; d39: int; c39: int; b39: int; a39: int; y38: int; x38: (int -> (int -> int)); w38: (int -> (int -> int)); v38: (int -> int); u38: int; t38: (int -> int); s38: int; r38: int; q38: int; p38: int; o38: int; n38: (int -> (int -> int)); m38: (int -> (int -> int)); l38: (int -> int); k38: int; j38: (int -> int); i38: int; h38: int; g38: int; f38: board; e38: board; d38: int; c38: (array int -> (int -> (int -> unit))); b38: (board -> (int -> (int -> unit))); a38: (int -> (int -> unit)); y37: board; x37: (int -> (int -> unit)); w37: (int -> unit); v37: int; u37: (int -> unit); t37: unit; s37: int; r37: unit; q37: int; p37: (int -> unit); o37: int; n37: (int -> (int -> unit)); m37: int; l37: (int -> (int -> (int -> unit))); k37: board; j37: board; i37: board; h37: board; g37: (board -> (int -> (int -> (int -> unit)))); f37: (board -> (int -> (int -> (int -> unit)))); 
  and env enriched by
  Values: bset: (board -> (int -> (int -> (int -> unit))));  Types: 
[DBG ast_comp] Succeeded for:  Pstr_value (26,4-47): bset
[INF ast_comp] Success comparing ecaml/ocaml typing
[DBG typing] Conf.load_path: [, /home/zhdf/easyocaml-0.49/ocaml-3.10.2/lib/ocaml]
[DBG enr_ast] Ocaml ast: [
  structure_item (/home/zhdf/demo/ml/sudoku1.ml[27,948+4]../home/zhdf/demo/ml/sudoku1.ml[34,1216+2])
    Pstr_value Nonrec
    [
      <def>
        pattern (/home/zhdf/demo/ml/sudoku1.ml[27,948+8]../home/zhdf/demo/ml/sudoku1.ml[27,948+15])
          Ppat_var "unparse"
        expression (/home/zhdf/demo/ml/sudoku1.ml[27,948+16]../home/zhdf/demo/ml/sudoku1.ml[34,1216+2])
          Pexp_function ""
          None
          [
            <case>
              pattern (/home/zhdf/demo/ml/sudoku1.ml[27,948+16]../home/zhdf/demo/ml/sudoku1.ml[27,948+17])
                Ppat_var "b"
              expression (/home/zhdf/demo/ml/sudoku1.ml[28,969+17]../home/zhdf/demo/ml/sudoku1.ml[34,1216+2])
                Pexp_apply
                expression (/home/zhdf/demo/ml/sudoku1.ml[28,969+1]../home/zhdf/demo/ml/sudoku1.ml[28,969+9])
                  Pexp_ident "int_fold"
                [
                  <label> ""
                    expression (/home/zhdf/demo/ml/sudoku1.ml[28,969+12]../home/zhdf/demo/ml/sudoku1.ml[28,969+15])
                      Pexp_tuple
                      [
                        expression (/home/zhdf/demo/ml/sudoku1.ml[28,969+11]../home/zhdf/demo/ml/sudoku1.ml[28,969+12])
                          Pexp_constant Const_int 0
                        expression (/home/zhdf/demo/ml/sudoku1.ml[28,969+14]../home/zhdf/demo/ml/sudoku1.ml[28,969+15])
                          Pexp_constant Const_int 9
                      ]
                  <label> ""
                    expression (/home/zhdf/demo/ml/sudoku1.ml[28,969+22]../home/zhdf/demo/ml/sudoku1.ml[33,1146+68])
                      Pexp_function ""
                      None
                      [
                        <case>
                          pattern (/home/zhdf/demo/ml/sudoku1.ml[28,969+22]../home/zhdf/demo/ml/sudoku1.ml[28,969+23])
                            Ppat_var "j"
                          expression (/home/zhdf/demo/ml/sudoku1.ml[28,969+24]../home/zhdf/demo/ml/sudoku1.ml[33,1146+68])
                            Pexp_function ""
                            None
                            [
                              <case>
                                pattern (/home/zhdf/demo/ml/sudoku1.ml[28,969+24]../home/zhdf/demo/ml/sudoku1.ml[28,969+25])
                                  Ppat_var "s"
                                expression (/home/zhdf/demo/ml/sudoku1.ml[32,1130+6]../home/zhdf/demo/ml/sudoku1.ml[33,1146+68])
                                  Pexp_apply
                                  expression (/home/zhdf/demo/ml/sudoku1.ml[32,1130+6]../home/zhdf/demo/ml/sudoku1.ml[32,1130+7])
                                    Pexp_ident "^"
                                  [
                                    <label> ""
                                      expression (/home/zhdf/demo/ml/sudoku1.ml[29,1000+22]../home/zhdf/demo/ml/sudoku1.ml[32,1130+5])
                                        Pexp_apply
                                        expression (/home/zhdf/demo/ml/sudoku1.ml[29,1000+4]../home/zhdf/demo/ml/sudoku1.ml[29,1000+12])
                                          Pexp_ident "int_fold"
                                        [
                                          <label> ""
                                            expression (/home/zhdf/demo/ml/sudoku1.ml[29,1000+15]../home/zhdf/demo/ml/sudoku1.ml[29,1000+18])
                                              Pexp_tuple
                                              [
                                                expression (/home/zhdf/demo/ml/sudoku1.ml[29,1000+14]../home/zhdf/demo/ml/sudoku1.ml[29,1000+15])
                                                  Pexp_constant Const_int 0
                                                expression (/home/zhdf/demo/ml/sudoku1.ml[29,1000+17]../home/zhdf/demo/ml/sudoku1.ml[29,1000+18])
                                                  Pexp_constant Const_int 9
                                              ]
                                          <label> ""
                                            expression (/home/zhdf/demo/ml/sudoku1.ml[29,1000+20]../home/zhdf/demo/ml/sudoku1.ml[29,1000+21])
                                              Pexp_ident "s"
                                          <label> ""
                                            expression (/home/zhdf/demo/ml/sudoku1.ml[29,1000+27]../home/zhdf/demo/ml/sudoku1.ml[31,1083+45])
                                              Pexp_function ""
                                              None
                                              [
                                                <case>
                                                  pattern (/home/zhdf/demo/ml/sudoku1.ml[29,1000+27]../home/zhdf/demo/ml/sudoku1.ml[29,1000+28])
                                                    Ppat_var "i"
                                                  expression (/home/zhdf/demo/ml/sudoku1.ml[29,1000+29]../home/zhdf/demo/ml/sudoku1.ml[31,1083+45])
                                                    Pexp_function ""
                                                    None
                                                    [
                                                      <case>
                                                        pattern (/home/zhdf/demo/ml/sudoku1.ml[29,1000+29]../home/zhdf/demo/ml/sudoku1.ml[29,1000+30])
                                                          Ppat_var "s"
                                                        expression (/home/zhdf/demo/ml/sudoku1.ml[30,1035+8]../home/zhdf/demo/ml/sudoku1.ml[31,1083+45])
                                                          Pexp_apply
                                                          expression (/home/zhdf/demo/ml/sudoku1.ml[30,1035+8]../home/zhdf/demo/ml/sudoku1.ml[30,1035+9])
                                                            Pexp_ident "^"
                                                          [
                                                            <label> ""
                                                              expression (/home/zhdf/demo/ml/sudoku1.ml[30,1035+6]../home/zhdf/demo/ml/sudoku1.ml[30,1035+7])
                                                                Pexp_ident "s"
                                                            <label> ""
                                                              expression (/home/zhdf/demo/ml/sudoku1.ml[30,1035+39]../home/zhdf/demo/ml/sudoku1.ml[31,1083+45])
                                                                Pexp_apply
                                                                expression (/home/zhdf/demo/ml/sudoku1.ml[30,1035+39]../home/zhdf/demo/ml/sudoku1.ml[30,1035+40])
                                                                  Pexp_ident "^"
                                                                [
                                                                  <label> ""
                                                                    expression (/home/zhdf/demo/ml/sudoku1.ml[30,1035+25]../home/zhdf/demo/ml/sudoku1.ml[30,1035+37])
                                                                      Pexp_apply
                                                                      expression (/home/zhdf/demo/ml/sudoku1.ml[30,1035+11]../home/zhdf/demo/ml/sudoku1.ml[30,1035+24])
                                                                        Pexp_ident "string_of_int"
                                                                      [
                                                                        <label> ""
                                                                          expression (/home/zhdf/demo/ml/sudoku1.ml[30,1035+35]../home/zhdf/demo/ml/sudoku1.ml[30,1035+36])
                                                                            Pexp_apply
                                                                            expression (/home/zhdf/demo/ml/sudoku1.ml[30,1035+26]../home/zhdf/demo/ml/sudoku1.ml[30,1035+30])
                                                                              Pexp_ident "bget"
                                                                            [
                                                                              <label> ""
                                                                                expression (/home/zhdf/demo/ml/sudoku1.ml[30,1035+31]../home/zhdf/demo/ml/sudoku1.ml[30,1035+32])
                                                                                  Pexp_ident "b"
                                                                              <label> ""
                                                                                expression (/home/zhdf/demo/ml/sudoku1.ml[30,1035+33]../home/zhdf/demo/ml/sudoku1.ml[30,1035+34])
                                                                                  Pexp_ident "i"
                                                                              <label> ""
                                                                                expression (/home/zhdf/demo/ml/sudoku1.ml[30,1035+35]../home/zhdf/demo/ml/sudoku1.ml[30,1035+36])
                                                                                  Pexp_ident "j"
                                                                            ]
                                                                      ]
                                                                  <label> ""
                                                                    expression (/home/zhdf/demo/ml/sudoku1.ml[30,1035+45]../home/zhdf/demo/ml/sudoku1.ml[31,1083+45])
                                                                      Pexp_apply
                                                                      expression (/home/zhdf/demo/ml/sudoku1.ml[30,1035+45]../home/zhdf/demo/ml/sudoku1.ml[30,1035+46])
                                                                        Pexp_ident "^"
                                                                      [
                                                                        <label> ""
                                                                          expression (/home/zhdf/demo/ml/sudoku1.ml[30,1035+41]../home/zhdf/demo/ml/sudoku1.ml[30,1035+44])
                                                                            Pexp_constant Const_string " "
                                                                        <label> ""
                                                                          expression (/home/zhdf/demo/ml/sudoku1.ml[31,1083+3]../home/zhdf/demo/ml/sudoku1.ml[31,1083+44])
                                                                            Pexp_ifthenelse
                                                                            expression (/home/zhdf/demo/ml/sudoku1.ml[31,1083+18]../home/zhdf/demo/ml/sudoku1.ml[31,1083+26])
                                                                              Pexp_apply
                                                                              expression (/home/zhdf/demo/ml/sudoku1.ml[31,1083+18]../home/zhdf/demo/ml/sudoku1.ml[31,1083+20])
                                                                                Pexp_ident "&&"
                                                                              [
                                                                                <label> ""
                                                                                  expression (/home/zhdf/demo/ml/sudoku1.ml[31,1083+14]../home/zhdf/demo/ml/sudoku1.ml[31,1083+17])
                                                                                    Pexp_apply
                                                                                    expression (/home/zhdf/demo/ml/sudoku1.ml[31,1083+14]../home/zhdf/demo/ml/sudoku1.ml[31,1083+15])
                                                                                      Pexp_ident "="
                                                                                    [
                                                                                      <label> ""
                                                                                        expression (/home/zhdf/demo/ml/sudoku1.ml[31,1083+8]../home/zhdf/demo/ml/sudoku1.ml[31,1083+13])
                                                                                          Pexp_apply
                                                                                          expression (/home/zhdf/demo/ml/sudoku1.ml[31,1083+8]../home/zhdf/demo/ml/sudoku1.ml[31,1083+13])
                                                                                            Pexp_ident "mod"
                                                                                          [
                                                                                            <label> ""
                                                                                              expression (/home/zhdf/demo/ml/sudoku1.ml[31,1083+6]../home/zhdf/demo/ml/sudoku1.ml[31,1083+7])
                                                                                                Pexp_ident "i"
                                                                                            <label> ""
                                                                                              expression (/home/zhdf/demo/ml/sudoku1.ml[31,1083+12]../home/zhdf/demo/ml/sudoku1.ml[31,1083+13])
                                                                                                Pexp_constant Const_int 3
                                                                                          ]
                                                                                      <label> ""
                                                                                        expression (/home/zhdf/demo/ml/sudoku1.ml[31,1083+16]../home/zhdf/demo/ml/sudoku1.ml[31,1083+17])
                                                                                          Pexp_constant Const_int 2
                                                                                    ]
                                                                                <label> ""
                                                                                  expression (/home/zhdf/demo/ml/sudoku1.ml[31,1083+23]../home/zhdf/demo/ml/sudoku1.ml[31,1083+26])
                                                                                    Pexp_apply
                                                                                    expression (/home/zhdf/demo/ml/sudoku1.ml[31,1083+23]../home/zhdf/demo/ml/sudoku1.ml[31,1083+24])
                                                                                      Pexp_ident "<"
                                                                                    [
                                                                                      <label> ""
                                                                                        expression (/home/zhdf/demo/ml/sudoku1.ml[31,1083+21]../home/zhdf/demo/ml/sudoku1.ml[31,1083+22])
                                                                                          Pexp_ident "i"
                                                                                      <label> ""
                                                                                        expression (/home/zhdf/demo/ml/sudoku1.ml[31,1083+25]../home/zhdf/demo/ml/sudoku1.ml[31,1083+26])
                                                                                          Pexp_constant Const_int 8
                                                                                    ]
                                                                              ]
                                                                            expression (/home/zhdf/demo/ml/sudoku1.ml[31,1083+32]../home/zhdf/demo/ml/sudoku1.ml[31,1083+36])
                                                                              Pexp_constant Const_string "| "
                                                                            Some
                                                                              expression (/home/zhdf/demo/ml/sudoku1.ml[31,1083+42]../home/zhdf/demo/ml/sudoku1.ml[31,1083+44])
                                                                                Pexp_constant Const_string ""
                                                                      ]
                                                                ]
                                                          ]
                                                    ]
                                              ]
                                        ]
                                    <label> ""
                                      expression (/home/zhdf/demo/ml/sudoku1.ml[32,1130+13]../home/zhdf/demo/ml/sudoku1.ml[33,1146+68])
                                        Pexp_apply
                                        expression (/home/zhdf/demo/ml/sudoku1.ml[32,1130+13]../home/zhdf/demo/ml/sudoku1.ml[32,1130+14])
                                          Pexp_ident "^"
                                        [
                                          <label> ""
                                            expression (/home/zhdf/demo/ml/sudoku1.ml[32,1130+8]../home/zhdf/demo/ml/sudoku1.ml[32,1130+12])
                                              Pexp_constant Const_string "\n"
                                          <label> ""
                                            expression (/home/zhdf/demo/ml/sudoku1.ml[33,1146+5]../home/zhdf/demo/ml/sudoku1.ml[33,1146+67])
                                              Pexp_ifthenelse
                                              expression (/home/zhdf/demo/ml/sudoku1.ml[33,1146+20]../home/zhdf/demo/ml/sudoku1.ml[33,1146+28])
                                                Pexp_apply
                                                expression (/home/zhdf/demo/ml/sudoku1.ml[33,1146+20]../home/zhdf/demo/ml/sudoku1.ml[33,1146+22])
                                                  Pexp_ident "&&"
                                                [
                                                  <label> ""
                                                    expression (/home/zhdf/demo/ml/sudoku1.ml[33,1146+16]../home/zhdf/demo/ml/sudoku1.ml[33,1146+19])
                                                      Pexp_apply
                                                      expression (/home/zhdf/demo/ml/sudoku1.ml[33,1146+16]../home/zhdf/demo/ml/sudoku1.ml[33,1146+17])
                                                        Pexp_ident "="
                                                      [
                                                        <label> ""
                                                          expression (/home/zhdf/demo/ml/sudoku1.ml[33,1146+10]../home/zhdf/demo/ml/sudoku1.ml[33,1146+15])
                                                            Pexp_apply
                                                            expression (/home/zhdf/demo/ml/sudoku1.ml[33,1146+10]../home/zhdf/demo/ml/sudoku1.ml[33,1146+15])
                                                              Pexp_ident "mod"
                                                            [
                                                              <label> ""
                                                                expression (/home/zhdf/demo/ml/sudoku1.ml[33,1146+8]../home/zhdf/demo/ml/sudoku1.ml[33,1146+9])
                                                                  Pexp_ident "j"
                                                              <label> ""
                                                                expression (/home/zhdf/demo/ml/sudoku1.ml[33,1146+14]../home/zhdf/demo/ml/sudoku1.ml[33,1146+15])
                                                                  Pexp_constant Const_int 3
                                                            ]
                                                        <label> ""
                                                          expression (/home/zhdf/demo/ml/sudoku1.ml[33,1146+18]../home/zhdf/demo/ml/sudoku1.ml[33,1146+19])
                                                            Pexp_constant Const_int 2
                                                      ]
                                                  <label> ""
                                                    expression (/home/zhdf/demo/ml/sudoku1.ml[33,1146+25]../home/zhdf/demo/ml/sudoku1.ml[33,1146+28])
                                                      Pexp_apply
                                                      expression (/home/zhdf/demo/ml/sudoku1.ml[33,1146+25]../home/zhdf/demo/ml/sudoku1.ml[33,1146+26])
                                                        Pexp_ident "<"
                                                      [
                                                        <label> ""
                                                          expression (/home/zhdf/demo/ml/sudoku1.ml[33,1146+23]../home/zhdf/demo/ml/sudoku1.ml[33,1146+24])
                                                            Pexp_ident "j"
                                                        <label> ""
                                                          expression (/home/zhdf/demo/ml/sudoku1.ml[33,1146+27]../home/zhdf/demo/ml/sudoku1.ml[33,1146+28])
                                                            Pexp_constant Const_int 8
                                                      ]
                                                ]
                                              expression (/home/zhdf/demo/ml/sudoku1.ml[33,1146+34]../home/zhdf/demo/ml/sudoku1.ml[33,1146+59])
                                                Pexp_constant Const_string "---------------------\n"
                                              Some
                                                expression (/home/zhdf/demo/ml/sudoku1.ml[33,1146+65]../home/zhdf/demo/ml/sudoku1.ml[33,1146+67])
                                                  Pexp_constant Const_string ""
                                        ]
                                  ]
                            ]
                      ]
                ]
          ]
    ]
]

[INF enr_ast] A different parser than Ocaml's default should be used to avoid inaccuracy for the location of multiple application (28,17-34,2).
[INF enr_ast] A different parser than Ocaml's default should be used to avoid inaccuracy for the location of multiple application (32,6-33,68).
[INF enr_ast] A different parser than Ocaml's default should be used to avoid inaccuracy for the location of multiple application (29,22-32,5).
[INF enr_ast] A different parser than Ocaml's default should be used to avoid inaccuracy for the location of multiple application (30,8-31,45).
[INF enr_ast] A different parser than Ocaml's default should be used to avoid inaccuracy for the location of multiple application (30,39-31,45).
[INF enr_ast] A different parser than Ocaml's default should be used to avoid inaccuracy for the location of multiple application (30,35-36).
[INF enr_ast] A different parser than Ocaml's default should be used to avoid inaccuracy for the location of multiple application (30,45-31,45).
[INF enr_ast] A different parser than Ocaml's default should be used to avoid inaccuracy for the location of multiple application (31,18-26).
[INF enr_ast] A different parser than Ocaml's default should be used to avoid inaccuracy for the location of multiple application (31,14-17).
[INF enr_ast] A different parser than Ocaml's default should be used to avoid inaccuracy for the location of multiple application (31,8-13).
[INF enr_ast] A different parser than Ocaml's default should be used to avoid inaccuracy for the location of multiple application (31,23-26).
[INF enr_ast] A different parser than Ocaml's default should be used to avoid inaccuracy for the location of multiple application (32,13-33,68).
[INF enr_ast] A different parser than Ocaml's default should be used to avoid inaccuracy for the location of multiple application (33,20-28).
[INF enr_ast] A different parser than Ocaml's default should be used to avoid inaccuracy for the location of multiple application (33,16-19).
[INF enr_ast] A different parser than Ocaml's default should be used to avoid inaccuracy for the location of multiple application (33,10-15).
[INF enr_ast] A different parser than Ocaml's default should be used to avoid inaccuracy for the location of multiple application (33,25-28).
[DBG env] Adding field contents
[DBG typing] Type structure in env:
               Values: !: (Pervasives.ref u39 -> u39);
               &&: (bool -> (bool -> bool)); &: (bool -> (bool -> bool));
               !=: (v39 -> (v39 -> bool)); **: (float -> (float -> float));
               +: (int -> (int -> int)); *.: (float -> (float -> float));
               -: (int -> (int -> int)); /: (int -> (int -> int));
               -.: (float -> (float -> float));
               +.: (float -> (float -> float)); *: (int -> (int -> int));
               <: (a40 -> (a40 -> bool));
               :=: (Pervasives.ref w39 -> (w39 -> unit));
               =: (p40 -> (p40 -> bool)); <>: (x39 -> (x39 -> bool));
               >=: (m40 -> (m40 -> bool)); >: (c40 -> (c40 -> bool));
               ==: (b40 -> (b40 -> bool)); <=: (y39 -> (y39 -> bool));
               /.: (float -> (float -> float));
               ^: (string -> (string -> string)); abs: (int -> int);
               ^^: (format6 e40 f40 g40 h40 i40 j40 -> (format6 j40 f40 g40 i40 k40 l40 -> format6 e40 f40 g40 h40 k40 l40));
               acos: (float -> float); asr: (int -> (int -> int));
               at_exit: ((unit -> unit) -> unit); asin: (float -> float);
               abs_float: (float -> float);
               atan2: (float -> (float -> float));
               bget: (board -> (int -> (int -> int)));
               bset: (board -> (int -> (int -> (int -> unit))));
               classify_float: (float -> Pervasives.fpclass);
               char_of_int: (int -> char); ceil: (float -> float);
               bool_of_string: (string -> bool); atan: (float -> float);
               @: (list d40 -> (list d40 -> list d40));
               close_in_noerr: (Pervasives.in_channel -> unit);
               close_out_noerr: (Pervasives.out_channel -> unit);
               close_out: (Pervasives.out_channel -> unit);
               cos: (float -> float); cosh: (float -> float);
               compare: (n40 -> (n40 -> int));
               decr: (Pervasives.ref int -> unit); epsilon_float: float;
               do_at_exit: (unit -> unit); create: (unit -> board);
               failwith: (string -> d41); exp: (float -> float);
               float_of_int: (int -> float); float: (int -> float);
               floor: (float -> float);
               flush: (Pervasives.out_channel -> unit);
               frexp: (float -> (float , int));
               format_of_string: (format6 q40 r40 s40 t40 u40 v40 -> format6 q40 r40 s40 t40 u40 v40);
               flush_all: (unit -> unit); float_of_string: (string -> float);
               exit: (int -> o40); ignore: (y40 -> unit); infinity: float;
               incr: (Pervasives.ref int -> unit);
               in_channel_length: (Pervasives.in_channel -> int);
               input_byte: (Pervasives.in_channel -> int);
               input_binary_int: (Pervasives.in_channel -> int);
               input: (Pervasives.in_channel -> (string -> (int -> (int -> int))));
               input_line: (Pervasives.in_channel -> string);
               int_fold: ((int , int) -> (b41 -> ((int -> (b41 -> b41)) -> b41)));
               input_value: (Pervasives.in_channel -> a41);
               int_of_float: (float -> int); int_of_string: (string -> int);
               int_of_char: (char -> int); land: (int -> (int -> int));
               log: (float -> float); lnot: (int -> int);
               ldexp: (float -> (int -> float)); lor: (int -> (int -> int));
               lsl: (int -> (int -> int)); log10: (float -> float);
               invalid_arg: (string -> c41);
               input_char: (Pervasives.in_channel -> char);
               fst: ((w40 , x40) -> w40);
               close_in: (Pervasives.in_channel -> unit);
               lxor: (int -> (int -> int)); max_float: float;
               max: (f41 -> (f41 -> f41)); min: (e41 -> (e41 -> e41));
               mod: (int -> (int -> int)); min_int: int; min_float: float;
               max_int: int; modf: (float -> (float , float));
               neg_infinity: float; nan: float;
               open_in: (string -> Pervasives.in_channel);
               open_in_bin: (string -> Pervasives.in_channel);
               not: (bool -> bool);
               open_out: (string -> Pervasives.out_channel);
               or: (bool -> (bool -> bool));
               open_out_gen: (list Pervasives.open_flag -> (int -> (string -> Pervasives.out_channel)));
               open_out_bin: (string -> Pervasives.out_channel);
               output: (Pervasives.out_channel -> (string -> (int -> (int -> unit))));
               output_byte: (Pervasives.out_channel -> (int -> unit));
               output_binary_int: (Pervasives.out_channel -> (int -> unit));
               out_channel_length: (Pervasives.out_channel -> int);
               open_in_gen: (list Pervasives.open_flag -> (int -> (string -> Pervasives.in_channel)));
               mod_float: (float -> (float -> float));
               output_string: (Pervasives.out_channel -> (string -> unit));
               output_value: (Pervasives.out_channel -> (g41 -> unit));
               pos_out: (Pervasives.out_channel -> int);
               pos_in: (Pervasives.in_channel -> int);
               prerr_char: (char -> unit); prerr_float: (float -> unit);
               prerr_int: (int -> unit); prerr_endline: (string -> unit);
               pred: (int -> int); prerr_string: (string -> unit);
               print_float: (float -> unit); print_endline: (string -> unit);
               print_char: (char -> unit); print_newline: (unit -> unit);
               raise: (exn -> h41); print_string: (string -> unit);
               print_int: (int -> unit); read_int: (unit -> int);
               really_input: (Pervasives.in_channel -> (string -> (int -> (int -> unit))));
               read_line: (unit -> string);
               seek_in: (Pervasives.in_channel -> (int -> unit));
               ref: (i41 -> Pervasives.ref i41); read_float: (unit -> float);
               prerr_newline: (unit -> unit);
               set_binary_mode_out: (Pervasives.out_channel -> (bool -> unit));
               set_binary_mode_in: (Pervasives.in_channel -> (bool -> unit));
               sinh: (float -> float); sin: (float -> float);
               sqrt: (float -> float); stdin: Pervasives.in_channel;
               stderr: Pervasives.out_channel;
               string_fold: (string -> (m41 -> ((char -> (m41 -> m41)) -> m41)));
               stdout: Pervasives.out_channel; snd: ((j41 , k41) -> k41);
               string_of_bool: (bool -> string);
               string_of_float: (float -> string);
               string_of_int: (int -> string); tan: (float -> float);
               succ: (int -> int);
               string_of_format: (format6 n41 o41 p41 q41 r41 s41 -> string);
               truncate: (float -> int);
               unsafe_really_input: (Pervasives.in_channel -> (string -> (int -> (int -> unit))));
               ||: (bool -> (bool -> bool)); ~-.: (float -> float);
               ~-: (int -> int); valid_float_lexem: (string -> string);
               tanh: (float -> float);
               string_foldi: (string -> (l41 -> ((char -> (l41 -> l41)) -> (int -> l41))));
               seek_out: (Pervasives.out_channel -> (int -> unit));
               output_char: (Pervasives.out_channel -> (char -> unit));
               lsr: (int -> (int -> int)); 
               Types: type (t41) array = <abstr>;
               type () bool = | false | true ; type () board = array int;
               type () char = <abstr>;
               type () change_type = | FillSquare of int * int | PlaceValue of rectangle * int ;
               type () float = <abstr>;
               type (u41, v41, w41) format = Pervasives.format4 u41 v41 w41 w41;
               type (c42, d42, e42, f42, g42, h42) format6 = <abstr>;
               type () int = <abstr>; type () in_channel = <abstr>;
               type () fpclass = | FP_infinite | FP_nan | FP_normal | FP_subnormal | FP_zero ;
               type (x41, y41, a42, b42) format4 = format6 x41 y41 a42 a42 a42 b42;
               type () exn = ; type () int64 = <abstr>;
               type (j42) list = | :: of j42 * list j42 | [] ;
               type (i42) lazy_t = <abstr>;
               type (l42) option = | None | Some of l42 ;
               type () open_flag = | Open_append | Open_binary | Open_creat | Open_excl | Open_nonblock | Open_rdonly | Open_text | Open_trunc | Open_wronly ;
               type () nativeint = <abstr>;
               type () rectangle = (int , int , int , int);
               type () string = <abstr>; type () unit = | () ;
               type (k42) ref = {contents -> Mutablek42; };
               type () out_channel = <abstr>; type () int32 = <abstr>; 
[DBG generate] for pattern at 27,8-15 unparse
  (bound: {unparse -> m42; }, ty: m42, cs: {})
[DBG generate] for pattern at 27,16-17 b
  (bound: {b -> o42; }, ty: o42, cs: {})
[DBG generate] for_expr at 28,1-9 int_fold: v42 -
  {((int , int) -> (x42 -> ((int -> (x42 -> x42)) -> x42))) =int_fold= w42;
   w42 =28,1-9= v42; }
[DBG generate] for_expr at 28,11-12 0: a43 - {int =28,11-12= a43; }
[DBG generate] for_expr at 28,14-15 9: b43 - {int =28,14-15= b43; }
[DBG generate] for_expr at 28,12-15 (0, 9): y42 -
  {int =28,11-12= a43; y42 =28,12-15= (a43 , b43); int =28,14-15= b43; }
[DBG generate] for_expr at 28,1-15 int_fold~(0, 9): s42 -
  {((int , int) -> (x42 -> ((int -> (x42 -> x42)) -> x42))) =int_fold= w42;
   w42 =28,1-9= v42; y42 =28,1-15= t42; v42 =28,1-15= (t42 -> u42);
   s42 =28,1-15= u42; int =28,11-12= a43; y42 =28,12-15= (a43 , b43);
   int =28,14-15= b43; }
[DBG generate] for pattern at 28,22-23 j
  (bound: {j -> d43; }, ty: d43, cs: {})
[DBG generate] for pattern at 28,24-25 s
  (bound: {s -> f43; }, ty: f43, cs: {})
[DBG generate] for_expr at 32,6-7 (^): m43 -
  {(string -> (string -> string)) =Pervasives.(^)= n43; n43 =32,6-7= m43; }
[DBG generate] for_expr at 29,4-12 int_fold: x43 -
  {((int , int) -> (a44 -> ((int -> (a44 -> a44)) -> a44))) =int_fold= y43;
   y43 =29,4-12= x43; }
[DBG generate] for_expr at 29,14-15 0: c44 - {int =29,14-15= c44; }
[DBG generate] for_expr at 29,17-18 9: d44 - {int =29,17-18= d44; }
[DBG generate] for_expr at 29,15-18 (0, 9): b44 -
  {int =29,14-15= c44; b44 =29,15-18= (c44 , d44); int =29,17-18= d44; }
[DBG generate] for_expr at 29,4-18 int_fold~(0, 9): u43 -
  {((int , int) -> (a44 -> ((int -> (a44 -> a44)) -> a44))) =int_fold= y43;
   y43 =29,4-12= x43; b44 =29,4-18= v43; x43 =29,4-18= (v43 -> w43);
   u43 =29,4-18= w43; int =29,14-15= c44; b44 =29,15-18= (c44 , d44);
   int =29,17-18= d44; }
[DBG generate] for_expr at 29,20-21 s: e44 -
  {f44 =28,24-25= f43; e44 =29,20-21= f44; }
[DBG generate] for_expr at 29,4-21 int_fold~(0, 9)~s: r43 -
  {((int , int) -> (a44 -> ((int -> (a44 -> a44)) -> a44))) =int_fold= y43;
   f44 =28,24-25= f43; y43 =29,4-12= x43; b44 =29,4-18= v43;
   x43 =29,4-18= (v43 -> w43); u43 =29,4-18= w43; e44 =29,4-21= s43;
   u43 =29,4-21= (s43 -> t43); r43 =29,4-21= t43; int =29,14-15= c44;
   b44 =29,15-18= (c44 , d44); int =29,17-18= d44; e44 =29,20-21= f44; }
[DBG generate] for pattern at 29,27-28 i
  (bound: {i -> h44; }, ty: h44, cs: {})
[DBG generate] for pattern at 29,29-30 s
  (bound: {s -> j44; }, ty: j44, cs: {})
[DBG generate] for_expr at 30,8-9 (^): q44 -
  {(string -> (string -> string)) =Pervasives.(^)= r44; r44 =30,8-9= q44; }
[DBG generate] for_expr at 30,6-7 s: s44 -
  {t44 =29,29-30= j44; s44 =30,6-7= t44; }
[DBG generate] for_expr at 30,8-7 (^)~s: n44 -
  {(string -> (string -> string)) =Pervasives.(^)= r44; t44 =29,29-30= j44;
   s44 =30,6-7= t44; s44 =30,8-7= o44; q44 =30,8-7= (o44 -> p44);
   n44 =30,8-7= p44; r44 =30,8-9= q44; }
[DBG generate] for_expr at 30,39-40 (^): b45 -
  {(string -> (string -> string)) =Pervasives.(^)= c45; c45 =30,39-40= b45; }
[DBG generate] for_expr at 30,11-24 string_of_int: g45 -
  {(int -> string) =Pervasives.string_of_int= h45; h45 =30,11-24= g45; }
[DBG generate] for_expr at 30,26-30 bget: r45 -
  {(board -> (int -> (int -> int))) =bget= s45; s45 =30,26-30= r45; }
[DBG generate] for_expr at 30,31-32 b: t45 -
  {u45 =27,16-17= o42; t45 =30,31-32= u45; }
[DBG generate] for_expr at 30,26-32 bget~b: o45 -
  {(board -> (int -> (int -> int))) =bget= s45; u45 =27,16-17= o42;
   s45 =30,26-30= r45; t45 =30,26-32= p45; r45 =30,26-32= (p45 -> q45);
   o45 =30,26-32= q45; t45 =30,31-32= u45; }
[DBG generate] for_expr at 30,33-34 i: v45 -
  {w45 =29,27-28= h44; v45 =30,33-34= w45; }
[DBG generate] for_expr at 30,26-34 bget~b~i: l45 -
  {(board -> (int -> (int -> int))) =bget= s45; u45 =27,16-17= o42;
   w45 =29,27-28= h44; s45 =30,26-30= r45; t45 =30,26-32= p45;
   r45 =30,26-32= (p45 -> q45); o45 =30,26-32= q45; v45 =30,26-34= m45;
   o45 =30,26-34= (m45 -> n45); l45 =30,26-34= n45; t45 =30,31-32= u45;
   v45 =30,33-34= w45; }
[DBG generate] for_expr at 30,35-36 j: x45 -
  {y45 =28,22-23= d43; x45 =30,35-36= y45; }
[DBG generate] for_expr at 30,26-36 bget~b~i~j: i45 -
  {(board -> (int -> (int -> int))) =bget= s45; u45 =27,16-17= o42;
   y45 =28,22-23= d43; w45 =29,27-28= h44; s45 =30,26-30= r45;
   t45 =30,26-32= p45; r45 =30,26-32= (p45 -> q45); o45 =30,26-32= q45;
   v45 =30,26-34= m45; o45 =30,26-34= (m45 -> n45); l45 =30,26-34= n45;
   x45 =30,26-36= j45; l45 =30,26-36= (j45 -> k45); i45 =30,26-36= k45;
   t45 =30,31-32= u45; v45 =30,33-34= w45; x45 =30,35-36= y45; }
[DBG generate] for_expr at 30,25-37 string_of_int~bget~b~i~j: d45 -
  {(int -> string) =Pervasives.string_of_int= h45;
   (board -> (int -> (int -> int))) =bget= s45; u45 =27,16-17= o42;
   y45 =28,22-23= d43; w45 =29,27-28= h44; h45 =30,11-24= g45;
   i45 =30,25-37= e45; g45 =30,25-37= (e45 -> f45); d45 =30,25-37= f45;
   s45 =30,26-30= r45; t45 =30,26-32= p45; r45 =30,26-32= (p45 -> q45);
   o45 =30,26-32= q45; v45 =30,26-34= m45; o45 =30,26-34= (m45 -> n45);
   l45 =30,26-34= n45; x45 =30,26-36= j45; l45 =30,26-36= (j45 -> k45);
   i45 =30,26-36= k45; t45 =30,31-32= u45; v45 =30,33-34= w45;
   x45 =30,35-36= y45; }
[DBG generate] for_expr at 30,39-37 (^)~string_of_int~bget~b~i~j: x44 -
  {(string -> (string -> string)) =Pervasives.(^)= c45;
   (int -> string) =Pervasives.string_of_int= h45;
   (board -> (int -> (int -> int))) =bget= s45; u45 =27,16-17= o42;
   y45 =28,22-23= d43; w45 =29,27-28= h44; h45 =30,11-24= g45;
   i45 =30,25-37= e45; g45 =30,25-37= (e45 -> f45); d45 =30,25-37= f45;
   s45 =30,26-30= r45; t45 =30,26-32= p45; r45 =30,26-32= (p45 -> q45);
   o45 =30,26-32= q45; v45 =30,26-34= m45; o45 =30,26-34= (m45 -> n45);
   l45 =30,26-34= n45; x45 =30,26-36= j45; l45 =30,26-36= (j45 -> k45);
   i45 =30,26-36= k45; t45 =30,31-32= u45; v45 =30,33-34= w45;
   x45 =30,35-36= y45; d45 =30,39-37= y44; b45 =30,39-37= (y44 -> a45);
   x44 =30,39-37= a45; c45 =30,39-40= b45; }
[DBG generate] for_expr at 30,45-46 (^): g46 -
  {(string -> (string -> string)) =Pervasives.(^)= h46; h46 =30,45-46= g46; }
[DBG generate] for_expr at 30,41-44 " ": i46 - {string =30,41-44= i46; }
[DBG generate] for_expr at 30,45-44 (^)~" ": d46 -
  {(string -> (string -> string)) =Pervasives.(^)= h46;
   string =30,41-44= i46; i46 =30,45-44= e46; g46 =30,45-44= (e46 -> f46);
   d46 =30,45-44= f46; h46 =30,45-46= g46; }
[DBG generate] for_expr at 31,18-20 (&&): q46 -
  {(bool -> (bool -> bool)) =Pervasives.(&&)= r46; r46 =31,18-20= q46; }
[DBG generate] for_expr at 31,14-15 (=): y46 -
  {(b47 -> (b47 -> bool)) =Pervasives.(=)= a47; a47 =31,14-15= y46; }
[DBG generate] for_expr at 31,8-13 (mod): i47 -
  {(int -> (int -> int)) =Pervasives.(mod)= j47; j47 =31,8-13= i47; }
[DBG generate] for_expr at 31,6-7 i: k47 -
  {l47 =29,27-28= h44; k47 =31,6-7= l47; }
[DBG generate] for_expr at 31,8-7 (mod)~i: f47 -
  {(int -> (int -> int)) =Pervasives.(mod)= j47; l47 =29,27-28= h44;
   k47 =31,6-7= l47; k47 =31,8-7= g47; i47 =31,8-7= (g47 -> h47);
   f47 =31,8-7= h47; j47 =31,8-13= i47; }
[DBG generate] for_expr at 31,12-13 3: m47 - {int =31,12-13= m47; }
[DBG generate] for_expr at 31,8-13 i mod 3: c47 -
  {(int -> (int -> int)) =Pervasives.(mod)= j47; l47 =29,27-28= h44;
   k47 =31,6-7= l47; k47 =31,8-7= g47; i47 =31,8-7= (g47 -> h47);
   f47 =31,8-7= h47; m47 =31,8-13= d47; j47 =31,8-13= i47;
   f47 =31,8-13= (d47 -> e47); c47 =31,8-13= e47; int =31,12-13= m47; }
[DBG generate] for_expr at 31,14-13 (=)~i mod 3: v46 -
  {(b47 -> (b47 -> bool)) =Pervasives.(=)= a47;
   (int -> (int -> int)) =Pervasives.(mod)= j47; l47 =29,27-28= h44;
   k47 =31,6-7= l47; k47 =31,8-7= g47; i47 =31,8-7= (g47 -> h47);
   f47 =31,8-7= h47; m47 =31,8-13= d47; j47 =31,8-13= i47;
   f47 =31,8-13= (d47 -> e47); c47 =31,8-13= e47; int =31,12-13= m47;
   c47 =31,14-13= w46; y46 =31,14-13= (w46 -> x46); v46 =31,14-13= x46;
   a47 =31,14-15= y46; }
[DBG generate] for_expr at 31,16-17 2: n47 - {int =31,16-17= n47; }
[DBG generate] for_expr at 31,14-17 i mod 3 = 2: s46 -
  {(b47 -> (b47 -> bool)) =Pervasives.(=)= a47;
   (int -> (int -> int)) =Pervasives.(mod)= j47; l47 =29,27-28= h44;
   k47 =31,6-7= l47; k47 =31,8-7= g47; i47 =31,8-7= (g47 -> h47);
   f47 =31,8-7= h47; m47 =31,8-13= d47; j47 =31,8-13= i47;
   f47 =31,8-13= (d47 -> e47); c47 =31,8-13= e47; int =31,12-13= m47;
   c47 =31,14-13= w46; y46 =31,14-13= (w46 -> x46); v46 =31,14-13= x46;
   a47 =31,14-15= y46; n47 =31,14-17= t46; v46 =31,14-17= (t46 -> u46);
   s46 =31,14-17= u46; int =31,16-17= n47; }
[DBG generate] for_expr at 31,18-17 (&&)~i mod 3 = 2: n46 -
  {(bool -> (bool -> bool)) =Pervasives.(&&)= r46;
   (b47 -> (b47 -> bool)) =Pervasives.(=)= a47;
   (int -> (int -> int)) =Pervasives.(mod)= j47; l47 =29,27-28= h44;
   k47 =31,6-7= l47; k47 =31,8-7= g47; i47 =31,8-7= (g47 -> h47);
   f47 =31,8-7= h47; m47 =31,8-13= d47; j47 =31,8-13= i47;
   f47 =31,8-13= (d47 -> e47); c47 =31,8-13= e47; int =31,12-13= m47;
   c47 =31,14-13= w46; y46 =31,14-13= (w46 -> x46); v46 =31,14-13= x46;
   a47 =31,14-15= y46; n47 =31,14-17= t46; v46 =31,14-17= (t46 -> u46);
   s46 =31,14-17= u46; int =31,16-17= n47; s46 =31,18-17= o46;
   q46 =31,18-17= (o46 -> p46); n46 =31,18-17= p46; r46 =31,18-20= q46; }
[DBG generate] for_expr at 31,23-24 (<): u47 -
  {(w47 -> (w47 -> bool)) =Pervasives.(<)= v47; v47 =31,23-24= u47; }
[DBG generate] for_expr at 31,21-22 i: x47 -
  {y47 =29,27-28= h44; x47 =31,21-22= y47; }
[DBG generate] for_expr at 31,23-22 (<)~i: r47 -
  {(w47 -> (w47 -> bool)) =Pervasives.(<)= v47; y47 =29,27-28= h44;
   x47 =31,21-22= y47; x47 =31,23-22= s47; u47 =31,23-22= (s47 -> t47);
   r47 =31,23-22= t47; v47 =31,23-24= u47; }
[DBG generate] for_expr at 31,25-26 8: a48 - {int =31,25-26= a48; }
[DBG generate] for_expr at 31,23-26 i < 8: o47 -
  {(w47 -> (w47 -> bool)) =Pervasives.(<)= v47; y47 =29,27-28= h44;
   x47 =31,21-22= y47; x47 =31,23-22= s47; u47 =31,23-22= (s47 -> t47);
   r47 =31,23-22= t47; v47 =31,23-24= u47; a48 =31,23-26= p47;
   r47 =31,23-26= (p47 -> q47); o47 =31,23-26= q47; int =31,25-26= a48; }
[DBG generate] for_expr at 31,18-26 i mod 3 = 2 && i < 8: k46 -
  {(bool -> (bool -> bool)) =Pervasives.(&&)= r46;
   (w47 -> (w47 -> bool)) =Pervasives.(<)= v47;
   (b47 -> (b47 -> bool)) =Pervasives.(=)= a47;
   (int -> (int -> int)) =Pervasives.(mod)= j47; y47 =29,27-28= h44;
   l47 =29,27-28= h44; k47 =31,6-7= l47; k47 =31,8-7= g47;
   i47 =31,8-7= (g47 -> h47); f47 =31,8-7= h47; m47 =31,8-13= d47;
   j47 =31,8-13= i47; f47 =31,8-13= (d47 -> e47); c47 =31,8-13= e47;
   int =31,12-13= m47; c47 =31,14-13= w46; y46 =31,14-13= (w46 -> x46);
   v46 =31,14-13= x46; a47 =31,14-15= y46; n47 =31,14-17= t46;
   v46 =31,14-17= (t46 -> u46); s46 =31,14-17= u46; int =31,16-17= n47;
   s46 =31,18-17= o46; q46 =31,18-17= (o46 -> p46); n46 =31,18-17= p46;
   r46 =31,18-20= q46; o47 =31,18-26= l46; n46 =31,18-26= (l46 -> m46);
   k46 =31,18-26= m46; x47 =31,21-22= y47; x47 =31,23-22= s47;
   u47 =31,23-22= (s47 -> t47); r47 =31,23-22= t47; v47 =31,23-24= u47;
   a48 =31,23-26= p47; r47 =31,23-26= (p47 -> q47); o47 =31,23-26= q47;
   int =31,25-26= a48; }
[DBG generate] for_expr at 31,32-36 "| ": b48 - {string =31,32-36= b48; }
[DBG generate] for_expr at 31,42-44 "": c48 - {string =31,42-44= c48; }
[DBG generate] for_expr at 31,3-44 if i mod 3 = 2 && i < 8 then "| " else "":
  j46 -
  {(bool -> (bool -> bool)) =Pervasives.(&&)= r46;
   (w47 -> (w47 -> bool)) =Pervasives.(<)= v47;
   (b47 -> (b47 -> bool)) =Pervasives.(=)= a47;
   (int -> (int -> int)) =Pervasives.(mod)= j47; y47 =29,27-28= h44;
   l47 =29,27-28= h44; c48 =31,3-44= j46; b48 =31,3-44= j46;
   k46 =31,3-44= bool; k47 =31,6-7= l47; k47 =31,8-7= g47;
   i47 =31,8-7= (g47 -> h47); f47 =31,8-7= h47; m47 =31,8-13= d47;
   j47 =31,8-13= i47; f47 =31,8-13= (d47 -> e47); c47 =31,8-13= e47;
   int =31,12-13= m47; c47 =31,14-13= w46; y46 =31,14-13= (w46 -> x46);
   v46 =31,14-13= x46; a47 =31,14-15= y46; n47 =31,14-17= t46;
   v46 =31,14-17= (t46 -> u46); s46 =31,14-17= u46; int =31,16-17= n47;
   s46 =31,18-17= o46; q46 =31,18-17= (o46 -> p46); n46 =31,18-17= p46;
   r46 =31,18-20= q46; o47 =31,18-26= l46; n46 =31,18-26= (l46 -> m46);
   k46 =31,18-26= m46; x47 =31,21-22= y47; x47 =31,23-22= s47;
   u47 =31,23-22= (s47 -> t47); r47 =31,23-22= t47; v47 =31,23-24= u47;
   a48 =31,23-26= p47; r47 =31,23-26= (p47 -> q47); o47 =31,23-26= q47;
   int =31,25-26= a48; string =31,32-36= b48; string =31,42-44= c48; }
[DBG generate] for_expr at 30,45-31,44
  " " ^ if i mod 3 = 2 && i < 8 then "| " else "": a46 -
  {(bool -> (bool -> bool)) =Pervasives.(&&)= r46;
   (w47 -> (w47 -> bool)) =Pervasives.(<)= v47;
   (b47 -> (b47 -> bool)) =Pervasives.(=)= a47;
   (string -> (string -> string)) =Pervasives.(^)= h46;
   (int -> (int -> int)) =Pervasives.(mod)= j47; y47 =29,27-28= h44;
   l47 =29,27-28= h44; string =30,41-44= i46; i46 =30,45-44= e46;
   g46 =30,45-44= (e46 -> f46); d46 =30,45-44= f46; h46 =30,45-46= g46;
   j46 =30,45-31,44= b46; d46 =30,45-31,44= (b46 -> c46);
   a46 =30,45-31,44= c46; c48 =31,3-44= j46; b48 =31,3-44= j46;
   k46 =31,3-44= bool; k47 =31,6-7= l47; k47 =31,8-7= g47;
   i47 =31,8-7= (g47 -> h47); f47 =31,8-7= h47; m47 =31,8-13= d47;
   j47 =31,8-13= i47; f47 =31,8-13= (d47 -> e47); c47 =31,8-13= e47;
   int =31,12-13= m47; c47 =31,14-13= w46; y46 =31,14-13= (w46 -> x46);
   v46 =31,14-13= x46; a47 =31,14-15= y46; n47 =31,14-17= t46;
   v46 =31,14-17= (t46 -> u46); s46 =31,14-17= u46; int =31,16-17= n47;
   s46 =31,18-17= o46; q46 =31,18-17= (o46 -> p46); n46 =31,18-17= p46;
   r46 =31,18-20= q46; o47 =31,18-26= l46; n46 =31,18-26= (l46 -> m46);
   k46 =31,18-26= m46; x47 =31,21-22= y47; x47 =31,23-22= s47;
   u47 =31,23-22= (s47 -> t47); r47 =31,23-22= t47; v47 =31,23-24= u47;
   a48 =31,23-26= p47; r47 =31,23-26= (p47 -> q47); o47 =31,23-26= q47;
   int =31,25-26= a48; string =31,32-36= b48; string =31,42-44= c48; }
[DBG generate] for_expr at 30,39-31,45
  string_of_int~bget~b~i~j ^ " " ^ if i mod 3 = 2 && i < 8 then "| " else "":
  u44 -
  {(bool -> (bool -> bool)) =Pervasives.(&&)= r46;
   (w47 -> (w47 -> bool)) =Pervasives.(<)= v47;
   (b47 -> (b47 -> bool)) =Pervasives.(=)= a47;
   (string -> (string -> string)) =Pervasives.(^)= c45;
   (string -> (string -> string)) =Pervasives.(^)= h46;
   (int -> (int -> int)) =Pervasives.(mod)= j47;
   (int -> string) =Pervasives.string_of_int= h45;
   (board -> (int -> (int -> int))) =bget= s45; u45 =27,16-17= o42;
   y45 =28,22-23= d43; y47 =29,27-28= h44; l47 =29,27-28= h44;
   w45 =29,27-28= h44; h45 =30,11-24= g45; i45 =30,25-37= e45;
   g45 =30,25-37= (e45 -> f45); d45 =30,25-37= f45; s45 =30,26-30= r45;
   t45 =30,26-32= p45; r45 =30,26-32= (p45 -> q45); o45 =30,26-32= q45;
   v45 =30,26-34= m45; o45 =30,26-34= (m45 -> n45); l45 =30,26-34= n45;
   x45 =30,26-36= j45; l45 =30,26-36= (j45 -> k45); i45 =30,26-36= k45;
   t45 =30,31-32= u45; v45 =30,33-34= w45; x45 =30,35-36= y45;
   d45 =30,39-37= y44; b45 =30,39-37= (y44 -> a45); x44 =30,39-37= a45;
   c45 =30,39-40= b45; a46 =30,39-31,45= v44; x44 =30,39-31,45= (v44 -> w44);
   u44 =30,39-31,45= w44; string =30,41-44= i46; i46 =30,45-44= e46;
   g46 =30,45-44= (e46 -> f46); d46 =30,45-44= f46; h46 =30,45-46= g46;
   j46 =30,45-31,44= b46; d46 =30,45-31,44= (b46 -> c46);
   a46 =30,45-31,44= c46; c48 =31,3-44= j46; b48 =31,3-44= j46;
   k46 =31,3-44= bool; k47 =31,6-7= l47; k47 =31,8-7= g47;
   i47 =31,8-7= (g47 -> h47); f47 =31,8-7= h47; m47 =31,8-13= d47;
   j47 =31,8-13= i47; f47 =31,8-13= (d47 -> e47); c47 =31,8-13= e47;
   int =31,12-13= m47; c47 =31,14-13= w46; y46 =31,14-13= (w46 -> x46);
   v46 =31,14-13= x46; a47 =31,14-15= y46; n47 =31,14-17= t46;
   v46 =31,14-17= (t46 -> u46); s46 =31,14-17= u46; int =31,16-17= n47;
   s46 =31,18-17= o46; q46 =31,18-17= (o46 -> p46); n46 =31,18-17= p46;
   r46 =31,18-20= q46; o47 =31,18-26= l46; n46 =31,18-26= (l46 -> m46);
   k46 =31,18-26= m46; x47 =31,21-22= y47; x47 =31,23-22= s47;
   u47 =31,23-22= (s47 -> t47); r47 =31,23-22= t47; v47 =31,23-24= u47;
   a48 =31,23-26= p47; r47 =31,23-26= (p47 -> q47); o47 =31,23-26= q47;
   int =31,25-26= a48; string =31,32-36= b48; string =31,42-44= c48; }
[DBG generate] for_expr at 30,8-31,45
  s ^
    string_of_int~bget~b~i~j ^
      " " ^ if i mod 3 = 2 && i < 8 then "| " else "":
  k44 -
  {(bool -> (bool -> bool)) =Pervasives.(&&)= r46;
   (w47 -> (w47 -> bool)) =Pervasives.(<)= v47;
   (b47 -> (b47 -> bool)) =Pervasives.(=)= a47;
   (string -> (string -> string)) =Pervasives.(^)= r44;
   (string -> (string -> string)) =Pervasives.(^)= c45;
   (string -> (string -> string)) =Pervasives.(^)= h46;
   (int -> (int -> int)) =Pervasives.(mod)= j47;
   (int -> string) =Pervasives.string_of_int= h45;
   (board -> (int -> (int -> int))) =bget= s45; u45 =27,16-17= o42;
   y45 =28,22-23= d43; y47 =29,27-28= h44; l47 =29,27-28= h44;
   w45 =29,27-28= h44; t44 =29,29-30= j44; s44 =30,6-7= t44;
   s44 =30,8-7= o44; q44 =30,8-7= (o44 -> p44); n44 =30,8-7= p44;
   r44 =30,8-9= q44; u44 =30,8-31,45= l44; n44 =30,8-31,45= (l44 -> m44);
   k44 =30,8-31,45= m44; h45 =30,11-24= g45; i45 =30,25-37= e45;
   g45 =30,25-37= (e45 -> f45); d45 =30,25-37= f45; s45 =30,26-30= r45;
   t45 =30,26-32= p45; r45 =30,26-32= (p45 -> q45); o45 =30,26-32= q45;
   v45 =30,26-34= m45; o45 =30,26-34= (m45 -> n45); l45 =30,26-34= n45;
   x45 =30,26-36= j45; l45 =30,26-36= (j45 -> k45); i45 =30,26-36= k45;
   t45 =30,31-32= u45; v45 =30,33-34= w45; x45 =30,35-36= y45;
   d45 =30,39-37= y44; b45 =30,39-37= (y44 -> a45); x44 =30,39-37= a45;
   c45 =30,39-40= b45; a46 =30,39-31,45= v44; x44 =30,39-31,45= (v44 -> w44);
   u44 =30,39-31,45= w44; string =30,41-44= i46; i46 =30,45-44= e46;
   g46 =30,45-44= (e46 -> f46); d46 =30,45-44= f46; h46 =30,45-46= g46;
   j46 =30,45-31,44= b46; d46 =30,45-31,44= (b46 -> c46);
   a46 =30,45-31,44= c46; c48 =31,3-44= j46; b48 =31,3-44= j46;
   k46 =31,3-44= bool; k47 =31,6-7= l47; k47 =31,8-7= g47;
   i47 =31,8-7= (g47 -> h47); f47 =31,8-7= h47; m47 =31,8-13= d47;
   j47 =31,8-13= i47; f47 =31,8-13= (d47 -> e47); c47 =31,8-13= e47;
   int =31,12-13= m47; c47 =31,14-13= w46; y46 =31,14-13= (w46 -> x46);
   v46 =31,14-13= x46; a47 =31,14-15= y46; n47 =31,14-17= t46;
   v46 =31,14-17= (t46 -> u46); s46 =31,14-17= u46; int =31,16-17= n47;
   s46 =31,18-17= o46; q46 =31,18-17= (o46 -> p46); n46 =31,18-17= p46;
   r46 =31,18-20= q46; o47 =31,18-26= l46; n46 =31,18-26= (l46 -> m46);
   k46 =31,18-26= m46; x47 =31,21-22= y47; x47 =31,23-22= s47;
   u47 =31,23-22= (s47 -> t47); r47 =31,23-22= t47; v47 =31,23-24= u47;
   a48 =31,23-26= p47; r47 =31,23-26= (p47 -> q47); o47 =31,23-26= q47;
   int =31,25-26= a48; string =31,32-36= b48; string =31,42-44= c48; }
[DBG generate] for_expr at 29,29-31,45
  function
    s ->
    s ^
      string_of_int~bget~b~i~j ^
        " " ^ if i mod 3 = 2 && i < 8 then "| " else "":
  i44 -
  {(bool -> (bool -> bool)) =Pervasives.(&&)= r46;
   (w47 -> (w47 -> bool)) =Pervasives.(<)= v47;
   (b47 -> (b47 -> bool)) =Pervasives.(=)= a47;
   (string -> (string -> string)) =Pervasives.(^)= r44;
   (string -> (string -> string)) =Pervasives.(^)= c45;
   (string -> (string -> string)) =Pervasives.(^)= h46;
   (int -> (int -> int)) =Pervasives.(mod)= j47;
   (int -> string) =Pervasives.string_of_int= h45;
   (board -> (int -> (int -> int))) =bget= s45; u45 =27,16-17= o42;
   y45 =28,22-23= d43; y47 =29,27-28= h44; l47 =29,27-28= h44;
   w45 =29,27-28= h44; t44 =29,29-30= j44; g48 =29,29-31,45= d48;
   g48 =29,29-31,45= k44; f48 =29,29-31,45= e48; f48 =29,29-31,45= j44;
   i44 =29,29-31,45= (f48 -> g48); s44 =30,6-7= t44; s44 =30,8-7= o44;
   q44 =30,8-7= (o44 -> p44); n44 =30,8-7= p44; r44 =30,8-9= q44;
   u44 =30,8-31,45= l44; n44 =30,8-31,45= (l44 -> m44); k44 =30,8-31,45= m44;
   h45 =30,11-24= g45; i45 =30,25-37= e45; g45 =30,25-37= (e45 -> f45);
   d45 =30,25-37= f45; s45 =30,26-30= r45; t45 =30,26-32= p45;
   r45 =30,26-32= (p45 -> q45); o45 =30,26-32= q45; v45 =30,26-34= m45;
   o45 =30,26-34= (m45 -> n45); l45 =30,26-34= n45; x45 =30,26-36= j45;
   l45 =30,26-36= (j45 -> k45); i45 =30,26-36= k45; t45 =30,31-32= u45;
   v45 =30,33-34= w45; x45 =30,35-36= y45; d45 =30,39-37= y44;
   b45 =30,39-37= (y44 -> a45); x44 =30,39-37= a45; c45 =30,39-40= b45;
   a46 =30,39-31,45= v44; x44 =30,39-31,45= (v44 -> w44);
   u44 =30,39-31,45= w44; string =30,41-44= i46; i46 =30,45-44= e46;
   g46 =30,45-44= (e46 -> f46); d46 =30,45-44= f46; h46 =30,45-46= g46;
   j46 =30,45-31,44= b46; d46 =30,45-31,44= (b46 -> c46);
   a46 =30,45-31,44= c46; c48 =31,3-44= j46; b48 =31,3-44= j46;
   k46 =31,3-44= bool; k47 =31,6-7= l47; k47 =31,8-7= g47;
   i47 =31,8-7= (g47 -> h47); f47 =31,8-7= h47; m47 =31,8-13= d47;
   j47 =31,8-13= i47; f47 =31,8-13= (d47 -> e47); c47 =31,8-13= e47;
   int =31,12-13= m47; c47 =31,14-13= w46; y46 =31,14-13= (w46 -> x46);
   v46 =31,14-13= x46; a47 =31,14-15= y46; n47 =31,14-17= t46;
   v46 =31,14-17= (t46 -> u46); s46 =31,14-17= u46; int =31,16-17= n47;
   s46 =31,18-17= o46; q46 =31,18-17= (o46 -> p46); n46 =31,18-17= p46;
   r46 =31,18-20= q46; o47 =31,18-26= l46; n46 =31,18-26= (l46 -> m46);
   k46 =31,18-26= m46; x47 =31,21-22= y47; x47 =31,23-22= s47;
   u47 =31,23-22= (s47 -> t47); r47 =31,23-22= t47; v47 =31,23-24= u47;
   a48 =31,23-26= p47; r47 =31,23-26= (p47 -> q47); o47 =31,23-26= q47;
   int =31,25-26= a48; string =31,32-36= b48; string =31,42-44= c48; }
[DBG generate] for_expr at 29,27-31,45
  function
    i ->
    function
      s ->
      s ^
        string_of_int~bget~b~i~j ^
          " " ^ if i mod 3 = 2 && i < 8 then "| " else "":
  g44 -
  {(bool -> (bool -> bool)) =Pervasives.(&&)= r46;
   (w47 -> (w47 -> bool)) =Pervasives.(<)= v47;
   (b47 -> (b47 -> bool)) =Pervasives.(=)= a47;
   (string -> (string -> string)) =Pervasives.(^)= r44;
   (string -> (string -> string)) =Pervasives.(^)= c45;
   (string -> (string -> string)) =Pervasives.(^)= h46;
   (int -> (int -> int)) =Pervasives.(mod)= j47;
   (int -> string) =Pervasives.string_of_int= h45;
   (board -> (int -> (int -> int))) =bget= s45; u45 =27,16-17= o42;
   y45 =28,22-23= d43; y47 =29,27-28= h44; l47 =29,27-28= h44;
   w45 =29,27-28= h44; k48 =29,27-31,45= h48; k48 =29,27-31,45= i44;
   j48 =29,27-31,45= i48; j48 =29,27-31,45= h44;
   g44 =29,27-31,45= (j48 -> k48); t44 =29,29-30= j44; g48 =29,29-31,45= d48;
   g48 =29,29-31,45= k44; f48 =29,29-31,45= e48; f48 =29,29-31,45= j44;
   i44 =29,29-31,45= (f48 -> g48); s44 =30,6-7= t44; s44 =30,8-7= o44;
   q44 =30,8-7= (o44 -> p44); n44 =30,8-7= p44; r44 =30,8-9= q44;
   u44 =30,8-31,45= l44; n44 =30,8-31,45= (l44 -> m44); k44 =30,8-31,45= m44;
   h45 =30,11-24= g45; i45 =30,25-37= e45; g45 =30,25-37= (e45 -> f45);
   d45 =30,25-37= f45; s45 =30,26-30= r45; t45 =30,26-32= p45;
   r45 =30,26-32= (p45 -> q45); o45 =30,26-32= q45; v45 =30,26-34= m45;
   o45 =30,26-34= (m45 -> n45); l45 =30,26-34= n45; x45 =30,26-36= j45;
   l45 =30,26-36= (j45 -> k45); i45 =30,26-36= k45; t45 =30,31-32= u45;
   v45 =30,33-34= w45; x45 =30,35-36= y45; d45 =30,39-37= y44;
   b45 =30,39-37= (y44 -> a45); x44 =30,39-37= a45; c45 =30,39-40= b45;
   a46 =30,39-31,45= v44; x44 =30,39-31,45= (v44 -> w44);
   u44 =30,39-31,45= w44; string =30,41-44= i46; i46 =30,45-44= e46;
   g46 =30,45-44= (e46 -> f46); d46 =30,45-44= f46; h46 =30,45-46= g46;
   j46 =30,45-31,44= b46; d46 =30,45-31,44= (b46 -> c46);
   a46 =30,45-31,44= c46; c48 =31,3-44= j46; b48 =31,3-44= j46;
   k46 =31,3-44= bool; k47 =31,6-7= l47; k47 =31,8-7= g47;
   i47 =31,8-7= (g47 -> h47); f47 =31,8-7= h47; m47 =31,8-13= d47;
   j47 =31,8-13= i47; f47 =31,8-13= (d47 -> e47); c47 =31,8-13= e47;
   int =31,12-13= m47; c47 =31,14-13= w46; y46 =31,14-13= (w46 -> x46);
   v46 =31,14-13= x46; a47 =31,14-15= y46; n47 =31,14-17= t46;
   v46 =31,14-17= (t46 -> u46); s46 =31,14-17= u46; int =31,16-17= n47;
   s46 =31,18-17= o46; q46 =31,18-17= (o46 -> p46); n46 =31,18-17= p46;
   r46 =31,18-20= q46; o47 =31,18-26= l46; n46 =31,18-26= (l46 -> m46);
   k46 =31,18-26= m46; x47 =31,21-22= y47; x47 =31,23-22= s47;
   u47 =31,23-22= (s47 -> t47); r47 =31,23-22= t47; v47 =31,23-24= u47;
   a48 =31,23-26= p47; r47 =31,23-26= (p47 -> q47); o47 =31,23-26= q47;
   int =31,25-26= a48; string =31,32-36= b48; string =31,42-44= c48; }
[DBG generate] for_expr at 29,4-31,45
  int_fold~(0, 9)~s~function
                      i ->
                      function
                        s ->
                        s ^
                          string_of_int~bget~b~i~j ^
                            " " ^ if i mod 3 = 2 && i < 8 then "| " else "":
  o43 -
  {(bool -> (bool -> bool)) =Pervasives.(&&)= r46;
   (w47 -> (w47 -> bool)) =Pervasives.(<)= v47;
   (b47 -> (b47 -> bool)) =Pervasives.(=)= a47;
   (string -> (string -> string)) =Pervasives.(^)= r44;
   (string -> (string -> string)) =Pervasives.(^)= c45;
   (string -> (string -> string)) =Pervasives.(^)= h46;
   (int -> (int -> int)) =Pervasives.(mod)= j47;
   (int -> string) =Pervasives.string_of_int= h45;
   (board -> (int -> (int -> int))) =bget= s45;
   ((int , int) -> (a44 -> ((int -> (a44 -> a44)) -> a44))) =int_fold= y43;
   u45 =27,16-17= o42; y45 =28,22-23= d43; f44 =28,24-25= f43;
   y43 =29,4-12= x43; b44 =29,4-18= v43; x43 =29,4-18= (v43 -> w43);
   u43 =29,4-18= w43; e44 =29,4-21= s43; u43 =29,4-21= (s43 -> t43);
   r43 =29,4-21= t43; g44 =29,4-31,45= p43; r43 =29,4-31,45= (p43 -> q43);
   o43 =29,4-31,45= q43; int =29,14-15= c44; b44 =29,15-18= (c44 , d44);
   int =29,17-18= d44; e44 =29,20-21= f44; y47 =29,27-28= h44;
   l47 =29,27-28= h44; w45 =29,27-28= h44; k48 =29,27-31,45= h48;
   k48 =29,27-31,45= i44; j48 =29,27-31,45= i48; j48 =29,27-31,45= h44;
   g44 =29,27-31,45= (j48 -> k48); t44 =29,29-30= j44; g48 =29,29-31,45= d48;
   g48 =29,29-31,45= k44; f48 =29,29-31,45= e48; f48 =29,29-31,45= j44;
   i44 =29,29-31,45= (f48 -> g48); s44 =30,6-7= t44; s44 =30,8-7= o44;
   q44 =30,8-7= (o44 -> p44); n44 =30,8-7= p44; r44 =30,8-9= q44;
   u44 =30,8-31,45= l44; n44 =30,8-31,45= (l44 -> m44); k44 =30,8-31,45= m44;
   h45 =30,11-24= g45; i45 =30,25-37= e45; g45 =30,25-37= (e45 -> f45);
   d45 =30,25-37= f45; s45 =30,26-30= r45; t45 =30,26-32= p45;
   r45 =30,26-32= (p45 -> q45); o45 =30,26-32= q45; v45 =30,26-34= m45;
   o45 =30,26-34= (m45 -> n45); l45 =30,26-34= n45; x45 =30,26-36= j45;
   l45 =30,26-36= (j45 -> k45); i45 =30,26-36= k45; t45 =30,31-32= u45;
   v45 =30,33-34= w45; x45 =30,35-36= y45; d45 =30,39-37= y44;
   b45 =30,39-37= (y44 -> a45); x44 =30,39-37= a45; c45 =30,39-40= b45;
   a46 =30,39-31,45= v44; x44 =30,39-31,45= (v44 -> w44);
   u44 =30,39-31,45= w44; string =30,41-44= i46; i46 =30,45-44= e46;
   g46 =30,45-44= (e46 -> f46); d46 =30,45-44= f46; h46 =30,45-46= g46;
   j46 =30,45-31,44= b46; d46 =30,45-31,44= (b46 -> c46);
   a46 =30,45-31,44= c46; c48 =31,3-44= j46; b48 =31,3-44= j46;
   k46 =31,3-44= bool; k47 =31,6-7= l47; k47 =31,8-7= g47;
   i47 =31,8-7= (g47 -> h47); f47 =31,8-7= h47; m47 =31,8-13= d47;
   j47 =31,8-13= i47; f47 =31,8-13= (d47 -> e47); c47 =31,8-13= e47;
   int =31,12-13= m47; c47 =31,14-13= w46; y46 =31,14-13= (w46 -> x46);
   v46 =31,14-13= x46; a47 =31,14-15= y46; n47 =31,14-17= t46;
   v46 =31,14-17= (t46 -> u46); s46 =31,14-17= u46; int =31,16-17= n47;
   s46 =31,18-17= o46; q46 =31,18-17= (o46 -> p46); n46 =31,18-17= p46;
   r46 =31,18-20= q46; o47 =31,18-26= l46; n46 =31,18-26= (l46 -> m46);
   k46 =31,18-26= m46; x47 =31,21-22= y47; x47 =31,23-22= s47;
   u47 =31,23-22= (s47 -> t47); r47 =31,23-22= t47; v47 =31,23-24= u47;
   a48 =31,23-26= p47; r47 =31,23-26= (p47 -> q47); o47 =31,23-26= q47;
   int =31,25-26= a48; string =31,32-36= b48; string =31,42-44= c48; }
[DBG generate] for_expr at 32,6-5
  (^)~int_fold~(0, 9)~s~function
                          i ->
                          function
                            s ->
                            s ^
                              string_of_int~bget~b~i~j ^
                                " " ^
                                  if i mod 3 = 2 && i < 8 then "| " else "":
  j43 -
  {(bool -> (bool -> bool)) =Pervasives.(&&)= r46;
   (w47 -> (w47 -> bool)) =Pervasives.(<)= v47;
   (b47 -> (b47 -> bool)) =Pervasives.(=)= a47;
   (string -> (string -> string)) =Pervasives.(^)= r44;
   (string -> (string -> string)) =Pervasives.(^)= c45;
   (string -> (string -> string)) =Pervasives.(^)= h46;
   (string -> (string -> string)) =Pervasives.(^)= n43;
   (int -> (int -> int)) =Pervasives.(mod)= j47;
   (int -> string) =Pervasives.string_of_int= h45;
   (board -> (int -> (int -> int))) =bget= s45;
   ((int , int) -> (a44 -> ((int -> (a44 -> a44)) -> a44))) =int_fold= y43;
   u45 =27,16-17= o42; y45 =28,22-23= d43; f44 =28,24-25= f43;
   y43 =29,4-12= x43; b44 =29,4-18= v43; x43 =29,4-18= (v43 -> w43);
   u43 =29,4-18= w43; e44 =29,4-21= s43; u43 =29,4-21= (s43 -> t43);
   r43 =29,4-21= t43; g44 =29,4-31,45= p43; r43 =29,4-31,45= (p43 -> q43);
   o43 =29,4-31,45= q43; int =29,14-15= c44; b44 =29,15-18= (c44 , d44);
   int =29,17-18= d44; e44 =29,20-21= f44; y47 =29,27-28= h44;
   l47 =29,27-28= h44; w45 =29,27-28= h44; k48 =29,27-31,45= h48;
   k48 =29,27-31,45= i44; j48 =29,27-31,45= i48; j48 =29,27-31,45= h44;
   g44 =29,27-31,45= (j48 -> k48); t44 =29,29-30= j44; g48 =29,29-31,45= d48;
   g48 =29,29-31,45= k44; f48 =29,29-31,45= e48; f48 =29,29-31,45= j44;
   i44 =29,29-31,45= (f48 -> g48); s44 =30,6-7= t44; s44 =30,8-7= o44;
   q44 =30,8-7= (o44 -> p44); n44 =30,8-7= p44; r44 =30,8-9= q44;
   u44 =30,8-31,45= l44; n44 =30,8-31,45= (l44 -> m44); k44 =30,8-31,45= m44;
   h45 =30,11-24= g45; i45 =30,25-37= e45; g45 =30,25-37= (e45 -> f45);
   d45 =30,25-37= f45; s45 =30,26-30= r45; t45 =30,26-32= p45;
   r45 =30,26-32= (p45 -> q45); o45 =30,26-32= q45; v45 =30,26-34= m45;
   o45 =30,26-34= (m45 -> n45); l45 =30,26-34= n45; x45 =30,26-36= j45;
   l45 =30,26-36= (j45 -> k45); i45 =30,26-36= k45; t45 =30,31-32= u45;
   v45 =30,33-34= w45; x45 =30,35-36= y45; d45 =30,39-37= y44;
   b45 =30,39-37= (y44 -> a45); x44 =30,39-37= a45; c45 =30,39-40= b45;
   a46 =30,39-31,45= v44; x44 =30,39-31,45= (v44 -> w44);
   u44 =30,39-31,45= w44; string =30,41-44= i46; i46 =30,45-44= e46;
   g46 =30,45-44= (e46 -> f46); d46 =30,45-44= f46; h46 =30,45-46= g46;
   j46 =30,45-31,44= b46; d46 =30,45-31,44= (b46 -> c46);
   a46 =30,45-31,44= c46; c48 =31,3-44= j46; b48 =31,3-44= j46;
   k46 =31,3-44= bool; k47 =31,6-7= l47; k47 =31,8-7= g47;
   i47 =31,8-7= (g47 -> h47); f47 =31,8-7= h47; m47 =31,8-13= d47;
   j47 =31,8-13= i47; f47 =31,8-13= (d47 -> e47); c47 =31,8-13= e47;
   int =31,12-13= m47; c47 =31,14-13= w46; y46 =31,14-13= (w46 -> x46);
   v46 =31,14-13= x46; a47 =31,14-15= y46; n47 =31,14-17= t46;
   v46 =31,14-17= (t46 -> u46); s46 =31,14-17= u46; int =31,16-17= n47;
   s46 =31,18-17= o46; q46 =31,18-17= (o46 -> p46); n46 =31,18-17= p46;
   r46 =31,18-20= q46; o47 =31,18-26= l46; n46 =31,18-26= (l46 -> m46);
   k46 =31,18-26= m46; x47 =31,21-22= y47; x47 =31,23-22= s47;
   u47 =31,23-22= (s47 -> t47); r47 =31,23-22= t47; v47 =31,23-24= u47;
   a48 =31,23-26= p47; r47 =31,23-26= (p47 -> q47); o47 =31,23-26= q47;
   int =31,25-26= a48; string =31,32-36= b48; string =31,42-44= c48;
   o43 =32,6-5= k43; m43 =32,6-5= (k43 -> l43); j43 =32,6-5= l43;
   n43 =32,6-7= m43; }
[DBG generate] for_expr at 32,13-14 (^): r48 -
  {(string -> (string -> string)) =Pervasives.(^)= s48; s48 =32,13-14= r48; }
[DBG generate] for_expr at 32,8-12 "\n": t48 - {string =32,8-12= t48; }
[DBG generate] for_expr at 32,13-12 (^)~"\n": o48 -
  {(string -> (string -> string)) =Pervasives.(^)= s48; string =32,8-12= t48;
   t48 =32,13-12= p48; r48 =32,13-12= (p48 -> q48); o48 =32,13-12= q48;
   s48 =32,13-14= r48; }
[DBG generate] for_expr at 33,20-22 (&&): c49 -
  {(bool -> (bool -> bool)) =Pervasives.(&&)= d49; d49 =33,20-22= c49; }
[DBG generate] for_expr at 33,16-17 (=): k49 -
  {(m49 -> (m49 -> bool)) =Pervasives.(=)= l49; l49 =33,16-17= k49; }
[DBG generate] for_expr at 33,10-15 (mod): t49 -
  {(int -> (int -> int)) =Pervasives.(mod)= u49; u49 =33,10-15= t49; }
[DBG generate] for_expr at 33,8-9 j: v49 -
  {w49 =28,22-23= d43; v49 =33,8-9= w49; }
[DBG generate] for_expr at 33,10-9 (mod)~j: q49 -
  {(int -> (int -> int)) =Pervasives.(mod)= u49; w49 =28,22-23= d43;
   v49 =33,8-9= w49; v49 =33,10-9= r49; t49 =33,10-9= (r49 -> s49);
   q49 =33,10-9= s49; u49 =33,10-15= t49; }
[DBG generate] for_expr at 33,14-15 3: x49 - {int =33,14-15= x49; }
[DBG generate] for_expr at 33,10-15 j mod 3: n49 -
  {(int -> (int -> int)) =Pervasives.(mod)= u49; w49 =28,22-23= d43;
   v49 =33,8-9= w49; v49 =33,10-9= r49; t49 =33,10-9= (r49 -> s49);
   q49 =33,10-9= s49; x49 =33,10-15= o49; u49 =33,10-15= t49;
   q49 =33,10-15= (o49 -> p49); n49 =33,10-15= p49; int =33,14-15= x49; }
[DBG generate] for_expr at 33,16-15 (=)~j mod 3: h49 -
  {(m49 -> (m49 -> bool)) =Pervasives.(=)= l49;
   (int -> (int -> int)) =Pervasives.(mod)= u49; w49 =28,22-23= d43;
   v49 =33,8-9= w49; v49 =33,10-9= r49; t49 =33,10-9= (r49 -> s49);
   q49 =33,10-9= s49; x49 =33,10-15= o49; u49 =33,10-15= t49;
   q49 =33,10-15= (o49 -> p49); n49 =33,10-15= p49; int =33,14-15= x49;
   n49 =33,16-15= i49; k49 =33,16-15= (i49 -> j49); h49 =33,16-15= j49;
   l49 =33,16-17= k49; }
[DBG generate] for_expr at 33,18-19 2: y49 - {int =33,18-19= y49; }
[DBG generate] for_expr at 33,16-19 j mod 3 = 2: e49 -
  {(m49 -> (m49 -> bool)) =Pervasives.(=)= l49;
   (int -> (int -> int)) =Pervasives.(mod)= u49; w49 =28,22-23= d43;
   v49 =33,8-9= w49; v49 =33,10-9= r49; t49 =33,10-9= (r49 -> s49);
   q49 =33,10-9= s49; x49 =33,10-15= o49; u49 =33,10-15= t49;
   q49 =33,10-15= (o49 -> p49); n49 =33,10-15= p49; int =33,14-15= x49;
   n49 =33,16-15= i49; k49 =33,16-15= (i49 -> j49); h49 =33,16-15= j49;
   l49 =33,16-17= k49; y49 =33,16-19= f49; h49 =33,16-19= (f49 -> g49);
   e49 =33,16-19= g49; int =33,18-19= y49; }
[DBG generate] for_expr at 33,20-19 (&&)~j mod 3 = 2: y48 -
  {(bool -> (bool -> bool)) =Pervasives.(&&)= d49;
   (m49 -> (m49 -> bool)) =Pervasives.(=)= l49;
   (int -> (int -> int)) =Pervasives.(mod)= u49; w49 =28,22-23= d43;
   v49 =33,8-9= w49; v49 =33,10-9= r49; t49 =33,10-9= (r49 -> s49);
   q49 =33,10-9= s49; x49 =33,10-15= o49; u49 =33,10-15= t49;
   q49 =33,10-15= (o49 -> p49); n49 =33,10-15= p49; int =33,14-15= x49;
   n49 =33,16-15= i49; k49 =33,16-15= (i49 -> j49); h49 =33,16-15= j49;
   l49 =33,16-17= k49; y49 =33,16-19= f49; h49 =33,16-19= (f49 -> g49);
   e49 =33,16-19= g49; int =33,18-19= y49; e49 =33,20-19= a49;
   c49 =33,20-19= (a49 -> b49); y48 =33,20-19= b49; d49 =33,20-22= c49; }
[DBG generate] for_expr at 33,25-26 (<): g50 -
  {(i50 -> (i50 -> bool)) =Pervasives.(<)= h50; h50 =33,25-26= g50; }
[DBG generate] for_expr at 33,23-24 j: j50 -
  {k50 =28,22-23= d43; j50 =33,23-24= k50; }
[DBG generate] for_expr at 33,25-24 (<)~j: d50 -
  {(i50 -> (i50 -> bool)) =Pervasives.(<)= h50; k50 =28,22-23= d43;
   j50 =33,23-24= k50; j50 =33,25-24= e50; g50 =33,25-24= (e50 -> f50);
   d50 =33,25-24= f50; h50 =33,25-26= g50; }
[DBG generate] for_expr at 33,27-28 8: l50 - {int =33,27-28= l50; }
[DBG generate] for_expr at 33,25-28 j < 8: a50 -
  {(i50 -> (i50 -> bool)) =Pervasives.(<)= h50; k50 =28,22-23= d43;
   j50 =33,23-24= k50; j50 =33,25-24= e50; g50 =33,25-24= (e50 -> f50);
   d50 =33,25-24= f50; h50 =33,25-26= g50; l50 =33,25-28= b50;
   d50 =33,25-28= (b50 -> c50); a50 =33,25-28= c50; int =33,27-28= l50; }
[DBG generate] for_expr at 33,20-28 j mod 3 = 2 && j < 8: v48 -
  {(bool -> (bool -> bool)) =Pervasives.(&&)= d49;
   (i50 -> (i50 -> bool)) =Pervasives.(<)= h50;
   (m49 -> (m49 -> bool)) =Pervasives.(=)= l49;
   (int -> (int -> int)) =Pervasives.(mod)= u49; k50 =28,22-23= d43;
   w49 =28,22-23= d43; v49 =33,8-9= w49; v49 =33,10-9= r49;
   t49 =33,10-9= (r49 -> s49); q49 =33,10-9= s49; x49 =33,10-15= o49;
   u49 =33,10-15= t49; q49 =33,10-15= (o49 -> p49); n49 =33,10-15= p49;
   int =33,14-15= x49; n49 =33,16-15= i49; k49 =33,16-15= (i49 -> j49);
   h49 =33,16-15= j49; l49 =33,16-17= k49; y49 =33,16-19= f49;
   h49 =33,16-19= (f49 -> g49); e49 =33,16-19= g49; int =33,18-19= y49;
   e49 =33,20-19= a49; c49 =33,20-19= (a49 -> b49); y48 =33,20-19= b49;
   d49 =33,20-22= c49; a50 =33,20-28= w48; y48 =33,20-28= (w48 -> x48);
   v48 =33,20-28= x48; j50 =33,23-24= k50; j50 =33,25-24= e50;
   g50 =33,25-24= (e50 -> f50); d50 =33,25-24= f50; h50 =33,25-26= g50;
   l50 =33,25-28= b50; d50 =33,25-28= (b50 -> c50); a50 =33,25-28= c50;
   int =33,27-28= l50; }
[DBG generate] for_expr at 33,34-59 "---------------------\n": m50 -
  {string =33,34-59= m50; }
[DBG generate] for_expr at 33,65-67 "": n50 - {string =33,65-67= n50; }
[DBG generate] for_expr at 33,5-67
  if j mod 3 = 2 && j < 8 then "---------------------\n" else "": u48 -
  {(bool -> (bool -> bool)) =Pervasives.(&&)= d49;
   (i50 -> (i50 -> bool)) =Pervasives.(<)= h50;
   (m49 -> (m49 -> bool)) =Pervasives.(=)= l49;
   (int -> (int -> int)) =Pervasives.(mod)= u49; k50 =28,22-23= d43;
   w49 =28,22-23= d43; n50 =33,5-67= u48; m50 =33,5-67= u48;
   v48 =33,5-67= bool; v49 =33,8-9= w49; v49 =33,10-9= r49;
   t49 =33,10-9= (r49 -> s49); q49 =33,10-9= s49; x49 =33,10-15= o49;
   u49 =33,10-15= t49; q49 =33,10-15= (o49 -> p49); n49 =33,10-15= p49;
   int =33,14-15= x49; n49 =33,16-15= i49; k49 =33,16-15= (i49 -> j49);
   h49 =33,16-15= j49; l49 =33,16-17= k49; y49 =33,16-19= f49;
   h49 =33,16-19= (f49 -> g49); e49 =33,16-19= g49; int =33,18-19= y49;
   e49 =33,20-19= a49; c49 =33,20-19= (a49 -> b49); y48 =33,20-19= b49;
   d49 =33,20-22= c49; a50 =33,20-28= w48; y48 =33,20-28= (w48 -> x48);
   v48 =33,20-28= x48; j50 =33,23-24= k50; j50 =33,25-24= e50;
   g50 =33,25-24= (e50 -> f50); d50 =33,25-24= f50; h50 =33,25-26= g50;
   l50 =33,25-28= b50; d50 =33,25-28= (b50 -> c50); a50 =33,25-28= c50;
   int =33,27-28= l50; string =33,34-59= m50; string =33,65-67= n50; }
[DBG generate] for_expr at 32,13-33,67
  "\n" ^ if j mod 3 = 2 && j < 8 then "---------------------\n" else "":
  l48 -
  {(bool -> (bool -> bool)) =Pervasives.(&&)= d49;
   (i50 -> (i50 -> bool)) =Pervasives.(<)= h50;
   (m49 -> (m49 -> bool)) =Pervasives.(=)= l49;
   (string -> (string -> string)) =Pervasives.(^)= s48;
   (int -> (int -> int)) =Pervasives.(mod)= u49; k50 =28,22-23= d43;
   w49 =28,22-23= d43; string =32,8-12= t48; t48 =32,13-12= p48;
   r48 =32,13-12= (p48 -> q48); o48 =32,13-12= q48; s48 =32,13-14= r48;
   u48 =32,13-33,67= m48; o48 =32,13-33,67= (m48 -> n48);
   l48 =32,13-33,67= n48; n50 =33,5-67= u48; m50 =33,5-67= u48;
   v48 =33,5-67= bool; v49 =33,8-9= w49; v49 =33,10-9= r49;
   t49 =33,10-9= (r49 -> s49); q49 =33,10-9= s49; x49 =33,10-15= o49;
   u49 =33,10-15= t49; q49 =33,10-15= (o49 -> p49); n49 =33,10-15= p49;
   int =33,14-15= x49; n49 =33,16-15= i49; k49 =33,16-15= (i49 -> j49);
   h49 =33,16-15= j49; l49 =33,16-17= k49; y49 =33,16-19= f49;
   h49 =33,16-19= (f49 -> g49); e49 =33,16-19= g49; int =33,18-19= y49;
   e49 =33,20-19= a49; c49 =33,20-19= (a49 -> b49); y48 =33,20-19= b49;
   d49 =33,20-22= c49; a50 =33,20-28= w48; y48 =33,20-28= (w48 -> x48);
   v48 =33,20-28= x48; j50 =33,23-24= k50; j50 =33,25-24= e50;
   g50 =33,25-24= (e50 -> f50); d50 =33,25-24= f50; h50 =33,25-26= g50;
   l50 =33,25-28= b50; d50 =33,25-28= (b50 -> c50); a50 =33,25-28= c50;
   int =33,27-28= l50; string =33,34-59= m50; string =33,65-67= n50; }
[DBG generate] for_expr at 32,6-33,68
  int_fold~(0, 9)~s~function
                      i ->
                      function
                        s ->
                        s ^
                          string_of_int~bget~b~i~j ^
                            " " ^ if i mod 3 = 2 && i < 8 then "| " else "" ^
    "\n" ^ if j mod 3 = 2 && j < 8 then "---------------------\n" else "":
  g43 -
  {(bool -> (bool -> bool)) =Pervasives.(&&)= r46;
   (bool -> (bool -> bool)) =Pervasives.(&&)= d49;
   (w47 -> (w47 -> bool)) =Pervasives.(<)= v47;
   (i50 -> (i50 -> bool)) =Pervasives.(<)= h50;
   (b47 -> (b47 -> bool)) =Pervasives.(=)= a47;
   (m49 -> (m49 -> bool)) =Pervasives.(=)= l49;
   (string -> (string -> string)) =Pervasives.(^)= r44;
   (string -> (string -> string)) =Pervasives.(^)= c45;
   (string -> (string -> string)) =Pervasives.(^)= h46;
   (string -> (string -> string)) =Pervasives.(^)= n43;
   (string -> (string -> string)) =Pervasives.(^)= s48;
   (int -> (int -> int)) =Pervasives.(mod)= j47;
   (int -> (int -> int)) =Pervasives.(mod)= u49;
   (int -> string) =Pervasives.string_of_int= h45;
   (board -> (int -> (int -> int))) =bget= s45;
   ((int , int) -> (a44 -> ((int -> (a44 -> a44)) -> a44))) =int_fold= y43;
   u45 =27,16-17= o42; k50 =28,22-23= d43; w49 =28,22-23= d43;
   y45 =28,22-23= d43; f44 =28,24-25= f43; y43 =29,4-12= x43;
   b44 =29,4-18= v43; x43 =29,4-18= (v43 -> w43); u43 =29,4-18= w43;
   e44 =29,4-21= s43; u43 =29,4-21= (s43 -> t43); r43 =29,4-21= t43;
   g44 =29,4-31,45= p43; r43 =29,4-31,45= (p43 -> q43); o43 =29,4-31,45= q43;
   int =29,14-15= c44; b44 =29,15-18= (c44 , d44); int =29,17-18= d44;
   e44 =29,20-21= f44; y47 =29,27-28= h44; l47 =29,27-28= h44;
   w45 =29,27-28= h44; k48 =29,27-31,45= h48; k48 =29,27-31,45= i44;
   j48 =29,27-31,45= i48; j48 =29,27-31,45= h44;
   g44 =29,27-31,45= (j48 -> k48); t44 =29,29-30= j44; g48 =29,29-31,45= d48;
   g48 =29,29-31,45= k44; f48 =29,29-31,45= e48; f48 =29,29-31,45= j44;
   i44 =29,29-31,45= (f48 -> g48); s44 =30,6-7= t44; s44 =30,8-7= o44;
   q44 =30,8-7= (o44 -> p44); n44 =30,8-7= p44; r44 =30,8-9= q44;
   u44 =30,8-31,45= l44; n44 =30,8-31,45= (l44 -> m44); k44 =30,8-31,45= m44;
   h45 =30,11-24= g45; i45 =30,25-37= e45; g45 =30,25-37= (e45 -> f45);
   d45 =30,25-37= f45; s45 =30,26-30= r45; t45 =30,26-32= p45;
   r45 =30,26-32= (p45 -> q45); o45 =30,26-32= q45; v45 =30,26-34= m45;
   o45 =30,26-34= (m45 -> n45); l45 =30,26-34= n45; x45 =30,26-36= j45;
   l45 =30,26-36= (j45 -> k45); i45 =30,26-36= k45; t45 =30,31-32= u45;
   v45 =30,33-34= w45; x45 =30,35-36= y45; d45 =30,39-37= y44;
   b45 =30,39-37= (y44 -> a45); x44 =30,39-37= a45; c45 =30,39-40= b45;
   a46 =30,39-31,45= v44; x44 =30,39-31,45= (v44 -> w44);
   u44 =30,39-31,45= w44; string =30,41-44= i46; i46 =30,45-44= e46;
   g46 =30,45-44= (e46 -> f46); d46 =30,45-44= f46; h46 =30,45-46= g46;
   j46 =30,45-31,44= b46; d46 =30,45-31,44= (b46 -> c46);
   a46 =30,45-31,44= c46; c48 =31,3-44= j46; b48 =31,3-44= j46;
   k46 =31,3-44= bool; k47 =31,6-7= l47; k47 =31,8-7= g47;
   i47 =31,8-7= (g47 -> h47); f47 =31,8-7= h47; m47 =31,8-13= d47;
   j47 =31,8-13= i47; f47 =31,8-13= (d47 -> e47); c47 =31,8-13= e47;
   int =31,12-13= m47; c47 =31,14-13= w46; y46 =31,14-13= (w46 -> x46);
   v46 =31,14-13= x46; a47 =31,14-15= y46; n47 =31,14-17= t46;
   v46 =31,14-17= (t46 -> u46); s46 =31,14-17= u46; int =31,16-17= n47;
   s46 =31,18-17= o46; q46 =31,18-17= (o46 -> p46); n46 =31,18-17= p46;
   r46 =31,18-20= q46; o47 =31,18-26= l46; n46 =31,18-26= (l46 -> m46);
   k46 =31,18-26= m46; x47 =31,21-22= y47; x47 =31,23-22= s47;
   u47 =31,23-22= (s47 -> t47); r47 =31,23-22= t47; v47 =31,23-24= u47;
   a48 =31,23-26= p47; r47 =31,23-26= (p47 -> q47); o47 =31,23-26= q47;
   int =31,25-26= a48; string =31,32-36= b48; string =31,42-44= c48;
   o43 =32,6-5= k43; m43 =32,6-5= (k43 -> l43); j43 =32,6-5= l43;
   n43 =32,6-7= m43; l48 =32,6-33,68= h43; j43 =32,6-33,68= (h43 -> i43);
   g43 =32,6-33,68= i43; string =32,8-12= t48; t48 =32,13-12= p48;
   r48 =32,13-12= (p48 -> q48); o48 =32,13-12= q48; s48 =32,13-14= r48;
   u48 =32,13-33,67= m48; o48 =32,13-33,67= (m48 -> n48);
   l48 =32,13-33,67= n48; n50 =33,5-67= u48; m50 =33,5-67= u48;
   v48 =33,5-67= bool; v49 =33,8-9= w49; v49 =33,10-9= r49;
   t49 =33,10-9= (r49 -> s49); q49 =33,10-9= s49; x49 =33,10-15= o49;
   u49 =33,10-15= t49; q49 =33,10-15= (o49 -> p49); n49 =33,10-15= p49;
   int =33,14-15= x49; n49 =33,16-15= i49; k49 =33,16-15= (i49 -> j49);
   h49 =33,16-15= j49; l49 =33,16-17= k49; y49 =33,16-19= f49;
   h49 =33,16-19= (f49 -> g49); e49 =33,16-19= g49; int =33,18-19= y49;
   e49 =33,20-19= a49; c49 =33,20-19= (a49 -> b49); y48 =33,20-19= b49;
   d49 =33,20-22= c49; a50 =33,20-28= w48; y48 =33,20-28= (w48 -> x48);
   v48 =33,20-28= x48; j50 =33,23-24= k50; j50 =33,25-24= e50;
   g50 =33,25-24= (e50 -> f50); d50 =33,25-24= f50; h50 =33,25-26= g50;
   l50 =33,25-28= b50; d50 =33,25-28= (b50 -> c50); a50 =33,25-28= c50;
   int =33,27-28= l50; string =33,34-59= m50; string =33,65-67= n50; }
[DBG generate] for_expr at 28,24-33,68
  function
    s ->
    int_fold~(0, 9)~s~function
                        i ->
                        function
                          s ->
                          s ^
                            string_of_int~bget~b~i~j ^
                              " " ^ if i mod 3 = 2 && i < 8 then "| " else "" ^
      "\n" ^ if j mod 3 = 2 && j < 8 then "---------------------\n" else "":
  e43 -
  {(bool -> (bool -> bool)) =Pervasives.(&&)= r46;
   (bool -> (bool -> bool)) =Pervasives.(&&)= d49;
   (w47 -> (w47 -> bool)) =Pervasives.(<)= v47;
   (i50 -> (i50 -> bool)) =Pervasives.(<)= h50;
   (b47 -> (b47 -> bool)) =Pervasives.(=)= a47;
   (m49 -> (m49 -> bool)) =Pervasives.(=)= l49;
   (string -> (string -> string)) =Pervasives.(^)= r44;
   (string -> (string -> string)) =Pervasives.(^)= c45;
   (string -> (string -> string)) =Pervasives.(^)= h46;
   (string -> (string -> string)) =Pervasives.(^)= n43;
   (string -> (string -> string)) =Pervasives.(^)= s48;
   (int -> (int -> int)) =Pervasives.(mod)= j47;
   (int -> (int -> int)) =Pervasives.(mod)= u49;
   (int -> string) =Pervasives.string_of_int= h45;
   (board -> (int -> (int -> int))) =bget= s45;
   ((int , int) -> (a44 -> ((int -> (a44 -> a44)) -> a44))) =int_fold= y43;
   u45 =27,16-17= o42; k50 =28,22-23= d43; w49 =28,22-23= d43;
   y45 =28,22-23= d43; f44 =28,24-25= f43; r50 =28,24-33,68= o50;
   r50 =28,24-33,68= g43; q50 =28,24-33,68= p50; q50 =28,24-33,68= f43;
   e43 =28,24-33,68= (q50 -> r50); y43 =29,4-12= x43; b44 =29,4-18= v43;
   x43 =29,4-18= (v43 -> w43); u43 =29,4-18= w43; e44 =29,4-21= s43;
   u43 =29,4-21= (s43 -> t43); r43 =29,4-21= t43; g44 =29,4-31,45= p43;
   r43 =29,4-31,45= (p43 -> q43); o43 =29,4-31,45= q43; int =29,14-15= c44;
   b44 =29,15-18= (c44 , d44); int =29,17-18= d44; e44 =29,20-21= f44;
   y47 =29,27-28= h44; l47 =29,27-28= h44; w45 =29,27-28= h44;
   k48 =29,27-31,45= h48; k48 =29,27-31,45= i44; j48 =29,27-31,45= i48;
   j48 =29,27-31,45= h44; g44 =29,27-31,45= (j48 -> k48); t44 =29,29-30= j44;
   g48 =29,29-31,45= d48; g48 =29,29-31,45= k44; f48 =29,29-31,45= e48;
   f48 =29,29-31,45= j44; i44 =29,29-31,45= (f48 -> g48); s44 =30,6-7= t44;
   s44 =30,8-7= o44; q44 =30,8-7= (o44 -> p44); n44 =30,8-7= p44;
   r44 =30,8-9= q44; u44 =30,8-31,45= l44; n44 =30,8-31,45= (l44 -> m44);
   k44 =30,8-31,45= m44; h45 =30,11-24= g45; i45 =30,25-37= e45;
   g45 =30,25-37= (e45 -> f45); d45 =30,25-37= f45; s45 =30,26-30= r45;
   t45 =30,26-32= p45; r45 =30,26-32= (p45 -> q45); o45 =30,26-32= q45;
   v45 =30,26-34= m45; o45 =30,26-34= (m45 -> n45); l45 =30,26-34= n45;
   x45 =30,26-36= j45; l45 =30,26-36= (j45 -> k45); i45 =30,26-36= k45;
   t45 =30,31-32= u45; v45 =30,33-34= w45; x45 =30,35-36= y45;
   d45 =30,39-37= y44; b45 =30,39-37= (y44 -> a45); x44 =30,39-37= a45;
   c45 =30,39-40= b45; a46 =30,39-31,45= v44; x44 =30,39-31,45= (v44 -> w44);
   u44 =30,39-31,45= w44; string =30,41-44= i46; i46 =30,45-44= e46;
   g46 =30,45-44= (e46 -> f46); d46 =30,45-44= f46; h46 =30,45-46= g46;
   j46 =30,45-31,44= b46; d46 =30,45-31,44= (b46 -> c46);
   a46 =30,45-31,44= c46; c48 =31,3-44= j46; b48 =31,3-44= j46;
   k46 =31,3-44= bool; k47 =31,6-7= l47; k47 =31,8-7= g47;
   i47 =31,8-7= (g47 -> h47); f47 =31,8-7= h47; m47 =31,8-13= d47;
   j47 =31,8-13= i47; f47 =31,8-13= (d47 -> e47); c47 =31,8-13= e47;
   int =31,12-13= m47; c47 =31,14-13= w46; y46 =31,14-13= (w46 -> x46);
   v46 =31,14-13= x46; a47 =31,14-15= y46; n47 =31,14-17= t46;
   v46 =31,14-17= (t46 -> u46); s46 =31,14-17= u46; int =31,16-17= n47;
   s46 =31,18-17= o46; q46 =31,18-17= (o46 -> p46); n46 =31,18-17= p46;
   r46 =31,18-20= q46; o47 =31,18-26= l46; n46 =31,18-26= (l46 -> m46);
   k46 =31,18-26= m46; x47 =31,21-22= y47; x47 =31,23-22= s47;
   u47 =31,23-22= (s47 -> t47); r47 =31,23-22= t47; v47 =31,23-24= u47;
   a48 =31,23-26= p47; r47 =31,23-26= (p47 -> q47); o47 =31,23-26= q47;
   int =31,25-26= a48; string =31,32-36= b48; string =31,42-44= c48;
   o43 =32,6-5= k43; m43 =32,6-5= (k43 -> l43); j43 =32,6-5= l43;
   n43 =32,6-7= m43; l48 =32,6-33,68= h43; j43 =32,6-33,68= (h43 -> i43);
   g43 =32,6-33,68= i43; string =32,8-12= t48; t48 =32,13-12= p48;
   r48 =32,13-12= (p48 -> q48); o48 =32,13-12= q48; s48 =32,13-14= r48;
   u48 =32,13-33,67= m48; o48 =32,13-33,67= (m48 -> n48);
   l48 =32,13-33,67= n48; n50 =33,5-67= u48; m50 =33,5-67= u48;
   v48 =33,5-67= bool; v49 =33,8-9= w49; v49 =33,10-9= r49;
   t49 =33,10-9= (r49 -> s49); q49 =33,10-9= s49; x49 =33,10-15= o49;
   u49 =33,10-15= t49; q49 =33,10-15= (o49 -> p49); n49 =33,10-15= p49;
   int =33,14-15= x49; n49 =33,16-15= i49; k49 =33,16-15= (i49 -> j49);
   h49 =33,16-15= j49; l49 =33,16-17= k49; y49 =33,16-19= f49;
   h49 =33,16-19= (f49 -> g49); e49 =33,16-19= g49; int =33,18-19= y49;
   e49 =33,20-19= a49; c49 =33,20-19= (a49 -> b49); y48 =33,20-19= b49;
   d49 =33,20-22= c49; a50 =33,20-28= w48; y48 =33,20-28= (w48 -> x48);
   v48 =33,20-28= x48; j50 =33,23-24= k50; j50 =33,25-24= e50;
   g50 =33,25-24= (e50 -> f50); d50 =33,25-24= f50; h50 =33,25-26= g50;
   l50 =33,25-28= b50; d50 =33,25-28= (b50 -> c50); a50 =33,25-28= c50;
   int =33,27-28= l50; string =33,34-59= m50; string =33,65-67= n50; }
[DBG generate] for_expr at 28,22-33,68
  function
    j ->
    function
      s ->
      int_fold~(0, 9)~s~function
                          i ->
                          function
                            s ->
                            s ^
                              string_of_int~bget~b~i~j ^
                                " " ^
                                  if i mod 3 = 2 && i < 8 then "| " else "" ^
        "\n" ^ if j mod 3 = 2 && j < 8 then "---------------------\n" else "":
  c43 -
  {(bool -> (bool -> bool)) =Pervasives.(&&)= r46;
   (bool -> (bool -> bool)) =Pervasives.(&&)= d49;
   (w47 -> (w47 -> bool)) =Pervasives.(<)= v47;
   (i50 -> (i50 -> bool)) =Pervasives.(<)= h50;
   (b47 -> (b47 -> bool)) =Pervasives.(=)= a47;
   (m49 -> (m49 -> bool)) =Pervasives.(=)= l49;
   (string -> (string -> string)) =Pervasives.(^)= r44;
   (string -> (string -> string)) =Pervasives.(^)= c45;
   (string -> (string -> string)) =Pervasives.(^)= h46;
   (string -> (string -> string)) =Pervasives.(^)= n43;
   (string -> (string -> string)) =Pervasives.(^)= s48;
   (int -> (int -> int)) =Pervasives.(mod)= j47;
   (int -> (int -> int)) =Pervasives.(mod)= u49;
   (int -> string) =Pervasives.string_of_int= h45;
   (board -> (int -> (int -> int))) =bget= s45;
   ((int , int) -> (a44 -> ((int -> (a44 -> a44)) -> a44))) =int_fold= y43;
   u45 =27,16-17= o42; k50 =28,22-23= d43; w49 =28,22-23= d43;
   y45 =28,22-23= d43; v50 =28,22-33,68= s50; v50 =28,22-33,68= e43;
   u50 =28,22-33,68= t50; u50 =28,22-33,68= d43;
   c43 =28,22-33,68= (u50 -> v50); f44 =28,24-25= f43; r50 =28,24-33,68= o50;
   r50 =28,24-33,68= g43; q50 =28,24-33,68= p50; q50 =28,24-33,68= f43;
   e43 =28,24-33,68= (q50 -> r50); y43 =29,4-12= x43; b44 =29,4-18= v43;
   x43 =29,4-18= (v43 -> w43); u43 =29,4-18= w43; e44 =29,4-21= s43;
   u43 =29,4-21= (s43 -> t43); r43 =29,4-21= t43; g44 =29,4-31,45= p43;
   r43 =29,4-31,45= (p43 -> q43); o43 =29,4-31,45= q43; int =29,14-15= c44;
   b44 =29,15-18= (c44 , d44); int =29,17-18= d44; e44 =29,20-21= f44;
   y47 =29,27-28= h44; l47 =29,27-28= h44; w45 =29,27-28= h44;
   k48 =29,27-31,45= h48; k48 =29,27-31,45= i44; j48 =29,27-31,45= i48;
   j48 =29,27-31,45= h44; g44 =29,27-31,45= (j48 -> k48); t44 =29,29-30= j44;
   g48 =29,29-31,45= d48; g48 =29,29-31,45= k44; f48 =29,29-31,45= e48;
   f48 =29,29-31,45= j44; i44 =29,29-31,45= (f48 -> g48); s44 =30,6-7= t44;
   s44 =30,8-7= o44; q44 =30,8-7= (o44 -> p44); n44 =30,8-7= p44;
   r44 =30,8-9= q44; u44 =30,8-31,45= l44; n44 =30,8-31,45= (l44 -> m44);
   k44 =30,8-31,45= m44; h45 =30,11-24= g45; i45 =30,25-37= e45;
   g45 =30,25-37= (e45 -> f45); d45 =30,25-37= f45; s45 =30,26-30= r45;
   t45 =30,26-32= p45; r45 =30,26-32= (p45 -> q45); o45 =30,26-32= q45;
   v45 =30,26-34= m45; o45 =30,26-34= (m45 -> n45); l45 =30,26-34= n45;
   x45 =30,26-36= j45; l45 =30,26-36= (j45 -> k45); i45 =30,26-36= k45;
   t45 =30,31-32= u45; v45 =30,33-34= w45; x45 =30,35-36= y45;
   d45 =30,39-37= y44; b45 =30,39-37= (y44 -> a45); x44 =30,39-37= a45;
   c45 =30,39-40= b45; a46 =30,39-31,45= v44; x44 =30,39-31,45= (v44 -> w44);
   u44 =30,39-31,45= w44; string =30,41-44= i46; i46 =30,45-44= e46;
   g46 =30,45-44= (e46 -> f46); d46 =30,45-44= f46; h46 =30,45-46= g46;
   j46 =30,45-31,44= b46; d46 =30,45-31,44= (b46 -> c46);
   a46 =30,45-31,44= c46; c48 =31,3-44= j46; b48 =31,3-44= j46;
   k46 =31,3-44= bool; k47 =31,6-7= l47; k47 =31,8-7= g47;
   i47 =31,8-7= (g47 -> h47); f47 =31,8-7= h47; m47 =31,8-13= d47;
   j47 =31,8-13= i47; f47 =31,8-13= (d47 -> e47); c47 =31,8-13= e47;
   int =31,12-13= m47; c47 =31,14-13= w46; y46 =31,14-13= (w46 -> x46);
   v46 =31,14-13= x46; a47 =31,14-15= y46; n47 =31,14-17= t46;
   v46 =31,14-17= (t46 -> u46); s46 =31,14-17= u46; int =31,16-17= n47;
   s46 =31,18-17= o46; q46 =31,18-17= (o46 -> p46); n46 =31,18-17= p46;
   r46 =31,18-20= q46; o47 =31,18-26= l46; n46 =31,18-26= (l46 -> m46);
   k46 =31,18-26= m46; x47 =31,21-22= y47; x47 =31,23-22= s47;
   u47 =31,23-22= (s47 -> t47); r47 =31,23-22= t47; v47 =31,23-24= u47;
   a48 =31,23-26= p47; r47 =31,23-26= (p47 -> q47); o47 =31,23-26= q47;
   int =31,25-26= a48; string =31,32-36= b48; string =31,42-44= c48;
   o43 =32,6-5= k43; m43 =32,6-5= (k43 -> l43); j43 =32,6-5= l43;
   n43 =32,6-7= m43; l48 =32,6-33,68= h43; j43 =32,6-33,68= (h43 -> i43);
   g43 =32,6-33,68= i43; string =32,8-12= t48; t48 =32,13-12= p48;
   r48 =32,13-12= (p48 -> q48); o48 =32,13-12= q48; s48 =32,13-14= r48;
   u48 =32,13-33,67= m48; o48 =32,13-33,67= (m48 -> n48);
   l48 =32,13-33,67= n48; n50 =33,5-67= u48; m50 =33,5-67= u48;
   v48 =33,5-67= bool; v49 =33,8-9= w49; v49 =33,10-9= r49;
   t49 =33,10-9= (r49 -> s49); q49 =33,10-9= s49; x49 =33,10-15= o49;
   u49 =33,10-15= t49; q49 =33,10-15= (o49 -> p49); n49 =33,10-15= p49;
   int =33,14-15= x49; n49 =33,16-15= i49; k49 =33,16-15= (i49 -> j49);
   h49 =33,16-15= j49; l49 =33,16-17= k49; y49 =33,16-19= f49;
   h49 =33,16-19= (f49 -> g49); e49 =33,16-19= g49; int =33,18-19= y49;
   e49 =33,20-19= a49; c49 =33,20-19= (a49 -> b49); y48 =33,20-19= b49;
   d49 =33,20-22= c49; a50 =33,20-28= w48; y48 =33,20-28= (w48 -> x48);
   v48 =33,20-28= x48; j50 =33,23-24= k50; j50 =33,25-24= e50;
   g50 =33,25-24= (e50 -> f50); d50 =33,25-24= f50; h50 =33,25-26= g50;
   l50 =33,25-28= b50; d50 =33,25-28= (b50 -> c50); a50 =33,25-28= c50;
   int =33,27-28= l50; string =33,34-59= m50; string =33,65-67= n50; }
[DBG generate] for_expr at 28,1-33,68
  int_fold~(0, 9)~function
                    j ->
                    function
                      s ->
                      int_fold~(0, 9)~s~function
                                          i ->
                                          function
                                            s ->
                                            s ^
                                              string_of_int~bget~b~i~j ^
                                                " " ^
                                                  if i mod 3 = 2 && i < 8 then
                                                   "| " else "" ^
                        "\n" ^
                          if j mod 3 = 2 && j < 8 then
                                                        "---------------------\n"
                          else "":
  p42 -
  {(bool -> (bool -> bool)) =Pervasives.(&&)= r46;
   (bool -> (bool -> bool)) =Pervasives.(&&)= d49;
   (w47 -> (w47 -> bool)) =Pervasives.(<)= v47;
   (i50 -> (i50 -> bool)) =Pervasives.(<)= h50;
   (b47 -> (b47 -> bool)) =Pervasives.(=)= a47;
   (m49 -> (m49 -> bool)) =Pervasives.(=)= l49;
   (string -> (string -> string)) =Pervasives.(^)= r44;
   (string -> (string -> string)) =Pervasives.(^)= c45;
   (string -> (string -> string)) =Pervasives.(^)= h46;
   (string -> (string -> string)) =Pervasives.(^)= n43;
   (string -> (string -> string)) =Pervasives.(^)= s48;
   (int -> (int -> int)) =Pervasives.(mod)= j47;
   (int -> (int -> int)) =Pervasives.(mod)= u49;
   (int -> string) =Pervasives.string_of_int= h45;
   (board -> (int -> (int -> int))) =bget= s45;
   ((int , int) -> (x42 -> ((int -> (x42 -> x42)) -> x42))) =int_fold= w42;
   ((int , int) -> (a44 -> ((int -> (a44 -> a44)) -> a44))) =int_fold= y43;
   u45 =27,16-17= o42; w42 =28,1-9= v42; y42 =28,1-15= t42;
   v42 =28,1-15= (t42 -> u42); s42 =28,1-15= u42; c43 =28,1-33,68= q42;
   s42 =28,1-33,68= (q42 -> r42); p42 =28,1-33,68= r42; int =28,11-12= a43;
   y42 =28,12-15= (a43 , b43); int =28,14-15= b43; k50 =28,22-23= d43;
   w49 =28,22-23= d43; y45 =28,22-23= d43; v50 =28,22-33,68= s50;
   v50 =28,22-33,68= e43; u50 =28,22-33,68= t50; u50 =28,22-33,68= d43;
   c43 =28,22-33,68= (u50 -> v50); f44 =28,24-25= f43; r50 =28,24-33,68= o50;
   r50 =28,24-33,68= g43; q50 =28,24-33,68= p50; q50 =28,24-33,68= f43;
   e43 =28,24-33,68= (q50 -> r50); y43 =29,4-12= x43; b44 =29,4-18= v43;
   x43 =29,4-18= (v43 -> w43); u43 =29,4-18= w43; e44 =29,4-21= s43;
   u43 =29,4-21= (s43 -> t43); r43 =29,4-21= t43; g44 =29,4-31,45= p43;
   r43 =29,4-31,45= (p43 -> q43); o43 =29,4-31,45= q43; int =29,14-15= c44;
   b44 =29,15-18= (c44 , d44); int =29,17-18= d44; e44 =29,20-21= f44;
   y47 =29,27-28= h44; l47 =29,27-28= h44; w45 =29,27-28= h44;
   k48 =29,27-31,45= h48; k48 =29,27-31,45= i44; j48 =29,27-31,45= i48;
   j48 =29,27-31,45= h44; g44 =29,27-31,45= (j48 -> k48); t44 =29,29-30= j44;
   g48 =29,29-31,45= d48; g48 =29,29-31,45= k44; f48 =29,29-31,45= e48;
   f48 =29,29-31,45= j44; i44 =29,29-31,45= (f48 -> g48); s44 =30,6-7= t44;
   s44 =30,8-7= o44; q44 =30,8-7= (o44 -> p44); n44 =30,8-7= p44;
   r44 =30,8-9= q44; u44 =30,8-31,45= l44; n44 =30,8-31,45= (l44 -> m44);
   k44 =30,8-31,45= m44; h45 =30,11-24= g45; i45 =30,25-37= e45;
   g45 =30,25-37= (e45 -> f45); d45 =30,25-37= f45; s45 =30,26-30= r45;
   t45 =30,26-32= p45; r45 =30,26-32= (p45 -> q45); o45 =30,26-32= q45;
   v45 =30,26-34= m45; o45 =30,26-34= (m45 -> n45); l45 =30,26-34= n45;
   x45 =30,26-36= j45; l45 =30,26-36= (j45 -> k45); i45 =30,26-36= k45;
   t45 =30,31-32= u45; v45 =30,33-34= w45; x45 =30,35-36= y45;
   d45 =30,39-37= y44; b45 =30,39-37= (y44 -> a45); x44 =30,39-37= a45;
   c45 =30,39-40= b45; a46 =30,39-31,45= v44; x44 =30,39-31,45= (v44 -> w44);
   u44 =30,39-31,45= w44; string =30,41-44= i46; i46 =30,45-44= e46;
   g46 =30,45-44= (e46 -> f46); d46 =30,45-44= f46; h46 =30,45-46= g46;
   j46 =30,45-31,44= b46; d46 =30,45-31,44= (b46 -> c46);
   a46 =30,45-31,44= c46; c48 =31,3-44= j46; b48 =31,3-44= j46;
   k46 =31,3-44= bool; k47 =31,6-7= l47; k47 =31,8-7= g47;
   i47 =31,8-7= (g47 -> h47); f47 =31,8-7= h47; m47 =31,8-13= d47;
   j47 =31,8-13= i47; f47 =31,8-13= (d47 -> e47); c47 =31,8-13= e47;
   int =31,12-13= m47; c47 =31,14-13= w46; y46 =31,14-13= (w46 -> x46);
   v46 =31,14-13= x46; a47 =31,14-15= y46; n47 =31,14-17= t46;
   v46 =31,14-17= (t46 -> u46); s46 =31,14-17= u46; int =31,16-17= n47;
   s46 =31,18-17= o46; q46 =31,18-17= (o46 -> p46); n46 =31,18-17= p46;
   r46 =31,18-20= q46; o47 =31,18-26= l46; n46 =31,18-26= (l46 -> m46);
   k46 =31,18-26= m46; x47 =31,21-22= y47; x47 =31,23-22= s47;
   u47 =31,23-22= (s47 -> t47); r47 =31,23-22= t47; v47 =31,23-24= u47;
   a48 =31,23-26= p47; r47 =31,23-26= (p47 -> q47); o47 =31,23-26= q47;
   int =31,25-26= a48; string =31,32-36= b48; string =31,42-44= c48;
   o43 =32,6-5= k43; m43 =32,6-5= (k43 -> l43); j43 =32,6-5= l43;
   n43 =32,6-7= m43; l48 =32,6-33,68= h43; j43 =32,6-33,68= (h43 -> i43);
   g43 =32,6-33,68= i43; string =32,8-12= t48; t48 =32,13-12= p48;
   r48 =32,13-12= (p48 -> q48); o48 =32,13-12= q48; s48 =32,13-14= r48;
   u48 =32,13-33,67= m48; o48 =32,13-33,67= (m48 -> n48);
   l48 =32,13-33,67= n48; n50 =33,5-67= u48; m50 =33,5-67= u48;
   v48 =33,5-67= bool; v49 =33,8-9= w49; v49 =33,10-9= r49;
   t49 =33,10-9= (r49 -> s49); q49 =33,10-9= s49; x49 =33,10-15= o49;
   u49 =33,10-15= t49; q49 =33,10-15= (o49 -> p49); n49 =33,10-15= p49;
   int =33,14-15= x49; n49 =33,16-15= i49; k49 =33,16-15= (i49 -> j49);
   h49 =33,16-15= j49; l49 =33,16-17= k49; y49 =33,16-19= f49;
   h49 =33,16-19= (f49 -> g49); e49 =33,16-19= g49; int =33,18-19= y49;
   e49 =33,20-19= a49; c49 =33,20-19= (a49 -> b49); y48 =33,20-19= b49;
   d49 =33,20-22= c49; a50 =33,20-28= w48; y48 =33,20-28= (w48 -> x48);
   v48 =33,20-28= x48; j50 =33,23-24= k50; j50 =33,25-24= e50;
   g50 =33,25-24= (e50 -> f50); d50 =33,25-24= f50; h50 =33,25-26= g50;
   l50 =33,25-28= b50; d50 =33,25-28= (b50 -> c50); a50 =33,25-28= c50;
   int =33,27-28= l50; string =33,34-59= m50; string =33,65-67= n50; }
[DBG generate] for_expr at 27,16-34,2
  function
    b ->
    int_fold~(0, 9)~function
                      j ->
                      function
                        s ->
                        int_fold~(0, 9)~s~function
                                            i ->
                                            function
                                              s ->
                                              s ^
                                                string_of_int~bget~b~i~j ^
                                                  " " ^
                                                    if i mod 3 = 2 && i < 8 then
                                                     "| " else "" ^
                          "\n" ^
                            if j mod 3 = 2 && j < 8 then
                                                          "---------------------\n"
                            else "":
  n42 -
  {(bool -> (bool -> bool)) =Pervasives.(&&)= r46;
   (bool -> (bool -> bool)) =Pervasives.(&&)= d49;
   (w47 -> (w47 -> bool)) =Pervasives.(<)= v47;
   (i50 -> (i50 -> bool)) =Pervasives.(<)= h50;
   (b47 -> (b47 -> bool)) =Pervasives.(=)= a47;
   (m49 -> (m49 -> bool)) =Pervasives.(=)= l49;
   (string -> (string -> string)) =Pervasives.(^)= r44;
   (string -> (string -> string)) =Pervasives.(^)= c45;
   (string -> (string -> string)) =Pervasives.(^)= h46;
   (string -> (string -> string)) =Pervasives.(^)= n43;
   (string -> (string -> string)) =Pervasives.(^)= s48;
   (int -> (int -> int)) =Pervasives.(mod)= j47;
   (int -> (int -> int)) =Pervasives.(mod)= u49;
   (int -> string) =Pervasives.string_of_int= h45;
   (board -> (int -> (int -> int))) =bget= s45;
   ((int , int) -> (x42 -> ((int -> (x42 -> x42)) -> x42))) =int_fold= w42;
   ((int , int) -> (a44 -> ((int -> (a44 -> a44)) -> a44))) =int_fold= y43;
   u45 =27,16-17= o42; a51 =27,16-34,2= w50; a51 =27,16-34,2= p42;
   y50 =27,16-34,2= x50; y50 =27,16-34,2= o42; n42 =27,16-34,2= (y50 -> a51);
   w42 =28,1-9= v42; y42 =28,1-15= t42; v42 =28,1-15= (t42 -> u42);
   s42 =28,1-15= u42; c43 =28,1-33,68= q42; s42 =28,1-33,68= (q42 -> r42);
   p42 =28,1-33,68= r42; int =28,11-12= a43; y42 =28,12-15= (a43 , b43);
   int =28,14-15= b43; k50 =28,22-23= d43; w49 =28,22-23= d43;
   y45 =28,22-23= d43; v50 =28,22-33,68= s50; v50 =28,22-33,68= e43;
   u50 =28,22-33,68= t50; u50 =28,22-33,68= d43;
   c43 =28,22-33,68= (u50 -> v50); f44 =28,24-25= f43; r50 =28,24-33,68= o50;
   r50 =28,24-33,68= g43; q50 =28,24-33,68= p50; q50 =28,24-33,68= f43;
   e43 =28,24-33,68= (q50 -> r50); y43 =29,4-12= x43; b44 =29,4-18= v43;
   x43 =29,4-18= (v43 -> w43); u43 =29,4-18= w43; e44 =29,4-21= s43;
   u43 =29,4-21= (s43 -> t43); r43 =29,4-21= t43; g44 =29,4-31,45= p43;
   r43 =29,4-31,45= (p43 -> q43); o43 =29,4-31,45= q43; int =29,14-15= c44;
   b44 =29,15-18= (c44 , d44); int =29,17-18= d44; e44 =29,20-21= f44;
   y47 =29,27-28= h44; l47 =29,27-28= h44; w45 =29,27-28= h44;
   k48 =29,27-31,45= h48; k48 =29,27-31,45= i44; j48 =29,27-31,45= i48;
   j48 =29,27-31,45= h44; g44 =29,27-31,45= (j48 -> k48); t44 =29,29-30= j44;
   g48 =29,29-31,45= d48; g48 =29,29-31,45= k44; f48 =29,29-31,45= e48;
   f48 =29,29-31,45= j44; i44 =29,29-31,45= (f48 -> g48); s44 =30,6-7= t44;
   s44 =30,8-7= o44; q44 =30,8-7= (o44 -> p44); n44 =30,8-7= p44;
   r44 =30,8-9= q44; u44 =30,8-31,45= l44; n44 =30,8-31,45= (l44 -> m44);
   k44 =30,8-31,45= m44; h45 =30,11-24= g45; i45 =30,25-37= e45;
   g45 =30,25-37= (e45 -> f45); d45 =30,25-37= f45; s45 =30,26-30= r45;
   t45 =30,26-32= p45; r45 =30,26-32= (p45 -> q45); o45 =30,26-32= q45;
   v45 =30,26-34= m45; o45 =30,26-34= (m45 -> n45); l45 =30,26-34= n45;
   x45 =30,26-36= j45; l45 =30,26-36= (j45 -> k45); i45 =30,26-36= k45;
   t45 =30,31-32= u45; v45 =30,33-34= w45; x45 =30,35-36= y45;
   d45 =30,39-37= y44; b45 =30,39-37= (y44 -> a45); x44 =30,39-37= a45;
   c45 =30,39-40= b45; a46 =30,39-31,45= v44; x44 =30,39-31,45= (v44 -> w44);
   u44 =30,39-31,45= w44; string =30,41-44= i46; i46 =30,45-44= e46;
   g46 =30,45-44= (e46 -> f46); d46 =30,45-44= f46; h46 =30,45-46= g46;
   j46 =30,45-31,44= b46; d46 =30,45-31,44= (b46 -> c46);
   a46 =30,45-31,44= c46; c48 =31,3-44= j46; b48 =31,3-44= j46;
   k46 =31,3-44= bool; k47 =31,6-7= l47; k47 =31,8-7= g47;
   i47 =31,8-7= (g47 -> h47); f47 =31,8-7= h47; m47 =31,8-13= d47;
   j47 =31,8-13= i47; f47 =31,8-13= (d47 -> e47); c47 =31,8-13= e47;
   int =31,12-13= m47; c47 =31,14-13= w46; y46 =31,14-13= (w46 -> x46);
   v46 =31,14-13= x46; a47 =31,14-15= y46; n47 =31,14-17= t46;
   v46 =31,14-17= (t46 -> u46); s46 =31,14-17= u46; int =31,16-17= n47;
   s46 =31,18-17= o46; q46 =31,18-17= (o46 -> p46); n46 =31,18-17= p46;
   r46 =31,18-20= q46; o47 =31,18-26= l46; n46 =31,18-26= (l46 -> m46);
   k46 =31,18-26= m46; x47 =31,21-22= y47; x47 =31,23-22= s47;
   u47 =31,23-22= (s47 -> t47); r47 =31,23-22= t47; v47 =31,23-24= u47;
   a48 =31,23-26= p47; r47 =31,23-26= (p47 -> q47); o47 =31,23-26= q47;
   int =31,25-26= a48; string =31,32-36= b48; string =31,42-44= c48;
   o43 =32,6-5= k43; m43 =32,6-5= (k43 -> l43); j43 =32,6-5= l43;
   n43 =32,6-7= m43; l48 =32,6-33,68= h43; j43 =32,6-33,68= (h43 -> i43);
   g43 =32,6-33,68= i43; string =32,8-12= t48; t48 =32,13-12= p48;
   r48 =32,13-12= (p48 -> q48); o48 =32,13-12= q48; s48 =32,13-14= r48;
   u48 =32,13-33,67= m48; o48 =32,13-33,67= (m48 -> n48);
   l48 =32,13-33,67= n48; n50 =33,5-67= u48; m50 =33,5-67= u48;
   v48 =33,5-67= bool; v49 =33,8-9= w49; v49 =33,10-9= r49;
   t49 =33,10-9= (r49 -> s49); q49 =33,10-9= s49; x49 =33,10-15= o49;
   u49 =33,10-15= t49; q49 =33,10-15= (o49 -> p49); n49 =33,10-15= p49;
   int =33,14-15= x49; n49 =33,16-15= i49; k49 =33,16-15= (i49 -> j49);
   h49 =33,16-15= j49; l49 =33,16-17= k49; y49 =33,16-19= f49;
   h49 =33,16-19= (f49 -> g49); e49 =33,16-19= g49; int =33,18-19= y49;
   e49 =33,20-19= a49; c49 =33,20-19= (a49 -> b49); y48 =33,20-19= b49;
   d49 =33,20-22= c49; a50 =33,20-28= w48; y48 =33,20-28= (w48 -> x48);
   v48 =33,20-28= x48; j50 =33,23-24= k50; j50 =33,25-24= e50;
   g50 =33,25-24= (e50 -> f50); d50 =33,25-24= f50; h50 =33,25-26= g50;
   l50 =33,25-28= b50; d50 =33,25-28= (b50 -> c50); a50 =33,25-28= c50;
   int =33,27-28= l50; string =33,34-59= m50; string =33,65-67= n50; }
[DBG generate] for_structure_item at 27,4-34,2
  let unparse =
      function
        b ->
        int_fold~(0, 9)~function
                          j ->
                          function
                            s ->
                            int_fold~(0, 9)~s~function
                                                i ->
                                                function
                                                  s ->
                                                  s ^
                                                    string_of_int~bget~b~i~j ^
                                                      " " ^
                                                        if i mod 3 = 2 &&
                                                             i < 8 then
                                                         "| " else "" ^
                              "\n" ^
                                if j mod 3 = 2 && j < 8 then
                                                              "---------------------\n"
                                else "":
  {(bool -> (bool -> bool)) =Pervasives.(&&)= r46;
   (bool -> (bool -> bool)) =Pervasives.(&&)= d49;
   (w47 -> (w47 -> bool)) =Pervasives.(<)= v47;
   (i50 -> (i50 -> bool)) =Pervasives.(<)= h50;
   (b47 -> (b47 -> bool)) =Pervasives.(=)= a47;
   (m49 -> (m49 -> bool)) =Pervasives.(=)= l49;
   (string -> (string -> string)) =Pervasives.(^)= r44;
   (string -> (string -> string)) =Pervasives.(^)= c45;
   (string -> (string -> string)) =Pervasives.(^)= h46;
   (string -> (string -> string)) =Pervasives.(^)= n43;
   (string -> (string -> string)) =Pervasives.(^)= s48;
   (int -> (int -> int)) =Pervasives.(mod)= j47;
   (int -> (int -> int)) =Pervasives.(mod)= u49;
   (int -> string) =Pervasives.string_of_int= h45;
   (board -> (int -> (int -> int))) =bget= s45;
   ((int , int) -> (x42 -> ((int -> (x42 -> x42)) -> x42))) =int_fold= w42;
   ((int , int) -> (a44 -> ((int -> (a44 -> a44)) -> a44))) =int_fold= y43;
   m42 =27,4-34,2= n42; u45 =27,16-17= o42; a51 =27,16-34,2= w50;
   a51 =27,16-34,2= p42; y50 =27,16-34,2= x50; y50 =27,16-34,2= o42;
   n42 =27,16-34,2= (y50 -> a51); w42 =28,1-9= v42; y42 =28,1-15= t42;
   v42 =28,1-15= (t42 -> u42); s42 =28,1-15= u42; c43 =28,1-33,68= q42;
   s42 =28,1-33,68= (q42 -> r42); p42 =28,1-33,68= r42; int =28,11-12= a43;
   y42 =28,12-15= (a43 , b43); int =28,14-15= b43; k50 =28,22-23= d43;
   w49 =28,22-23= d43; y45 =28,22-23= d43; v50 =28,22-33,68= s50;
   v50 =28,22-33,68= e43; u50 =28,22-33,68= t50; u50 =28,22-33,68= d43;
   c43 =28,22-33,68= (u50 -> v50); f44 =28,24-25= f43; r50 =28,24-33,68= o50;
   r50 =28,24-33,68= g43; q50 =28,24-33,68= p50; q50 =28,24-33,68= f43;
   e43 =28,24-33,68= (q50 -> r50); y43 =29,4-12= x43; b44 =29,4-18= v43;
   x43 =29,4-18= (v43 -> w43); u43 =29,4-18= w43; e44 =29,4-21= s43;
   u43 =29,4-21= (s43 -> t43); r43 =29,4-21= t43; g44 =29,4-31,45= p43;
   r43 =29,4-31,45= (p43 -> q43); o43 =29,4-31,45= q43; int =29,14-15= c44;
   b44 =29,15-18= (c44 , d44); int =29,17-18= d44; e44 =29,20-21= f44;
   y47 =29,27-28= h44; l47 =29,27-28= h44; w45 =29,27-28= h44;
   k48 =29,27-31,45= h48; k48 =29,27-31,45= i44; j48 =29,27-31,45= i48;
   j48 =29,27-31,45= h44; g44 =29,27-31,45= (j48 -> k48); t44 =29,29-30= j44;
   g48 =29,29-31,45= d48; g48 =29,29-31,45= k44; f48 =29,29-31,45= e48;
   f48 =29,29-31,45= j44; i44 =29,29-31,45= (f48 -> g48); s44 =30,6-7= t44;
   s44 =30,8-7= o44; q44 =30,8-7= (o44 -> p44); n44 =30,8-7= p44;
   r44 =30,8-9= q44; u44 =30,8-31,45= l44; n44 =30,8-31,45= (l44 -> m44);
   k44 =30,8-31,45= m44; h45 =30,11-24= g45; i45 =30,25-37= e45;
   g45 =30,25-37= (e45 -> f45); d45 =30,25-37= f45; s45 =30,26-30= r45;
   t45 =30,26-32= p45; r45 =30,26-32= (p45 -> q45); o45 =30,26-32= q45;
   v45 =30,26-34= m45; o45 =30,26-34= (m45 -> n45); l45 =30,26-34= n45;
   x45 =30,26-36= j45; l45 =30,26-36= (j45 -> k45); i45 =30,26-36= k45;
   t45 =30,31-32= u45; v45 =30,33-34= w45; x45 =30,35-36= y45;
   d45 =30,39-37= y44; b45 =30,39-37= (y44 -> a45); x44 =30,39-37= a45;
   c45 =30,39-40= b45; a46 =30,39-31,45= v44; x44 =30,39-31,45= (v44 -> w44);
   u44 =30,39-31,45= w44; string =30,41-44= i46; i46 =30,45-44= e46;
   g46 =30,45-44= (e46 -> f46); d46 =30,45-44= f46; h46 =30,45-46= g46;
   j46 =30,45-31,44= b46; d46 =30,45-31,44= (b46 -> c46);
   a46 =30,45-31,44= c46; c48 =31,3-44= j46; b48 =31,3-44= j46;
   k46 =31,3-44= bool; k47 =31,6-7= l47; k47 =31,8-7= g47;
   i47 =31,8-7= (g47 -> h47); f47 =31,8-7= h47; m47 =31,8-13= d47;
   j47 =31,8-13= i47; f47 =31,8-13= (d47 -> e47); c47 =31,8-13= e47;
   int =31,12-13= m47; c47 =31,14-13= w46; y46 =31,14-13= (w46 -> x46);
   v46 =31,14-13= x46; a47 =31,14-15= y46; n47 =31,14-17= t46;
   v46 =31,14-17= (t46 -> u46); s46 =31,14-17= u46; int =31,16-17= n47;
   s46 =31,18-17= o46; q46 =31,18-17= (o46 -> p46); n46 =31,18-17= p46;
   r46 =31,18-20= q46; o47 =31,18-26= l46; n46 =31,18-26= (l46 -> m46);
   k46 =31,18-26= m46; x47 =31,21-22= y47; x47 =31,23-22= s47;
   u47 =31,23-22= (s47 -> t47); r47 =31,23-22= t47; v47 =31,23-24= u47;
   a48 =31,23-26= p47; r47 =31,23-26= (p47 -> q47); o47 =31,23-26= q47;
   int =31,25-26= a48; string =31,32-36= b48; string =31,42-44= c48;
   o43 =32,6-5= k43; m43 =32,6-5= (k43 -> l43); j43 =32,6-5= l43;
   n43 =32,6-7= m43; l48 =32,6-33,68= h43; j43 =32,6-33,68= (h43 -> i43);
   g43 =32,6-33,68= i43; string =32,8-12= t48; t48 =32,13-12= p48;
   r48 =32,13-12= (p48 -> q48); o48 =32,13-12= q48; s48 =32,13-14= r48;
   u48 =32,13-33,67= m48; o48 =32,13-33,67= (m48 -> n48);
   l48 =32,13-33,67= n48; n50 =33,5-67= u48; m50 =33,5-67= u48;
   v48 =33,5-67= bool; v49 =33,8-9= w49; v49 =33,10-9= r49;
   t49 =33,10-9= (r49 -> s49); q49 =33,10-9= s49; x49 =33,10-15= o49;
   u49 =33,10-15= t49; q49 =33,10-15= (o49 -> p49); n49 =33,10-15= p49;
   int =33,14-15= x49; n49 =33,16-15= i49; k49 =33,16-15= (i49 -> j49);
   h49 =33,16-15= j49; l49 =33,16-17= k49; y49 =33,16-19= f49;
   h49 =33,16-19= (f49 -> g49); e49 =33,16-19= g49; int =33,18-19= y49;
   e49 =33,20-19= a49; c49 =33,20-19= (a49 -> b49); y48 =33,20-19= b49;
   d49 =33,20-22= c49; a50 =33,20-28= w48; y48 =33,20-28= (w48 -> x48);
   v48 =33,20-28= x48; j50 =33,23-24= k50; j50 =33,25-24= e50;
   g50 =33,25-24= (e50 -> f50); d50 =33,25-24= f50; h50 =33,25-26= g50;
   l50 =33,25-28= b50; d50 =33,25-28= (b50 -> c50); a50 =33,25-28= c50;
   int =33,27-28= l50; string =33,34-59= m50; string =33,65-67= n50; }
[DBG generate] Generated for strit, resulting env:
Values: unparse: m42; 
  Types: 
[INF typing] 207 constraints generated.
[DBG typing] generated constraints:
               {(bool -> (bool -> bool)) =Pervasives.(&&)= r46;
                (bool -> (bool -> bool)) =Pervasives.(&&)= d49;
                (w47 -> (w47 -> bool)) =Pervasives.(<)= v47;
                (i50 -> (i50 -> bool)) =Pervasives.(<)= h50;
                (b47 -> (b47 -> bool)) =Pervasives.(=)= a47;
                (m49 -> (m49 -> bool)) =Pervasives.(=)= l49;
                (string -> (string -> string)) =Pervasives.(^)= r44;
                (string -> (string -> string)) =Pervasives.(^)= c45;
                (string -> (string -> string)) =Pervasives.(^)= h46;
                (string -> (string -> string)) =Pervasives.(^)= n43;
                (string -> (string -> string)) =Pervasives.(^)= s48;
                (int -> (int -> int)) =Pervasives.(mod)= j47;
                (int -> (int -> int)) =Pervasives.(mod)= u49;
                (int -> string) =Pervasives.string_of_int= h45;
                (board -> (int -> (int -> int))) =bget= s45;
                ((int , int) -> (x42 -> ((int -> (x42 -> x42)) -> x42))) =int_fold= w42;
                ((int , int) -> (a44 -> ((int -> (a44 -> a44)) -> a44))) =int_fold= y43;
                m42 =27,4-34,2= n42; u45 =27,16-17= o42;
                a51 =27,16-34,2= w50; a51 =27,16-34,2= p42;
                y50 =27,16-34,2= x50; y50 =27,16-34,2= o42;
                n42 =27,16-34,2= (y50 -> a51); w42 =28,1-9= v42;
                y42 =28,1-15= t42; v42 =28,1-15= (t42 -> u42);
                s42 =28,1-15= u42; c43 =28,1-33,68= q42;
                s42 =28,1-33,68= (q42 -> r42); p42 =28,1-33,68= r42;
                int =28,11-12= a43; y42 =28,12-15= (a43 , b43);
                int =28,14-15= b43; k50 =28,22-23= d43; w49 =28,22-23= d43;
                y45 =28,22-23= d43; v50 =28,22-33,68= s50;
                v50 =28,22-33,68= e43; u50 =28,22-33,68= t50;
                u50 =28,22-33,68= d43; c43 =28,22-33,68= (u50 -> v50);
                f44 =28,24-25= f43; r50 =28,24-33,68= o50;
                r50 =28,24-33,68= g43; q50 =28,24-33,68= p50;
                q50 =28,24-33,68= f43; e43 =28,24-33,68= (q50 -> r50);
                y43 =29,4-12= x43; b44 =29,4-18= v43;
                x43 =29,4-18= (v43 -> w43); u43 =29,4-18= w43;
                e44 =29,4-21= s43; u43 =29,4-21= (s43 -> t43);
                r43 =29,4-21= t43; g44 =29,4-31,45= p43;
                r43 =29,4-31,45= (p43 -> q43); o43 =29,4-31,45= q43;
                int =29,14-15= c44; b44 =29,15-18= (c44 , d44);
                int =29,17-18= d44; e44 =29,20-21= f44; y47 =29,27-28= h44;
                l47 =29,27-28= h44; w45 =29,27-28= h44;
                k48 =29,27-31,45= h48; k48 =29,27-31,45= i44;
                j48 =29,27-31,45= i48; j48 =29,27-31,45= h44;
                g44 =29,27-31,45= (j48 -> k48); t44 =29,29-30= j44;
                g48 =29,29-31,45= d48; g48 =29,29-31,45= k44;
                f48 =29,29-31,45= e48; f48 =29,29-31,45= j44;
                i44 =29,29-31,45= (f48 -> g48); s44 =30,6-7= t44;
                s44 =30,8-7= o44; q44 =30,8-7= (o44 -> p44);
                n44 =30,8-7= p44; r44 =30,8-9= q44; u44 =30,8-31,45= l44;
                n44 =30,8-31,45= (l44 -> m44); k44 =30,8-31,45= m44;
                h45 =30,11-24= g45; i45 =30,25-37= e45;
                g45 =30,25-37= (e45 -> f45); d45 =30,25-37= f45;
                s45 =30,26-30= r45; t45 =30,26-32= p45;
                r45 =30,26-32= (p45 -> q45); o45 =30,26-32= q45;
                v45 =30,26-34= m45; o45 =30,26-34= (m45 -> n45);
                l45 =30,26-34= n45; x45 =30,26-36= j45;
                l45 =30,26-36= (j45 -> k45); i45 =30,26-36= k45;
                t45 =30,31-32= u45; v45 =30,33-34= w45; x45 =30,35-36= y45;
                d45 =30,39-37= y44; b45 =30,39-37= (y44 -> a45);
                x44 =30,39-37= a45; c45 =30,39-40= b45;
                a46 =30,39-31,45= v44; x44 =30,39-31,45= (v44 -> w44);
                u44 =30,39-31,45= w44; string =30,41-44= i46;
                i46 =30,45-44= e46; g46 =30,45-44= (e46 -> f46);
                d46 =30,45-44= f46; h46 =30,45-46= g46;
                j46 =30,45-31,44= b46; d46 =30,45-31,44= (b46 -> c46);
                a46 =30,45-31,44= c46; c48 =31,3-44= j46; b48 =31,3-44= j46;
                k46 =31,3-44= bool; k47 =31,6-7= l47; k47 =31,8-7= g47;
                i47 =31,8-7= (g47 -> h47); f47 =31,8-7= h47;
                m47 =31,8-13= d47; j47 =31,8-13= i47;
                f47 =31,8-13= (d47 -> e47); c47 =31,8-13= e47;
                int =31,12-13= m47; c47 =31,14-13= w46;
                y46 =31,14-13= (w46 -> x46); v46 =31,14-13= x46;
                a47 =31,14-15= y46; n47 =31,14-17= t46;
                v46 =31,14-17= (t46 -> u46); s46 =31,14-17= u46;
                int =31,16-17= n47; s46 =31,18-17= o46;
                q46 =31,18-17= (o46 -> p46); n46 =31,18-17= p46;
                r46 =31,18-20= q46; o47 =31,18-26= l46;
                n46 =31,18-26= (l46 -> m46); k46 =31,18-26= m46;
                x47 =31,21-22= y47; x47 =31,23-22= s47;
                u47 =31,23-22= (s47 -> t47); r47 =31,23-22= t47;
                v47 =31,23-24= u47; a48 =31,23-26= p47;
                r47 =31,23-26= (p47 -> q47); o47 =31,23-26= q47;
                int =31,25-26= a48; string =31,32-36= b48;
                string =31,42-44= c48; o43 =32,6-5= k43;
                m43 =32,6-5= (k43 -> l43); j43 =32,6-5= l43;
                n43 =32,6-7= m43; l48 =32,6-33,68= h43;
                j43 =32,6-33,68= (h43 -> i43); g43 =32,6-33,68= i43;
                string =32,8-12= t48; t48 =32,13-12= p48;
                r48 =32,13-12= (p48 -> q48); o48 =32,13-12= q48;
                s48 =32,13-14= r48; u48 =32,13-33,67= m48;
                o48 =32,13-33,67= (m48 -> n48); l48 =32,13-33,67= n48;
                n50 =33,5-67= u48; m50 =33,5-67= u48; v48 =33,5-67= bool;
                v49 =33,8-9= w49; v49 =33,10-9= r49;
                t49 =33,10-9= (r49 -> s49); q49 =33,10-9= s49;
                x49 =33,10-15= o49; u49 =33,10-15= t49;
                q49 =33,10-15= (o49 -> p49); n49 =33,10-15= p49;
                int =33,14-15= x49; n49 =33,16-15= i49;
                k49 =33,16-15= (i49 -> j49); h49 =33,16-15= j49;
                l49 =33,16-17= k49; y49 =33,16-19= f49;
                h49 =33,16-19= (f49 -> g49); e49 =33,16-19= g49;
                int =33,18-19= y49; e49 =33,20-19= a49;
                c49 =33,20-19= (a49 -> b49); y48 =33,20-19= b49;
                d49 =33,20-22= c49; a50 =33,20-28= w48;
                y48 =33,20-28= (w48 -> x48); v48 =33,20-28= x48;
                j50 =33,23-24= k50; j50 =33,25-24= e50;
                g50 =33,25-24= (e50 -> f50); d50 =33,25-24= f50;
                h50 =33,25-26= g50; l50 =33,25-28= b50;
                d50 =33,25-28= (b50 -> c50); a50 =33,25-28= c50;
                int =33,27-28= l50; string =33,34-59= m50;
                string =33,65-67= n50; }
[DBG typing] Unifying
               {(bool -> (bool -> bool)) =Pervasives.(&&)= r46;
                (bool -> (bool -> bool)) =Pervasives.(&&)= d49;
                (w47 -> (w47 -> bool)) =Pervasives.(<)= v47;
                (i50 -> (i50 -> bool)) =Pervasives.(<)= h50;
                (b47 -> (b47 -> bool)) =Pervasives.(=)= a47;
                (m49 -> (m49 -> bool)) =Pervasives.(=)= l49;
                (string -> (string -> string)) =Pervasives.(^)= r44;
                (string -> (string -> string)) =Pervasives.(^)= c45;
                (string -> (string -> string)) =Pervasives.(^)= h46;
                (string -> (string -> string)) =Pervasives.(^)= n43;
                (string -> (string -> string)) =Pervasives.(^)= s48;
                (int -> (int -> int)) =Pervasives.(mod)= j47;
                (int -> (int -> int)) =Pervasives.(mod)= u49;
                (int -> string) =Pervasives.string_of_int= h45;
                (board -> (int -> (int -> int))) =bget= s45;
                ((int , int) -> (x42 -> ((int -> (x42 -> x42)) -> x42))) =int_fold= w42;
                ((int , int) -> (a44 -> ((int -> (a44 -> a44)) -> a44))) =int_fold= y43;
                m42 =27,4-34,2= n42; u45 =27,16-17= o42;
                a51 =27,16-34,2= w50; a51 =27,16-34,2= p42;
                y50 =27,16-34,2= x50; y50 =27,16-34,2= o42;
                n42 =27,16-34,2= (y50 -> a51); w42 =28,1-9= v42;
                y42 =28,1-15= t42; v42 =28,1-15= (t42 -> u42);
                s42 =28,1-15= u42; c43 =28,1-33,68= q42;
                s42 =28,1-33,68= (q42 -> r42); p42 =28,1-33,68= r42;
                int =28,11-12= a43; y42 =28,12-15= (a43 , b43);
                int =28,14-15= b43; k50 =28,22-23= d43; w49 =28,22-23= d43;
                y45 =28,22-23= d43; v50 =28,22-33,68= s50;
                v50 =28,22-33,68= e43; u50 =28,22-33,68= t50;
                u50 =28,22-33,68= d43; c43 =28,22-33,68= (u50 -> v50);
                f44 =28,24-25= f43; r50 =28,24-33,68= o50;
                r50 =28,24-33,68= g43; q50 =28,24-33,68= p50;
                q50 =28,24-33,68= f43; e43 =28,24-33,68= (q50 -> r50);
                y43 =29,4-12= x43; b44 =29,4-18= v43;
                x43 =29,4-18= (v43 -> w43); u43 =29,4-18= w43;
                e44 =29,4-21= s43; u43 =29,4-21= (s43 -> t43);
                r43 =29,4-21= t43; g44 =29,4-31,45= p43;
                r43 =29,4-31,45= (p43 -> q43); o43 =29,4-31,45= q43;
                int =29,14-15= c44; b44 =29,15-18= (c44 , d44);
                int =29,17-18= d44; e44 =29,20-21= f44; y47 =29,27-28= h44;
                l47 =29,27-28= h44; w45 =29,27-28= h44;
                k48 =29,27-31,45= h48; k48 =29,27-31,45= i44;
                j48 =29,27-31,45= i48; j48 =29,27-31,45= h44;
                g44 =29,27-31,45= (j48 -> k48); t44 =29,29-30= j44;
                g48 =29,29-31,45= d48; g48 =29,29-31,45= k44;
                f48 =29,29-31,45= e48; f48 =29,29-31,45= j44;
                i44 =29,29-31,45= (f48 -> g48); s44 =30,6-7= t44;
                s44 =30,8-7= o44; q44 =30,8-7= (o44 -> p44);
                n44 =30,8-7= p44; r44 =30,8-9= q44; u44 =30,8-31,45= l44;
                n44 =30,8-31,45= (l44 -> m44); k44 =30,8-31,45= m44;
                h45 =30,11-24= g45; i45 =30,25-37= e45;
                g45 =30,25-37= (e45 -> f45); d45 =30,25-37= f45;
                s45 =30,26-30= r45; t45 =30,26-32= p45;
                r45 =30,26-32= (p45 -> q45); o45 =30,26-32= q45;
                v45 =30,26-34= m45; o45 =30,26-34= (m45 -> n45);
                l45 =30,26-34= n45; x45 =30,26-36= j45;
                l45 =30,26-36= (j45 -> k45); i45 =30,26-36= k45;
                t45 =30,31-32= u45; v45 =30,33-34= w45; x45 =30,35-36= y45;
                d45 =30,39-37= y44; b45 =30,39-37= (y44 -> a45);
                x44 =30,39-37= a45; c45 =30,39-40= b45;
                a46 =30,39-31,45= v44; x44 =30,39-31,45= (v44 -> w44);
                u44 =30,39-31,45= w44; string =30,41-44= i46;
                i46 =30,45-44= e46; g46 =30,45-44= (e46 -> f46);
                d46 =30,45-44= f46; h46 =30,45-46= g46;
                j46 =30,45-31,44= b46; d46 =30,45-31,44= (b46 -> c46);
                a46 =30,45-31,44= c46; c48 =31,3-44= j46; b48 =31,3-44= j46;
                k46 =31,3-44= bool; k47 =31,6-7= l47; k47 =31,8-7= g47;
                i47 =31,8-7= (g47 -> h47); f47 =31,8-7= h47;
                m47 =31,8-13= d47; j47 =31,8-13= i47;
                f47 =31,8-13= (d47 -> e47); c47 =31,8-13= e47;
                int =31,12-13= m47; c47 =31,14-13= w46;
                y46 =31,14-13= (w46 -> x46); v46 =31,14-13= x46;
                a47 =31,14-15= y46; n47 =31,14-17= t46;
                v46 =31,14-17= (t46 -> u46); s46 =31,14-17= u46;
                int =31,16-17= n47; s46 =31,18-17= o46;
                q46 =31,18-17= (o46 -> p46); n46 =31,18-17= p46;
                r46 =31,18-20= q46; o47 =31,18-26= l46;
                n46 =31,18-26= (l46 -> m46); k46 =31,18-26= m46;
                x47 =31,21-22= y47; x47 =31,23-22= s47;
                u47 =31,23-22= (s47 -> t47); r47 =31,23-22= t47;
                v47 =31,23-24= u47; a48 =31,23-26= p47;
                r47 =31,23-26= (p47 -> q47); o47 =31,23-26= q47;
                int =31,25-26= a48; string =31,32-36= b48;
                string =31,42-44= c48; o43 =32,6-5= k43;
                m43 =32,6-5= (k43 -> l43); j43 =32,6-5= l43;
                n43 =32,6-7= m43; l48 =32,6-33,68= h43;
                j43 =32,6-33,68= (h43 -> i43); g43 =32,6-33,68= i43;
                string =32,8-12= t48; t48 =32,13-12= p48;
                r48 =32,13-12= (p48 -> q48); o48 =32,13-12= q48;
                s48 =32,13-14= r48; u48 =32,13-33,67= m48;
                o48 =32,13-33,67= (m48 -> n48); l48 =32,13-33,67= n48;
                n50 =33,5-67= u48; m50 =33,5-67= u48; v48 =33,5-67= bool;
                v49 =33,8-9= w49; v49 =33,10-9= r49;
                t49 =33,10-9= (r49 -> s49); q49 =33,10-9= s49;
                x49 =33,10-15= o49; u49 =33,10-15= t49;
                q49 =33,10-15= (o49 -> p49); n49 =33,10-15= p49;
                int =33,14-15= x49; n49 =33,16-15= i49;
                k49 =33,16-15= (i49 -> j49); h49 =33,16-15= j49;
                l49 =33,16-17= k49; y49 =33,16-19= f49;
                h49 =33,16-19= (f49 -> g49); e49 =33,16-19= g49;
                int =33,18-19= y49; e49 =33,20-19= a49;
                c49 =33,20-19= (a49 -> b49); y48 =33,20-19= b49;
                d49 =33,20-22= c49; a50 =33,20-28= w48;
                y48 =33,20-28= (w48 -> x48); v48 =33,20-28= x48;
                j50 =33,23-24= k50; j50 =33,25-24= e50;
                g50 =33,25-24= (e50 -> f50); d50 =33,25-24= f50;
                h50 =33,25-26= g50; l50 =33,25-28= b50;
                d50 =33,25-28= (b50 -> c50); a50 =33,25-28= c50;
                int =33,27-28= l50; string =33,34-59= m50;
                string =33,65-67= n50; }
[DBG typing] switching X, var: r46 = (bool -> (bool -> bool))
[DBG typing] switching X, var: d49 = (bool -> (bool -> bool))
[DBG typing] TyVar d49, (bool -> (bool -> bool)): adding d49 -> (bool -> (bool -> bool)) to E
[DBG typing] TyVar r46, (bool -> (bool -> bool)): adding r46 -> (bool -> (bool -> bool)) to E
[DBG typing] switching X, var: v47 = (w47 -> (w47 -> bool))
[DBG typing] switching X, var: h50 = (i50 -> (i50 -> bool))
[DBG typing] TyVar h50, (i50 -> (i50 -> bool)): adding h50 -> (i50 -> (i50 -> bool)) to E
[DBG typing] TyVar v47, (w47 -> (w47 -> bool)): adding v47 -> (w47 -> (w47 -> bool)) to E
[DBG typing] switching X, var: a47 = (b47 -> (b47 -> bool))
[DBG typing] switching X, var: l49 = (m49 -> (m49 -> bool))
[DBG typing] TyVar l49, (m49 -> (m49 -> bool)): adding l49 -> (m49 -> (m49 -> bool)) to E
[DBG typing] TyVar a47, (b47 -> (b47 -> bool)): adding a47 -> (b47 -> (b47 -> bool)) to E
[DBG typing] switching X, var: r44 = (string -> (string -> string))
[DBG typing] switching X, var: c45 = (string -> (string -> string))
[DBG typing] switching X, var: h46 = (string -> (string -> string))
[DBG typing] switching X, var: n43 = (string -> (string -> string))
[DBG typing] switching X, var: s48 = (string -> (string -> string))
[DBG typing] TyVar s48, (string -> (string -> string)): adding s48 -> (string -> (string -> string)) to E
[DBG typing] TyVar h46, (string -> (string -> string)): adding h46 -> (string -> (string -> string)) to E
[DBG typing] TyVar c45, (string -> (string -> string)): adding c45 -> (string -> (string -> string)) to E
[DBG typing] TyVar r44, (string -> (string -> string)): adding r44 -> (string -> (string -> string)) to E
[DBG typing] TyVar n43, (string -> (string -> string)): adding n43 -> (string -> (string -> string)) to E
[DBG typing] switching X, var: j47 = (int -> (int -> int))
[DBG typing] switching X, var: u49 = (int -> (int -> int))
[DBG typing] TyVar u49, (int -> (int -> int)): adding u49 -> (int -> (int -> int)) to E
[DBG typing] TyVar j47, (int -> (int -> int)): adding j47 -> (int -> (int -> int)) to E
[DBG typing] switching X, var: h45 = (int -> string)
[DBG typing] TyVar h45, (int -> string): adding h45 -> (int -> string) to E
[DBG typing] switching X, var: s45 = (board -> (int -> (int -> int)))
[DBG typing] TyVar s45, (array int -> (int -> (int -> int))): adding s45 -> (board -> (int -> (int -> int))) to E
[DBG typing] switching X, var: w42 = ((int , int) -> (x42 -> ((int -> (x42 -> x42)) -> x42)))
[DBG typing] switching X, var: y43 = ((int , int) -> (a44 -> ((int -> (a44 -> a44)) -> a44)))
[DBG typing] TyVar y43, ((int , int) -> (a44 -> ((int -> (a44 -> a44)) -> a44))): adding y43 -> ((int , int) -> (a44 -> ((int -> (a44 -> a44)) -> a44))) to E
[DBG typing] TyVar w42, ((int , int) -> (x42 -> ((int -> (x42 -> x42)) -> x42))): adding w42 -> ((int , int) -> (x42 -> ((int -> (x42 -> x42)) -> x42))) to E
[DBG typing] TyVar m42, n42: adding m42 -> n42 to E
[DBG typing] TyVar u45, o42: adding u45 -> o42 to E
[DBG typing] TyVar a51, w50: adding a51 -> w50 to E
[DBG typing] TyVar a51, w50: --> w50 = p42 (lookup)
[DBG typing] TyVar y50, x50: adding y50 -> x50 to E
[DBG typing] TyVar y50, x50: --> x50 = o42 (lookup)
[DBG typing] TyVar x50, o42: adding x50 -> o42 to E
[DBG typing] TyVar w50, p42: adding w50 -> p42 to E
[DBG typing] TyVar n42, (y50 -> a51): adding n42 -> (y50 -> a51) to E
[DBG typing] TyVar w42, ((int , int) -> (x42 -> ((int -> (x42 -> x42)) -> x42))): --> ((int , int) -> (x42 -> ((int -> (x42 -> x42)) -> x42))) = v42 (lookup)
[DBG typing] switching X, var: v42 = ((int , int) -> (x42 -> ((int -> (x42 -> x42)) -> x42)))
[DBG typing] TyVar v42, ((int , int) -> (x42 -> ((int -> (x42 -> x42)) -> x42))): adding v42 -> ((int , int) -> (x42 -> ((int -> (x42 -> x42)) -> x42))) to E
[DBG typing] TyVar y42, t42: adding y42 -> t42 to E
[DBG typing] TyVar v42, ((int , int) -> (x42 -> ((int -> (x42 -> x42)) -> x42))): --> ((int , int) -> (x42 -> ((int -> (x42 -> x42)) -> x42))) = (t42 -> u42) (lookup)
[DBG typing] Unifying arrows ((int , int) -> (x42 -> ((int -> (x42 -> x42)) -> x42))), (t42 -> u42) --> (int , int) = t42, (x42 -> ((int -> (x42 -> x42)) -> x42)) = u42
[DBG typing] switching X, var: u42 = (x42 -> ((int -> (x42 -> x42)) -> x42))
[DBG typing] switching X, var: t42 = (int , int)
[DBG typing] TyVar u42, (x42 -> ((int -> (x42 -> x42)) -> x42)): adding u42 -> (x42 -> ((int -> (x42 -> x42)) -> x42)) to E
[DBG typing] TyVar t42, (int , int): adding t42 -> (int , int) to E
[DBG typing] TyVar s42, u42: adding s42 -> u42 to E
[DBG typing] TyVar c43, q42: adding c43 -> q42 to E
[DBG typing] TyVar s42, u42: --> u42 = (q42 -> r42) (lookup)
[DBG typing] TyVar u42, (x42 -> ((int -> (x42 -> x42)) -> x42)): --> (x42 -> ((int -> (x42 -> x42)) -> x42)) = (q42 -> r42) (lookup)
[DBG typing] Unifying arrows (x42 -> ((int -> (x42 -> x42)) -> x42)), (q42 -> r42) --> x42 = q42, ((int -> (x42 -> x42)) -> x42) = r42
[DBG typing] switching X, var: r42 = ((int -> (x42 -> x42)) -> x42)
[DBG typing] TyVar x42, q42: adding x42 -> q42 to E
[DBG typing] TyVar r42, ((int -> (x42 -> x42)) -> x42): adding r42 -> ((int -> (x42 -> x42)) -> x42) to E
[DBG typing] TyVar p42, r42: adding p42 -> r42 to E
[DBG typing] switching X, var: a43 = int
[DBG typing] TyVar a43, int: adding a43 -> int to E
[DBG typing] TyVar y42, t42: --> t42 = (a43 , b43) (lookup)
[DBG typing] TyVar t42, (int , int): --> (int , int) = (a43 , b43) (lookup)
[DBG typing] Tuples (int , int), (a43 , b43) --> {int = b43; int = a43; }
[DBG typing] switching X, var: b43 = int
[DBG typing] switching X, var: a43 = int
[DBG typing] TyVar b43, int: adding b43 -> int to E
[DBG typing] TyVar a43, int: --> int = int (lookup)
[DBG typing] Ctors int, int --> {}
[DBG typing] switching X, var: b43 = int
[DBG typing] TyVar b43, int: --> int = int (lookup)
[DBG typing] Ctors int, int --> {}
[DBG typing] TyVar k50, d43: adding k50 -> d43 to E
[DBG typing] TyVar w49, d43: adding w49 -> d43 to E
[DBG typing] TyVar y45, d43: adding y45 -> d43 to E
[DBG typing] TyVar v50, s50: adding v50 -> s50 to E
[DBG typing] TyVar v50, s50: --> s50 = e43 (lookup)
[DBG typing] TyVar u50, t50: adding u50 -> t50 to E
[DBG typing] TyVar u50, t50: --> t50 = d43 (lookup)
[DBG typing] TyVar t50, d43: adding t50 -> d43 to E
[DBG typing] TyVar s50, e43: adding s50 -> e43 to E
[DBG typing] TyVar c43, q42: --> q42 = (u50 -> v50) (lookup)
[DBG typing] TyVar q42, (u50 -> v50): adding q42 -> (u50 -> v50) to E
[DBG typing] TyVar f44, f43: adding f44 -> f43 to E
[DBG typing] TyVar r50, o50: adding r50 -> o50 to E
[DBG typing] TyVar r50, o50: --> o50 = g43 (lookup)
[DBG typing] TyVar q50, p50: adding q50 -> p50 to E
[DBG typing] TyVar q50, p50: --> p50 = f43 (lookup)
[DBG typing] TyVar p50, f43: adding p50 -> f43 to E
[DBG typing] TyVar o50, g43: adding o50 -> g43 to E
[DBG typing] TyVar e43, (q50 -> r50): adding e43 -> (q50 -> r50) to E
[DBG typing] TyVar y43, ((int , int) -> (a44 -> ((int -> (a44 -> a44)) -> a44))): --> ((int , int) -> (a44 -> ((int -> (a44 -> a44)) -> a44))) = x43 (lookup)
[DBG typing] switching X, var: x43 = ((int , int) -> (a44 -> ((int -> (a44 -> a44)) -> a44)))
[DBG typing] TyVar x43, ((int , int) -> (a44 -> ((int -> (a44 -> a44)) -> a44))): adding x43 -> ((int , int) -> (a44 -> ((int -> (a44 -> a44)) -> a44))) to E
[DBG typing] TyVar b44, v43: adding b44 -> v43 to E
[DBG typing] TyVar x43, ((int , int) -> (a44 -> ((int -> (a44 -> a44)) -> a44))): --> ((int , int) -> (a44 -> ((int -> (a44 -> a44)) -> a44))) = (v43 -> w43) (lookup)
[DBG typing] Unifying arrows ((int , int) -> (a44 -> ((int -> (a44 -> a44)) -> a44))), (v43 -> w43) --> (int , int) = v43, (a44 -> ((int -> (a44 -> a44)) -> a44)) = w43
[DBG typing] switching X, var: w43 = (a44 -> ((int -> (a44 -> a44)) -> a44))
[DBG typing] switching X, var: v43 = (int , int)
[DBG typing] TyVar w43, (a44 -> ((int -> (a44 -> a44)) -> a44)): adding w43 -> (a44 -> ((int -> (a44 -> a44)) -> a44)) to E
[DBG typing] TyVar v43, (int , int): adding v43 -> (int , int) to E
[DBG typing] TyVar u43, w43: adding u43 -> w43 to E
[DBG typing] TyVar e44, s43: adding e44 -> s43 to E
[DBG typing] TyVar u43, w43: --> w43 = (s43 -> t43) (lookup)
[DBG typing] TyVar w43, (a44 -> ((int -> (a44 -> a44)) -> a44)): --> (a44 -> ((int -> (a44 -> a44)) -> a44)) = (s43 -> t43) (lookup)
[DBG typing] Unifying arrows (a44 -> ((int -> (a44 -> a44)) -> a44)), (s43 -> t43) --> a44 = s43, ((int -> (a44 -> a44)) -> a44) = t43
[DBG typing] switching X, var: t43 = ((int -> (a44 -> a44)) -> a44)
[DBG typing] TyVar a44, s43: adding a44 -> s43 to E
[DBG typing] TyVar t43, ((int -> (a44 -> a44)) -> a44): adding t43 -> ((int -> (a44 -> a44)) -> a44) to E
[DBG typing] TyVar r43, t43: adding r43 -> t43 to E
[DBG typing] TyVar g44, p43: adding g44 -> p43 to E
[DBG typing] TyVar r43, t43: --> t43 = (p43 -> q43) (lookup)
[DBG typing] TyVar t43, ((int -> (a44 -> a44)) -> a44): --> ((int -> (a44 -> a44)) -> a44) = (p43 -> q43) (lookup)
[DBG typing] Unifying arrows ((int -> (a44 -> a44)) -> a44), (p43 -> q43) --> (int -> (a44 -> a44)) = p43, a44 = q43
[DBG typing] switching X, var: p43 = (int -> (a44 -> a44))
[DBG typing] TyVar a44, s43: --> s43 = q43 (lookup)
[DBG typing] TyVar s43, q43: adding s43 -> q43 to E
[DBG typing] TyVar p43, (int -> (a44 -> a44)): adding p43 -> (int -> (a44 -> a44)) to E
[DBG typing] TyVar o43, q43: adding o43 -> q43 to E
[DBG typing] switching X, var: c44 = int
[DBG typing] TyVar c44, int: adding c44 -> int to E
[DBG typing] TyVar b44, v43: --> v43 = (c44 , d44) (lookup)
[DBG typing] TyVar v43, (int , int): --> (int , int) = (c44 , d44) (lookup)
[DBG typing] Tuples (int , int), (c44 , d44) --> {int = d44; int = c44; }
[DBG typing] switching X, var: d44 = int
[DBG typing] switching X, var: c44 = int
[DBG typing] TyVar d44, int: adding d44 -> int to E
[DBG typing] TyVar c44, int: --> int = int (lookup)
[DBG typing] Ctors int, int --> {}
[DBG typing] switching X, var: d44 = int
[DBG typing] TyVar d44, int: --> int = int (lookup)
[DBG typing] Ctors int, int --> {}
[DBG typing] TyVar e44, s43: --> s43 = f44 (lookup)
[DBG typing] TyVar s43, q43: --> q43 = f44 (lookup)
[DBG typing] TyVar q43, f44: adding q43 -> f44 to E
[DBG typing] TyVar y47, h44: adding y47 -> h44 to E
[DBG typing] TyVar l47, h44: adding l47 -> h44 to E
[DBG typing] TyVar w45, h44: adding w45 -> h44 to E
[DBG typing] TyVar k48, h48: adding k48 -> h48 to E
[DBG typing] TyVar k48, h48: --> h48 = i44 (lookup)
[DBG typing] TyVar j48, i48: adding j48 -> i48 to E
[DBG typing] TyVar j48, i48: --> i48 = h44 (lookup)
[DBG typing] TyVar i48, h44: adding i48 -> h44 to E
[DBG typing] TyVar h48, i44: adding h48 -> i44 to E
[DBG typing] TyVar g44, p43: --> p43 = (j48 -> k48) (lookup)
[DBG typing] TyVar p43, (int -> (a44 -> a44)): --> (int -> (a44 -> a44)) = (j48 -> k48) (lookup)
[DBG typing] Unifying arrows (int -> (a44 -> a44)), (j48 -> k48) --> int = j48, (a44 -> a44) = k48
[DBG typing] switching X, var: k48 = (a44 -> a44)
[DBG typing] switching X, var: j48 = int
[DBG typing] TyVar k48, h48: --> h48 = (a44 -> a44) (lookup)
[DBG typing] TyVar j48, i48: --> i48 = int (lookup)
[DBG typing] TyVar i48, h44: --> h44 = int (lookup)
[DBG typing] TyVar h48, i44: --> i44 = (a44 -> a44) (lookup)
[DBG typing] TyVar i44, (a44 -> a44): adding i44 -> (a44 -> a44) to E
[DBG typing] TyVar h44, int: adding h44 -> int to E
[DBG typing] TyVar t44, j44: adding t44 -> j44 to E
[DBG typing] TyVar g48, d48: adding g48 -> d48 to E
[DBG typing] TyVar g48, d48: --> d48 = k44 (lookup)
[DBG typing] TyVar f48, e48: adding f48 -> e48 to E
[DBG typing] TyVar f48, e48: --> e48 = j44 (lookup)
[DBG typing] TyVar e48, j44: adding e48 -> j44 to E
[DBG typing] TyVar d48, k44: adding d48 -> k44 to E
[DBG typing] TyVar i44, (a44 -> a44): --> (a44 -> a44) = (f48 -> g48) (lookup)
[DBG typing] Unifying arrows (a44 -> a44), (f48 -> g48) --> a44 = f48, a44 = g48
[DBG typing] TyVar a44, s43: --> s43 = g48 (lookup)
[DBG typing] TyVar a44, s43: --> s43 = f48 (lookup)
[DBG typing] TyVar s43, q43: --> q43 = g48 (lookup)
[DBG typing] TyVar s43, q43: --> q43 = f48 (lookup)
[DBG typing] TyVar q43, f44: --> f44 = g48 (lookup)
[DBG typing] TyVar f44, f43: --> f43 = g48 (lookup)
[DBG typing] TyVar f43, g48: adding f43 -> g48 to E
[DBG typing] TyVar q43, f44: --> f44 = f48 (lookup)
[DBG typing] TyVar f44, f43: --> f43 = f48 (lookup)
[DBG typing] TyVar f43, g48: --> g48 = f48 (lookup)
[DBG typing] TyVar g48, d48: --> d48 = f48 (lookup)
[DBG typing] TyVar d48, k44: --> k44 = f48 (lookup)
[DBG typing] TyVar k44, f48: adding k44 -> f48 to E
[DBG typing] TyVar s44, t44: adding s44 -> t44 to E
[DBG typing] TyVar s44, t44: --> t44 = o44 (lookup)
[DBG typing] TyVar t44, j44: --> j44 = o44 (lookup)
[DBG typing] TyVar j44, o44: adding j44 -> o44 to E
[DBG typing] TyVar q44, (o44 -> p44): adding q44 -> (o44 -> p44) to E
[DBG typing] TyVar n44, p44: adding n44 -> p44 to E
[DBG typing] TyVar r44, (string -> (string -> string)): --> (string -> (string -> string)) = q44 (lookup)
[DBG typing] switching X, var: q44 = (string -> (string -> string))
[DBG typing] TyVar q44, (o44 -> p44): --> (o44 -> p44) = (string -> (string -> string)) (lookup)
[DBG typing] Unifying arrows (o44 -> p44), (string -> (string -> string)) --> o44 = string, p44 = (string -> string)
[DBG typing] TyVar p44, (string -> string): adding p44 -> (string -> string) to E
[DBG typing] TyVar o44, string: adding o44 -> string to E
[DBG typing] TyVar u44, l44: adding u44 -> l44 to E
[DBG typing] TyVar n44, p44: --> p44 = (l44 -> m44) (lookup)
[DBG typing] TyVar p44, (string -> string): --> (string -> string) = (l44 -> m44) (lookup)
[DBG typing] Unifying arrows (string -> string), (l44 -> m44) --> string = l44, string = m44
[DBG typing] switching X, var: m44 = string
[DBG typing] switching X, var: l44 = string
[DBG typing] TyVar m44, string: adding m44 -> string to E
[DBG typing] TyVar l44, string: adding l44 -> string to E
[DBG typing] TyVar k44, f48: --> f48 = m44 (lookup)
[DBG typing] TyVar f48, e48: --> e48 = m44 (lookup)
[DBG typing] TyVar e48, j44: --> j44 = m44 (lookup)
[DBG typing] TyVar j44, o44: --> o44 = m44 (lookup)
[DBG typing] TyVar o44, string: --> string = m44 (lookup)
[DBG typing] switching X, var: m44 = string
[DBG typing] TyVar m44, string: --> string = string (lookup)
[DBG typing] Ignore identity: string = string
[DBG typing] TyVar h45, (int -> string): --> (int -> string) = g45 (lookup)
[DBG typing] switching X, var: g45 = (int -> string)
[DBG typing] TyVar g45, (int -> string): adding g45 -> (int -> string) to E
[DBG typing] TyVar i45, e45: adding i45 -> e45 to E
[DBG typing] TyVar g45, (int -> string): --> (int -> string) = (e45 -> f45) (lookup)
[DBG typing] Unifying arrows (int -> string), (e45 -> f45) --> int = e45, string = f45
[DBG typing] switching X, var: e45 = int
[DBG typing] switching X, var: f45 = string
[DBG typing] TyVar f45, string: adding f45 -> string to E
[DBG typing] TyVar e45, int: adding e45 -> int to E
[DBG typing] TyVar d45, f45: adding d45 -> f45 to E
[DBG typing] TyVar s45, (board -> (int -> (int -> int))): --> (board -> (int -> (int -> int))) = r45 (lookup)
[DBG typing] switching X, var: r45 = (board -> (int -> (int -> int)))
[DBG typing] TyVar r45, (array int -> (int -> (int -> int))): adding r45 -> (board -> (int -> (int -> int))) to E
[DBG typing] TyVar t45, p45: adding t45 -> p45 to E
[DBG typing] TyVar r45, (board -> (int -> (int -> int))): --> (board -> (int -> (int -> int))) = (p45 -> q45) (lookup)
[DBG typing] Unifying arrows (array int -> (int -> (int -> int))), (p45 -> q45) --> array int = p45, (int -> (int -> int)) = q45
[DBG typing] switching X, var: q45 = (int -> (int -> int))
[DBG typing] switching X, var: p45 = array int
[DBG typing] TyVar q45, (int -> (int -> int)): adding q45 -> (int -> (int -> int)) to E
[DBG typing] TyVar p45, array int: adding p45 -> array int to E
[DBG typing] TyVar o45, q45: adding o45 -> q45 to E
[DBG typing] TyVar v45, m45: adding v45 -> m45 to E
[DBG typing] TyVar o45, q45: --> q45 = (m45 -> n45) (lookup)
[DBG typing] TyVar q45, (int -> (int -> int)): --> (int -> (int -> int)) = (m45 -> n45) (lookup)
[DBG typing] Unifying arrows (int -> (int -> int)), (m45 -> n45) --> int = m45, (int -> int) = n45
[DBG typing] switching X, var: n45 = (int -> int)
[DBG typing] switching X, var: m45 = int
[DBG typing] TyVar n45, (int -> int): adding n45 -> (int -> int) to E
[DBG typing] TyVar m45, int: adding m45 -> int to E
[DBG typing] TyVar l45, n45: adding l45 -> n45 to E
[DBG typing] TyVar x45, j45: adding x45 -> j45 to E
[DBG typing] TyVar l45, n45: --> n45 = (j45 -> k45) (lookup)
[DBG typing] TyVar n45, (int -> int): --> (int -> int) = (j45 -> k45) (lookup)
[DBG typing] Unifying arrows (int -> int), (j45 -> k45) --> int = j45, int = k45
[DBG typing] switching X, var: k45 = int
[DBG typing] switching X, var: j45 = int
[DBG typing] TyVar k45, int: adding k45 -> int to E
[DBG typing] TyVar j45, int: adding j45 -> int to E
[DBG typing] TyVar i45, e45: --> e45 = k45 (lookup)
[DBG typing] TyVar e45, int: --> int = k45 (lookup)
[DBG typing] switching X, var: k45 = int
[DBG typing] TyVar k45, int: --> int = int (lookup)
[DBG typing] Ctors int, int --> {}
[DBG typing] TyVar t45, p45: --> p45 = u45 (lookup)
[DBG typing] TyVar p45, array int: --> array int = u45 (lookup)
[DBG typing] switching X, var: u45 = array int
[DBG typing] TyVar u45, o42: --> o42 = array int (lookup)
[DBG typing] TyVar o42, array int: adding o42 -> array int to E
[DBG typing] TyVar v45, m45: --> m45 = w45 (lookup)
[DBG typing] TyVar m45, int: --> int = w45 (lookup)
[DBG typing] switching X, var: w45 = int
[DBG typing] TyVar w45, h44: --> h44 = int (lookup)
[DBG typing] TyVar h44, int: --> int = int (lookup)
[DBG typing] Ctors int, int --> {}
[DBG typing] TyVar x45, j45: --> j45 = y45 (lookup)
[DBG typing] TyVar j45, int: --> int = y45 (lookup)
[DBG typing] switching X, var: y45 = int
[DBG typing] TyVar y45, d43: --> d43 = int (lookup)
[DBG typing] TyVar d43, int: adding d43 -> int to E
[DBG typing] TyVar d45, f45: --> f45 = y44 (lookup)
[DBG typing] TyVar f45, string: --> string = y44 (lookup)
[DBG typing] switching X, var: y44 = string
[DBG typing] TyVar y44, string: adding y44 -> string to E
[DBG typing] TyVar b45, (y44 -> a45): adding b45 -> (y44 -> a45) to E
[DBG typing] TyVar x44, a45: adding x44 -> a45 to E
[DBG typing] TyVar c45, (string -> (string -> string)): --> (string -> (string -> string)) = b45 (lookup)
[DBG typing] switching X, var: b45 = (string -> (string -> string))
[DBG typing] TyVar b45, (y44 -> a45): --> (y44 -> a45) = (string -> (string -> string)) (lookup)
[DBG typing] Unifying arrows (y44 -> a45), (string -> (string -> string)) --> y44 = string, a45 = (string -> string)
[DBG typing] TyVar a45, (string -> string): adding a45 -> (string -> string) to E
[DBG typing] TyVar y44, string: --> string = string (lookup)
[DBG typing] Ctors string, string --> {}
[DBG typing] TyVar a46, v44: adding a46 -> v44 to E
[DBG typing] TyVar x44, a45: --> a45 = (v44 -> w44) (lookup)
[DBG typing] TyVar a45, (string -> string): --> (string -> string) = (v44 -> w44) (lookup)
[DBG typing] Unifying arrows (string -> string), (v44 -> w44) --> string = v44, string = w44
[DBG typing] switching X, var: w44 = string
[DBG typing] switching X, var: v44 = string
[DBG typing] TyVar w44, string: adding w44 -> string to E
[DBG typing] TyVar v44, string: adding v44 -> string to E
[DBG typing] TyVar u44, l44: --> l44 = w44 (lookup)
[DBG typing] TyVar l44, string: --> string = w44 (lookup)
[DBG typing] switching X, var: w44 = string
[DBG typing] TyVar w44, string: --> string = string (lookup)
[DBG typing] Ctors string, string --> {}
[DBG typing] switching X, var: i46 = string
[DBG typing] TyVar i46, string: adding i46 -> string to E
[DBG typing] TyVar i46, string: --> string = e46 (lookup)
[DBG typing] switching X, var: e46 = string
[DBG typing] TyVar e46, string: adding e46 -> string to E
[DBG typing] TyVar g46, (e46 -> f46): adding g46 -> (e46 -> f46) to E
[DBG typing] TyVar d46, f46: adding d46 -> f46 to E
[DBG typing] TyVar h46, (string -> (string -> string)): --> (string -> (string -> string)) = g46 (lookup)
[DBG typing] switching X, var: g46 = (string -> (string -> string))
[DBG typing] TyVar g46, (e46 -> f46): --> (e46 -> f46) = (string -> (string -> string)) (lookup)
[DBG typing] Unifying arrows (e46 -> f46), (string -> (string -> string)) --> e46 = string, f46 = (string -> string)
[DBG typing] TyVar f46, (string -> string): adding f46 -> (string -> string) to E
[DBG typing] TyVar e46, string: --> string = string (lookup)
[DBG typing] Ctors string, string --> {}
[DBG typing] TyVar j46, b46: adding j46 -> b46 to E
[DBG typing] TyVar d46, f46: --> f46 = (b46 -> c46) (lookup)
[DBG typing] TyVar f46, (string -> string): --> (string -> string) = (b46 -> c46) (lookup)
[DBG typing] Unifying arrows (string -> string), (b46 -> c46) --> string = b46, string = c46
[DBG typing] switching X, var: c46 = string
[DBG typing] switching X, var: b46 = string
[DBG typing] TyVar c46, string: adding c46 -> string to E
[DBG typing] TyVar b46, string: adding b46 -> string to E
[DBG typing] TyVar a46, v44: --> v44 = c46 (lookup)
[DBG typing] TyVar v44, string: --> string = c46 (lookup)
[DBG typing] switching X, var: c46 = string
[DBG typing] TyVar c46, string: --> string = string (lookup)
[DBG typing] Ctors string, string --> {}
[DBG typing] TyVar c48, j46: adding c48 -> j46 to E
[DBG typing] TyVar b48, j46: adding b48 -> j46 to E
[DBG typing] TyVar k46, bool: adding k46 -> bool to E
[DBG typing] TyVar k47, l47: adding k47 -> l47 to E
[DBG typing] TyVar k47, l47: --> l47 = g47 (lookup)
[DBG typing] TyVar l47, h44: --> h44 = g47 (lookup)
[DBG typing] TyVar h44, int: --> int = g47 (lookup)
[DBG typing] switching X, var: g47 = int
[DBG typing] TyVar g47, int: adding g47 -> int to E
[DBG typing] TyVar i47, (g47 -> h47): adding i47 -> (g47 -> h47) to E
[DBG typing] TyVar f47, h47: adding f47 -> h47 to E
[DBG typing] TyVar m47, d47: adding m47 -> d47 to E
[DBG typing] TyVar j47, (int -> (int -> int)): --> (int -> (int -> int)) = i47 (lookup)
[DBG typing] switching X, var: i47 = (int -> (int -> int))
[DBG typing] TyVar i47, (g47 -> h47): --> (g47 -> h47) = (int -> (int -> int)) (lookup)
[DBG typing] Unifying arrows (g47 -> h47), (int -> (int -> int)) --> g47 = int, h47 = (int -> int)
[DBG typing] TyVar h47, (int -> int): adding h47 -> (int -> int) to E
[DBG typing] TyVar g47, int: --> int = int (lookup)
[DBG typing] Ctors int, int --> {}
[DBG typing] TyVar f47, h47: --> h47 = (d47 -> e47) (lookup)
[DBG typing] TyVar h47, (int -> int): --> (int -> int) = (d47 -> e47) (lookup)
[DBG typing] Unifying arrows (int -> int), (d47 -> e47) --> int = d47, int = e47
[DBG typing] switching X, var: e47 = int
[DBG typing] switching X, var: d47 = int
[DBG typing] TyVar e47, int: adding e47 -> int to E
[DBG typing] TyVar d47, int: adding d47 -> int to E
[DBG typing] TyVar c47, e47: adding c47 -> e47 to E
[DBG typing] switching X, var: m47 = int
[DBG typing] TyVar m47, d47: --> d47 = int (lookup)
[DBG typing] TyVar d47, int: --> int = int (lookup)
[DBG typing] Ctors int, int --> {}
[DBG typing] TyVar c47, e47: --> e47 = w46 (lookup)
[DBG typing] TyVar e47, int: --> int = w46 (lookup)
[DBG typing] switching X, var: w46 = int
[DBG typing] TyVar w46, int: adding w46 -> int to E
[DBG typing] TyVar y46, (w46 -> x46): adding y46 -> (w46 -> x46) to E
[DBG typing] TyVar v46, x46: adding v46 -> x46 to E
[DBG typing] TyVar a47, (b47 -> (b47 -> bool)): --> (b47 -> (b47 -> bool)) = y46 (lookup)
[DBG typing] switching X, var: y46 = (b47 -> (b47 -> bool))
[DBG typing] TyVar y46, (w46 -> x46): --> (w46 -> x46) = (b47 -> (b47 -> bool)) (lookup)
[DBG typing] Unifying arrows (w46 -> x46), (b47 -> (b47 -> bool)) --> w46 = b47, x46 = (b47 -> bool)
[DBG typing] TyVar x46, (b47 -> bool): adding x46 -> (b47 -> bool) to E
[DBG typing] TyVar w46, int: --> int = b47 (lookup)
[DBG typing] switching X, var: b47 = int
[DBG typing] TyVar b47, int: adding b47 -> int to E
[DBG typing] TyVar n47, t46: adding n47 -> t46 to E
[DBG typing] TyVar v46, x46: --> x46 = (t46 -> u46) (lookup)
[DBG typing] TyVar x46, (b47 -> bool): --> (b47 -> bool) = (t46 -> u46) (lookup)
[DBG typing] Unifying arrows (b47 -> bool), (t46 -> u46) --> b47 = t46, bool = u46
[DBG typing] switching X, var: u46 = bool
[DBG typing] TyVar b47, int: --> int = t46 (lookup)
[DBG typing] switching X, var: t46 = int
[DBG typing] TyVar t46, int: adding t46 -> int to E
[DBG typing] TyVar u46, bool: adding u46 -> bool to E
[DBG typing] TyVar s46, u46: adding s46 -> u46 to E
[DBG typing] switching X, var: n47 = int
[DBG typing] TyVar n47, t46: --> t46 = int (lookup)
[DBG typing] TyVar t46, int: --> int = int (lookup)
[DBG typing] Ctors int, int --> {}
[DBG typing] TyVar s46, u46: --> u46 = o46 (lookup)
[DBG typing] TyVar u46, bool: --> bool = o46 (lookup)
[DBG typing] switching X, var: o46 = bool
[DBG typing] TyVar o46, bool: adding o46 -> bool to E
[DBG typing] TyVar q46, (o46 -> p46): adding q46 -> (o46 -> p46) to E
[DBG typing] TyVar n46, p46: adding n46 -> p46 to E
[DBG typing] TyVar r46, (bool -> (bool -> bool)): --> (bool -> (bool -> bool)) = q46 (lookup)
[DBG typing] switching X, var: q46 = (bool -> (bool -> bool))
[DBG typing] TyVar q46, (o46 -> p46): --> (o46 -> p46) = (bool -> (bool -> bool)) (lookup)
[DBG typing] Unifying arrows (o46 -> p46), (bool -> (bool -> bool)) --> o46 = bool, p46 = (bool -> bool)
[DBG typing] TyVar p46, (bool -> bool): adding p46 -> (bool -> bool) to E
[DBG typing] TyVar o46, bool: --> bool = bool (lookup)
[DBG typing] Ctors bool, bool --> {}
[DBG typing] TyVar o47, l46: adding o47 -> l46 to E
[DBG typing] TyVar n46, p46: --> p46 = (l46 -> m46) (lookup)
[DBG typing] TyVar p46, (bool -> bool): --> (bool -> bool) = (l46 -> m46) (lookup)
[DBG typing] Unifying arrows (bool -> bool), (l46 -> m46) --> bool = l46, bool = m46
[DBG typing] switching X, var: m46 = bool
[DBG typing] switching X, var: l46 = bool
[DBG typing] TyVar m46, bool: adding m46 -> bool to E
[DBG typing] TyVar l46, bool: adding l46 -> bool to E
[DBG typing] TyVar k46, bool: --> bool = m46 (lookup)
[DBG typing] switching X, var: m46 = bool
[DBG typing] TyVar m46, bool: --> bool = bool (lookup)
[DBG typing] Ctors bool, bool --> {}
[DBG typing] TyVar x47, y47: adding x47 -> y47 to E
[DBG typing] TyVar x47, y47: --> y47 = s47 (lookup)
[DBG typing] TyVar y47, h44: --> h44 = s47 (lookup)
[DBG typing] TyVar h44, int: --> int = s47 (lookup)
[DBG typing] switching X, var: s47 = int
[DBG typing] TyVar s47, int: adding s47 -> int to E
[DBG typing] TyVar u47, (s47 -> t47): adding u47 -> (s47 -> t47) to E
[DBG typing] TyVar r47, t47: adding r47 -> t47 to E
[DBG typing] TyVar v47, (w47 -> (w47 -> bool)): --> (w47 -> (w47 -> bool)) = u47 (lookup)
[DBG typing] switching X, var: u47 = (w47 -> (w47 -> bool))
[DBG typing] TyVar u47, (s47 -> t47): --> (s47 -> t47) = (w47 -> (w47 -> bool)) (lookup)
[DBG typing] Unifying arrows (s47 -> t47), (w47 -> (w47 -> bool)) --> s47 = w47, t47 = (w47 -> bool)
[DBG typing] TyVar t47, (w47 -> bool): adding t47 -> (w47 -> bool) to E
[DBG typing] TyVar s47, int: --> int = w47 (lookup)
[DBG typing] switching X, var: w47 = int
[DBG typing] TyVar w47, int: adding w47 -> int to E
[DBG typing] TyVar a48, p47: adding a48 -> p47 to E
[DBG typing] TyVar r47, t47: --> t47 = (p47 -> q47) (lookup)
[DBG typing] TyVar t47, (w47 -> bool): --> (w47 -> bool) = (p47 -> q47) (lookup)
[DBG typing] Unifying arrows (w47 -> bool), (p47 -> q47) --> w47 = p47, bool = q47
[DBG typing] switching X, var: q47 = bool
[DBG typing] TyVar w47, int: --> int = p47 (lookup)
[DBG typing] switching X, var: p47 = int
[DBG typing] TyVar p47, int: adding p47 -> int to E
[DBG typing] TyVar q47, bool: adding q47 -> bool to E
[DBG typing] TyVar o47, l46: --> l46 = q47 (lookup)
[DBG typing] TyVar l46, bool: --> bool = q47 (lookup)
[DBG typing] switching X, var: q47 = bool
[DBG typing] TyVar q47, bool: --> bool = bool (lookup)
[DBG typing] Ctors bool, bool --> {}
[DBG typing] switching X, var: a48 = int
[DBG typing] TyVar a48, p47: --> p47 = int (lookup)
[DBG typing] TyVar p47, int: --> int = int (lookup)
[DBG typing] Ctors int, int --> {}
[DBG typing] switching X, var: b48 = string
[DBG typing] TyVar b48, j46: --> j46 = string (lookup)
[DBG typing] TyVar j46, b46: --> b46 = string (lookup)
[DBG typing] TyVar b46, string: --> string = string (lookup)
[DBG typing] Ctors string, string --> {}
[DBG typing] switching X, var: c48 = string
[DBG typing] TyVar c48, j46: --> j46 = string (lookup)
[DBG typing] TyVar j46, b46: --> b46 = string (lookup)
[DBG typing] TyVar b46, string: --> string = string (lookup)
[DBG typing] Ctors string, string --> {}
[DBG typing] TyVar o43, q43: --> q43 = k43 (lookup)
[DBG typing] TyVar q43, f44: --> f44 = k43 (lookup)
[DBG typing] TyVar f44, f43: --> f43 = k43 (lookup)
[DBG typing] TyVar f43, g48: --> g48 = k43 (lookup)
[DBG typing] TyVar g48, d48: --> d48 = k43 (lookup)
[DBG typing] TyVar d48, k44: --> k44 = k43 (lookup)
[DBG typing] TyVar k44, f48: --> f48 = k43 (lookup)
[DBG typing] TyVar f48, e48: --> e48 = k43 (lookup)
[DBG typing] TyVar e48, j44: --> j44 = k43 (lookup)
[DBG typing] TyVar j44, o44: --> o44 = k43 (lookup)
[DBG typing] TyVar o44, string: --> string = k43 (lookup)
[DBG typing] switching X, var: k43 = string
[DBG typing] TyVar k43, string: adding k43 -> string to E
[DBG typing] TyVar m43, (k43 -> l43): adding m43 -> (k43 -> l43) to E
[DBG typing] TyVar j43, l43: adding j43 -> l43 to E
[DBG typing] TyVar n43, (string -> (string -> string)): --> (string -> (string -> string)) = m43 (lookup)
[DBG typing] switching X, var: m43 = (string -> (string -> string))
[DBG typing] TyVar m43, (k43 -> l43): --> (k43 -> l43) = (string -> (string -> string)) (lookup)
[DBG typing] Unifying arrows (k43 -> l43), (string -> (string -> string)) --> k43 = string, l43 = (string -> string)
[DBG typing] TyVar l43, (string -> string): adding l43 -> (string -> string) to E
[DBG typing] TyVar k43, string: --> string = string (lookup)
[DBG typing] Ctors string, string --> {}
[DBG typing] TyVar l48, h43: adding l48 -> h43 to E
[DBG typing] TyVar j43, l43: --> l43 = (h43 -> i43) (lookup)
[DBG typing] TyVar l43, (string -> string): --> (string -> string) = (h43 -> i43) (lookup)
[DBG typing] Unifying arrows (string -> string), (h43 -> i43) --> string = h43, string = i43
[DBG typing] switching X, var: i43 = string
[DBG typing] switching X, var: h43 = string
[DBG typing] TyVar i43, string: adding i43 -> string to E
[DBG typing] TyVar h43, string: adding h43 -> string to E
[DBG typing] TyVar g43, i43: adding g43 -> i43 to E
[DBG typing] switching X, var: t48 = string
[DBG typing] TyVar t48, string: adding t48 -> string to E
[DBG typing] TyVar t48, string: --> string = p48 (lookup)
[DBG typing] switching X, var: p48 = string
[DBG typing] TyVar p48, string: adding p48 -> string to E
[DBG typing] TyVar r48, (p48 -> q48): adding r48 -> (p48 -> q48) to E
[DBG typing] TyVar o48, q48: adding o48 -> q48 to E
[DBG typing] TyVar s48, (string -> (string -> string)): --> (string -> (string -> string)) = r48 (lookup)
[DBG typing] switching X, var: r48 = (string -> (string -> string))
[DBG typing] TyVar r48, (p48 -> q48): --> (p48 -> q48) = (string -> (string -> string)) (lookup)
[DBG typing] Unifying arrows (p48 -> q48), (string -> (string -> string)) --> p48 = string, q48 = (string -> string)
[DBG typing] TyVar q48, (string -> string): adding q48 -> (string -> string) to E
[DBG typing] TyVar p48, string: --> string = string (lookup)
[DBG typing] Ctors string, string --> {}
[DBG typing] TyVar u48, m48: adding u48 -> m48 to E
[DBG typing] TyVar o48, q48: --> q48 = (m48 -> n48) (lookup)
[DBG typing] TyVar q48, (string -> string): --> (string -> string) = (m48 -> n48) (lookup)
[DBG typing] Unifying arrows (string -> string), (m48 -> n48) --> string = m48, string = n48
[DBG typing] switching X, var: n48 = string
[DBG typing] switching X, var: m48 = string
[DBG typing] TyVar n48, string: adding n48 -> string to E
[DBG typing] TyVar m48, string: adding m48 -> string to E
[DBG typing] TyVar l48, h43: --> h43 = n48 (lookup)
[DBG typing] TyVar h43, string: --> string = n48 (lookup)
[DBG typing] switching X, var: n48 = string
[DBG typing] TyVar n48, string: --> string = string (lookup)
[DBG typing] Ctors string, string --> {}
[DBG typing] TyVar n50, u48: adding n50 -> u48 to E
[DBG typing] TyVar m50, u48: adding m50 -> u48 to E
[DBG typing] TyVar v48, bool: adding v48 -> bool to E
[DBG typing] TyVar v49, w49: adding v49 -> w49 to E
[DBG typing] TyVar v49, w49: --> w49 = r49 (lookup)
[DBG typing] TyVar w49, d43: --> d43 = r49 (lookup)
[DBG typing] TyVar d43, int: --> int = r49 (lookup)
[DBG typing] switching X, var: r49 = int
[DBG typing] TyVar r49, int: adding r49 -> int to E
[DBG typing] TyVar t49, (r49 -> s49): adding t49 -> (r49 -> s49) to E
[DBG typing] TyVar q49, s49: adding q49 -> s49 to E
[DBG typing] TyVar x49, o49: adding x49 -> o49 to E
[DBG typing] TyVar u49, (int -> (int -> int)): --> (int -> (int -> int)) = t49 (lookup)
[DBG typing] switching X, var: t49 = (int -> (int -> int))
[DBG typing] TyVar t49, (r49 -> s49): --> (r49 -> s49) = (int -> (int -> int)) (lookup)
[DBG typing] Unifying arrows (r49 -> s49), (int -> (int -> int)) --> r49 = int, s49 = (int -> int)
[DBG typing] TyVar s49, (int -> int): adding s49 -> (int -> int) to E
[DBG typing] TyVar r49, int: --> int = int (lookup)
[DBG typing] Ctors int, int --> {}
[DBG typing] TyVar q49, s49: --> s49 = (o49 -> p49) (lookup)
[DBG typing] TyVar s49, (int -> int): --> (int -> int) = (o49 -> p49) (lookup)
[DBG typing] Unifying arrows (int -> int), (o49 -> p49) --> int = o49, int = p49
[DBG typing] switching X, var: p49 = int
[DBG typing] switching X, var: o49 = int
[DBG typing] TyVar p49, int: adding p49 -> int to E
[DBG typing] TyVar o49, int: adding o49 -> int to E
[DBG typing] TyVar n49, p49: adding n49 -> p49 to E
[DBG typing] switching X, var: x49 = int
[DBG typing] TyVar x49, o49: --> o49 = int (lookup)
[DBG typing] TyVar o49, int: --> int = int (lookup)
[DBG typing] Ctors int, int --> {}
[DBG typing] TyVar n49, p49: --> p49 = i49 (lookup)
[DBG typing] TyVar p49, int: --> int = i49 (lookup)
[DBG typing] switching X, var: i49 = int
[DBG typing] TyVar i49, int: adding i49 -> int to E
[DBG typing] TyVar k49, (i49 -> j49): adding k49 -> (i49 -> j49) to E
[DBG typing] TyVar h49, j49: adding h49 -> j49 to E
[DBG typing] TyVar l49, (m49 -> (m49 -> bool)): --> (m49 -> (m49 -> bool)) = k49 (lookup)
[DBG typing] switching X, var: k49 = (m49 -> (m49 -> bool))
[DBG typing] TyVar k49, (i49 -> j49): --> (i49 -> j49) = (m49 -> (m49 -> bool)) (lookup)
[DBG typing] Unifying arrows (i49 -> j49), (m49 -> (m49 -> bool)) --> i49 = m49, j49 = (m49 -> bool)
[DBG typing] TyVar j49, (m49 -> bool): adding j49 -> (m49 -> bool) to E
[DBG typing] TyVar i49, int: --> int = m49 (lookup)
[DBG typing] switching X, var: m49 = int
[DBG typing] TyVar m49, int: adding m49 -> int to E
[DBG typing] TyVar y49, f49: adding y49 -> f49 to E
[DBG typing] TyVar h49, j49: --> j49 = (f49 -> g49) (lookup)
[DBG typing] TyVar j49, (m49 -> bool): --> (m49 -> bool) = (f49 -> g49) (lookup)
[DBG typing] Unifying arrows (m49 -> bool), (f49 -> g49) --> m49 = f49, bool = g49
[DBG typing] switching X, var: g49 = bool
[DBG typing] TyVar m49, int: --> int = f49 (lookup)
[DBG typing] switching X, var: f49 = int
[DBG typing] TyVar f49, int: adding f49 -> int to E
[DBG typing] TyVar g49, bool: adding g49 -> bool to E
[DBG typing] TyVar e49, g49: adding e49 -> g49 to E
[DBG typing] switching X, var: y49 = int
[DBG typing] TyVar y49, f49: --> f49 = int (lookup)
[DBG typing] TyVar f49, int: --> int = int (lookup)
[DBG typing] Ctors int, int --> {}
[DBG typing] TyVar e49, g49: --> g49 = a49 (lookup)
[DBG typing] TyVar g49, bool: --> bool = a49 (lookup)
[DBG typing] switching X, var: a49 = bool
[DBG typing] TyVar a49, bool: adding a49 -> bool to E
[DBG typing] TyVar c49, (a49 -> b49): adding c49 -> (a49 -> b49) to E
[DBG typing] TyVar y48, b49: adding y48 -> b49 to E
[DBG typing] TyVar d49, (bool -> (bool -> bool)): --> (bool -> (bool -> bool)) = c49 (lookup)
[DBG typing] switching X, var: c49 = (bool -> (bool -> bool))
[DBG typing] TyVar c49, (a49 -> b49): --> (a49 -> b49) = (bool -> (bool -> bool)) (lookup)
[DBG typing] Unifying arrows (a49 -> b49), (bool -> (bool -> bool)) --> a49 = bool, b49 = (bool -> bool)
[DBG typing] TyVar b49, (bool -> bool): adding b49 -> (bool -> bool) to E
[DBG typing] TyVar a49, bool: --> bool = bool (lookup)
[DBG typing] Ctors bool, bool --> {}
[DBG typing] TyVar a50, w48: adding a50 -> w48 to E
[DBG typing] TyVar y48, b49: --> b49 = (w48 -> x48) (lookup)
[DBG typing] TyVar b49, (bool -> bool): --> (bool -> bool) = (w48 -> x48) (lookup)
[DBG typing] Unifying arrows (bool -> bool), (w48 -> x48) --> bool = w48, bool = x48
[DBG typing] switching X, var: x48 = bool
[DBG typing] switching X, var: w48 = bool
[DBG typing] TyVar x48, bool: adding x48 -> bool to E
[DBG typing] TyVar w48, bool: adding w48 -> bool to E
[DBG typing] TyVar v48, bool: --> bool = x48 (lookup)
[DBG typing] switching X, var: x48 = bool
[DBG typing] TyVar x48, bool: --> bool = bool (lookup)
[DBG typing] Ctors bool, bool --> {}
[DBG typing] TyVar j50, k50: adding j50 -> k50 to E
[DBG typing] TyVar j50, k50: --> k50 = e50 (lookup)
[DBG typing] TyVar k50, d43: --> d43 = e50 (lookup)
[DBG typing] TyVar d43, int: --> int = e50 (lookup)
[DBG typing] switching X, var: e50 = int
[DBG typing] TyVar e50, int: adding e50 -> int to E
[DBG typing] TyVar g50, (e50 -> f50): adding g50 -> (e50 -> f50) to E
[DBG typing] TyVar d50, f50: adding d50 -> f50 to E
[DBG typing] TyVar h50, (i50 -> (i50 -> bool)): --> (i50 -> (i50 -> bool)) = g50 (lookup)
[DBG typing] switching X, var: g50 = (i50 -> (i50 -> bool))
[DBG typing] TyVar g50, (e50 -> f50): --> (e50 -> f50) = (i50 -> (i50 -> bool)) (lookup)
[DBG typing] Unifying arrows (e50 -> f50), (i50 -> (i50 -> bool)) --> e50 = i50, f50 = (i50 -> bool)
[DBG typing] TyVar f50, (i50 -> bool): adding f50 -> (i50 -> bool) to E
[DBG typing] TyVar e50, int: --> int = i50 (lookup)
[DBG typing] switching X, var: i50 = int
[DBG typing] TyVar i50, int: adding i50 -> int to E
[DBG typing] TyVar l50, b50: adding l50 -> b50 to E
[DBG typing] TyVar d50, f50: --> f50 = (b50 -> c50) (lookup)
[DBG typing] TyVar f50, (i50 -> bool): --> (i50 -> bool) = (b50 -> c50) (lookup)
[DBG typing] Unifying arrows (i50 -> bool), (b50 -> c50) --> i50 = b50, bool = c50
[DBG typing] switching X, var: c50 = bool
[DBG typing] TyVar i50, int: --> int = b50 (lookup)
[DBG typing] switching X, var: b50 = int
[DBG typing] TyVar b50, int: adding b50 -> int to E
[DBG typing] TyVar c50, bool: adding c50 -> bool to E
[DBG typing] TyVar a50, w48: --> w48 = c50 (lookup)
[DBG typing] TyVar w48, bool: --> bool = c50 (lookup)
[DBG typing] switching X, var: c50 = bool
[DBG typing] TyVar c50, bool: --> bool = bool (lookup)
[DBG typing] Ctors bool, bool --> {}
[DBG typing] switching X, var: l50 = int
[DBG typing] TyVar l50, b50: --> b50 = int (lookup)
[DBG typing] TyVar b50, int: --> int = int (lookup)
[DBG typing] Ctors int, int --> {}
[DBG typing] switching X, var: m50 = string
[DBG typing] TyVar m50, u48: --> u48 = string (lookup)
[DBG typing] TyVar u48, m48: --> m48 = string (lookup)
[DBG typing] TyVar m48, string: --> string = string (lookup)
[DBG typing] Ctors string, string --> {}
[DBG typing] switching X, var: n50 = string
[DBG typing] TyVar n50, u48: --> u48 = string (lookup)
[DBG typing] TyVar u48, m48: --> m48 = string (lookup)
[DBG typing] TyVar m48, string: --> string = string (lookup)
[DBG typing] Ctors string, string --> {}
[INF typing] Constraints unified successfully.
[DBG typing] Resulting tyvarsubst:
               a51: ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string))); y50: array int; x50: array int; w50: ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string))); v50: (string -> string); u50: int; t50: int; s50: (string -> string); r50: string; q50: string; p50: string; o50: string; n50: string; m50: string; l50: int; k50: int; j50: int; i50: int; h50: (int -> (int -> bool)); g50: (int -> (int -> bool)); f50: (int -> bool); e50: int; d50: (int -> bool); c50: bool; b50: int; a50: bool; y49: int; x49: int; w49: int; v49: int; u49: (int -> (int -> int)); t49: (int -> (int -> int)); s49: (int -> int); r49: int; q49: (int -> int); p49: int; o49: int; n49: int; m49: int; l49: (int -> (int -> bool)); k49: (int -> (int -> bool)); j49: (int -> bool); i49: int; h49: (int -> bool); g49: bool; f49: int; e49: bool; d49: (bool -> (bool -> bool)); c49: (bool -> (bool -> bool)); b49: (bool -> bool); a49: bool; y48: (bool -> bool); x48: bool; w48: bool; v48: bool; u48: string; t48: string; s48: (string -> (string -> string)); r48: (string -> (string -> string)); q48: (string -> string); p48: string; o48: (string -> string); n48: string; m48: string; l48: string; k48: (string -> string); j48: int; i48: int; h48: (string -> string); g48: string; f48: string; e48: string; d48: string; c48: string; b48: string; a48: int; y47: int; x47: int; w47: int; v47: (int -> (int -> bool)); u47: (int -> (int -> bool)); t47: (int -> bool); s47: int; r47: (int -> bool); q47: bool; p47: int; o47: bool; n47: int; m47: int; l47: int; k47: int; j47: (int -> (int -> int)); i47: (int -> (int -> int)); h47: (int -> int); g47: int; f47: (int -> int); e47: int; d47: int; c47: int; b47: int; a47: (int -> (int -> bool)); y46: (int -> (int -> bool)); x46: (int -> bool); w46: int; v46: (int -> bool); u46: bool; t46: int; s46: bool; r46: (bool -> (bool -> bool)); q46: (bool -> (bool -> bool)); p46: (bool -> bool); o46: bool; n46: (bool -> bool); m46: bool; l46: bool; k46: bool; j46: string; i46: string; h46: (string -> (string -> string)); g46: (string -> (string -> string)); f46: (string -> string); e46: string; d46: (string -> string); c46: string; b46: string; a46: string; y45: int; x45: int; w45: int; v45: int; u45: array int; t45: array int; s45: (board -> (int -> (int -> int))); r45: (board -> (int -> (int -> int))); q45: (int -> (int -> int)); p45: array int; o45: (int -> (int -> int)); n45: (int -> int); m45: int; l45: (int -> int); k45: int; j45: int; i45: int; h45: (int -> string); g45: (int -> string); f45: string; e45: int; d45: string; c45: (string -> (string -> string)); b45: (string -> (string -> string)); a45: (string -> string); y44: string; x44: (string -> string); w44: string; v44: string; u44: string; t44: string; s44: string; r44: (string -> (string -> string)); q44: (string -> (string -> string)); p44: (string -> string); o44: string; n44: (string -> string); m44: string; l44: string; k44: string; j44: string; i44: (string -> string); h44: int; g44: (int -> (string -> string)); f44: string; e44: string; d44: int; c44: int; b44: (int , int); a44: string; y43: ((int , int) -> (string -> ((int -> (string -> string)) -> string))); x43: ((int , int) -> (string -> ((int -> (string -> string)) -> string))); w43: (string -> ((int -> (string -> string)) -> string)); v43: (int , int); u43: (string -> ((int -> (string -> string)) -> string)); t43: ((int -> (string -> string)) -> string); s43: string; r43: ((int -> (string -> string)) -> string); q43: string; p43: (int -> (string -> string)); o43: string; n43: (string -> (string -> string)); m43: (string -> (string -> string)); l43: (string -> string); k43: string; j43: (string -> string); i43: string; h43: string; g43: string; f43: string; e43: (string -> string); d43: int; c43: (int -> (string -> string)); b43: int; a43: int; y42: (int , int); x42: (int -> (string -> string)); w42: ((int , int) -> ((int -> (string -> string)) -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string))))); v42: ((int , int) -> ((int -> (string -> string)) -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string))))); u42: ((int -> (string -> string)) -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))); t42: (int , int); s42: ((int -> (string -> string)) -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))); r42: ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string))); q42: (int -> (string -> string)); p42: ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string))); o42: array int; n42: (array int -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))); m42: (array int -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))); 
[INF typing] checked annotations
[INF typing] Constraints solved
[INF typing] Succeeded typing structure
  val unparse: (array int -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string))))
  with substitution
  a51: ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string))); y50: array int; x50: array int; w50: ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string))); v50: (string -> string); u50: int; t50: int; s50: (string -> string); r50: string; q50: string; p50: string; o50: string; n50: string; m50: string; l50: int; k50: int; j50: int; i50: int; h50: (int -> (int -> bool)); g50: (int -> (int -> bool)); f50: (int -> bool); e50: int; d50: (int -> bool); c50: bool; b50: int; a50: bool; y49: int; x49: int; w49: int; v49: int; u49: (int -> (int -> int)); t49: (int -> (int -> int)); s49: (int -> int); r49: int; q49: (int -> int); p49: int; o49: int; n49: int; m49: int; l49: (int -> (int -> bool)); k49: (int -> (int -> bool)); j49: (int -> bool); i49: int; h49: (int -> bool); g49: bool; f49: int; e49: bool; d49: (bool -> (bool -> bool)); c49: (bool -> (bool -> bool)); b49: (bool -> bool); a49: bool; y48: (bool -> bool); x48: bool; w48: bool; v48: bool; u48: string; t48: string; s48: (string -> (string -> string)); r48: (string -> (string -> string)); q48: (string -> string); p48: string; o48: (string -> string); n48: string; m48: string; l48: string; k48: (string -> string); j48: int; i48: int; h48: (string -> string); g48: string; f48: string; e48: string; d48: string; c48: string; b48: string; a48: int; y47: int; x47: int; w47: int; v47: (int -> (int -> bool)); u47: (int -> (int -> bool)); t47: (int -> bool); s47: int; r47: (int -> bool); q47: bool; p47: int; o47: bool; n47: int; m47: int; l47: int; k47: int; j47: (int -> (int -> int)); i47: (int -> (int -> int)); h47: (int -> int); g47: int; f47: (int -> int); e47: int; d47: int; c47: int; b47: int; a47: (int -> (int -> bool)); y46: (int -> (int -> bool)); x46: (int -> bool); w46: int; v46: (int -> bool); u46: bool; t46: int; s46: bool; r46: (bool -> (bool -> bool)); q46: (bool -> (bool -> bool)); p46: (bool -> bool); o46: bool; n46: (bool -> bool); m46: bool; l46: bool; k46: bool; j46: string; i46: string; h46: (string -> (string -> string)); g46: (string -> (string -> string)); f46: (string -> string); e46: string; d46: (string -> string); c46: string; b46: string; a46: string; y45: int; x45: int; w45: int; v45: int; u45: array int; t45: array int; s45: (board -> (int -> (int -> int))); r45: (board -> (int -> (int -> int))); q45: (int -> (int -> int)); p45: array int; o45: (int -> (int -> int)); n45: (int -> int); m45: int; l45: (int -> int); k45: int; j45: int; i45: int; h45: (int -> string); g45: (int -> string); f45: string; e45: int; d45: string; c45: (string -> (string -> string)); b45: (string -> (string -> string)); a45: (string -> string); y44: string; x44: (string -> string); w44: string; v44: string; u44: string; t44: string; s44: string; r44: (string -> (string -> string)); q44: (string -> (string -> string)); p44: (string -> string); o44: string; n44: (string -> string); m44: string; l44: string; k44: string; j44: string; i44: (string -> string); h44: int; g44: (int -> (string -> string)); f44: string; e44: string; d44: int; c44: int; b44: (int , int); a44: string; y43: ((int , int) -> (string -> ((int -> (string -> string)) -> string))); x43: ((int , int) -> (string -> ((int -> (string -> string)) -> string))); w43: (string -> ((int -> (string -> string)) -> string)); v43: (int , int); u43: (string -> ((int -> (string -> string)) -> string)); t43: ((int -> (string -> string)) -> string); s43: string; r43: ((int -> (string -> string)) -> string); q43: string; p43: (int -> (string -> string)); o43: string; n43: (string -> (string -> string)); m43: (string -> (string -> string)); l43: (string -> string); k43: string; j43: (string -> string); i43: string; h43: string; g43: string; f43: string; e43: (string -> string); d43: int; c43: (int -> (string -> string)); b43: int; a43: int; y42: (int , int); x42: (int -> (string -> string)); w42: ((int , int) -> ((int -> (string -> string)) -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string))))); v42: ((int , int) -> ((int -> (string -> string)) -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string))))); u42: ((int -> (string -> string)) -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))); t42: (int , int); s42: ((int -> (string -> string)) -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))); r42: ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string))); q42: (int -> (string -> string)); p42: ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string))); o42: array int; n42: (array int -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))); m42: (array int -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))); 
  and env enriched by
  Values: unparse: (array int -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string))));
   Types: 
[DBG ast_comp] Succeeded for:  Pstr_value (27,4-34,2): unparse
[INF ast_comp] Success comparing ecaml/ocaml typing
[DBG typing] Conf.load_path: [, /home/zhdf/easyocaml-0.49/ocaml-3.10.2/lib/ocaml]
[DBG enr_ast] Ocaml ast: [
  structure_item (/home/zhdf/demo/ml/sudoku1.ml[35,1220+4]../home/zhdf/demo/ml/sudoku1.ml[35,1220+41])
    Pstr_value Nonrec
    [
      <def>
        pattern (/home/zhdf/demo/ml/sudoku1.ml[35,1220+8]../home/zhdf/demo/ml/sudoku1.ml[35,1220+13])
          Ppat_var "print"
        expression (/home/zhdf/demo/ml/sudoku1.ml[35,1220+14]../home/zhdf/demo/ml/sudoku1.ml[35,1220+41])
          Pexp_function ""
          None
          [
            <case>
              pattern (/home/zhdf/demo/ml/sudoku1.ml[35,1220+14]../home/zhdf/demo/ml/sudoku1.ml[35,1220+15])
                Ppat_var "b"
              expression (/home/zhdf/demo/ml/sudoku1.ml[35,1220+30]../home/zhdf/demo/ml/sudoku1.ml[35,1220+41])
                Pexp_apply
                expression (/home/zhdf/demo/ml/sudoku1.ml[35,1220+18]../home/zhdf/demo/ml/sudoku1.ml[35,1220+30])
                  Pexp_ident "print_string"
                [
                  <label> ""
                    expression (/home/zhdf/demo/ml/sudoku1.ml[35,1220+39]../home/zhdf/demo/ml/sudoku1.ml[35,1220+40])
                      Pexp_apply
                      expression (/home/zhdf/demo/ml/sudoku1.ml[35,1220+31]../home/zhdf/demo/ml/sudoku1.ml[35,1220+38])
                        Pexp_ident "unparse"
                      [
                        <label> ""
                          expression (/home/zhdf/demo/ml/sudoku1.ml[35,1220+39]../home/zhdf/demo/ml/sudoku1.ml[35,1220+40])
                            Pexp_ident "b"
                      ]
                ]
          ]
    ]
]

[DBG env] Adding field contents
[DBG typing] Type structure in env:
               Values: !: (Pervasives.ref b51 -> b51);
               &&: (bool -> (bool -> bool)); &: (bool -> (bool -> bool));
               !=: (c51 -> (c51 -> bool)); **: (float -> (float -> float));
               +: (int -> (int -> int)); *.: (float -> (float -> float));
               -: (int -> (int -> int)); /: (int -> (int -> int));
               -.: (float -> (float -> float));
               +.: (float -> (float -> float)); *: (int -> (int -> int));
               <: (g51 -> (g51 -> bool));
               :=: (Pervasives.ref d51 -> (d51 -> unit));
               =: (v51 -> (v51 -> bool)); <>: (e51 -> (e51 -> bool));
               >=: (s51 -> (s51 -> bool)); >: (i51 -> (i51 -> bool));
               ==: (h51 -> (h51 -> bool)); <=: (f51 -> (f51 -> bool));
               /.: (float -> (float -> float));
               ^: (string -> (string -> string)); abs: (int -> int);
               ^^: (format6 k51 l51 m51 n51 o51 p51 -> (format6 p51 l51 m51 o51 q51 r51 -> format6 k51 l51 m51 n51 q51 r51));
               acos: (float -> float); asr: (int -> (int -> int));
               at_exit: ((unit -> unit) -> unit); asin: (float -> float);
               abs_float: (float -> float);
               atan2: (float -> (float -> float));
               bget: (board -> (int -> (int -> int)));
               bset: (board -> (int -> (int -> (int -> unit))));
               classify_float: (float -> Pervasives.fpclass);
               char_of_int: (int -> char); ceil: (float -> float);
               bool_of_string: (string -> bool); atan: (float -> float);
               @: (list j51 -> (list j51 -> list j51));
               close_in_noerr: (Pervasives.in_channel -> unit);
               close_out_noerr: (Pervasives.out_channel -> unit);
               close_out: (Pervasives.out_channel -> unit);
               cos: (float -> float); cosh: (float -> float);
               compare: (t51 -> (t51 -> int));
               decr: (Pervasives.ref int -> unit); epsilon_float: float;
               do_at_exit: (unit -> unit); create: (unit -> board);
               failwith: (string -> j52); exp: (float -> float);
               float_of_int: (int -> float); float: (int -> float);
               floor: (float -> float);
               flush: (Pervasives.out_channel -> unit);
               frexp: (float -> (float , int));
               format_of_string: (format6 w51 x51 y51 a52 b52 c52 -> format6 w51 x51 y51 a52 b52 c52);
               flush_all: (unit -> unit); float_of_string: (string -> float);
               exit: (int -> u51); ignore: (f52 -> unit); infinity: float;
               incr: (Pervasives.ref int -> unit);
               in_channel_length: (Pervasives.in_channel -> int);
               input_byte: (Pervasives.in_channel -> int);
               input_binary_int: (Pervasives.in_channel -> int);
               input: (Pervasives.in_channel -> (string -> (int -> (int -> int))));
               input_line: (Pervasives.in_channel -> string);
               int_fold: ((int , int) -> (h52 -> ((int -> (h52 -> h52)) -> h52)));
               input_value: (Pervasives.in_channel -> g52);
               int_of_float: (float -> int); int_of_string: (string -> int);
               int_of_char: (char -> int); land: (int -> (int -> int));
               log: (float -> float); lnot: (int -> int);
               ldexp: (float -> (int -> float)); lor: (int -> (int -> int));
               lsl: (int -> (int -> int)); log10: (float -> float);
               invalid_arg: (string -> i52);
               input_char: (Pervasives.in_channel -> char);
               fst: ((d52 , e52) -> d52);
               close_in: (Pervasives.in_channel -> unit);
               lxor: (int -> (int -> int)); max_float: float;
               max: (l52 -> (l52 -> l52)); min: (k52 -> (k52 -> k52));
               mod: (int -> (int -> int)); min_int: int; min_float: float;
               max_int: int; modf: (float -> (float , float));
               neg_infinity: float; nan: float;
               open_in: (string -> Pervasives.in_channel);
               open_in_bin: (string -> Pervasives.in_channel);
               not: (bool -> bool);
               open_out: (string -> Pervasives.out_channel);
               or: (bool -> (bool -> bool));
               open_out_gen: (list Pervasives.open_flag -> (int -> (string -> Pervasives.out_channel)));
               open_out_bin: (string -> Pervasives.out_channel);
               output: (Pervasives.out_channel -> (string -> (int -> (int -> unit))));
               output_byte: (Pervasives.out_channel -> (int -> unit));
               output_binary_int: (Pervasives.out_channel -> (int -> unit));
               out_channel_length: (Pervasives.out_channel -> int);
               open_in_gen: (list Pervasives.open_flag -> (int -> (string -> Pervasives.in_channel)));
               mod_float: (float -> (float -> float));
               output_string: (Pervasives.out_channel -> (string -> unit));
               output_value: (Pervasives.out_channel -> (m52 -> unit));
               pos_out: (Pervasives.out_channel -> int);
               pos_in: (Pervasives.in_channel -> int);
               prerr_char: (char -> unit); prerr_float: (float -> unit);
               prerr_int: (int -> unit); prerr_endline: (string -> unit);
               pred: (int -> int); prerr_string: (string -> unit);
               print_float: (float -> unit); print_endline: (string -> unit);
               print_char: (char -> unit); print_newline: (unit -> unit);
               raise: (exn -> n52); print_string: (string -> unit);
               print_int: (int -> unit); read_int: (unit -> int);
               really_input: (Pervasives.in_channel -> (string -> (int -> (int -> unit))));
               read_line: (unit -> string);
               seek_in: (Pervasives.in_channel -> (int -> unit));
               ref: (o52 -> Pervasives.ref o52); read_float: (unit -> float);
               prerr_newline: (unit -> unit);
               set_binary_mode_out: (Pervasives.out_channel -> (bool -> unit));
               set_binary_mode_in: (Pervasives.in_channel -> (bool -> unit));
               sinh: (float -> float); sin: (float -> float);
               sqrt: (float -> float); stdin: Pervasives.in_channel;
               stderr: Pervasives.out_channel;
               string_fold: (string -> (s52 -> ((char -> (s52 -> s52)) -> s52)));
               stdout: Pervasives.out_channel; snd: ((p52 , q52) -> q52);
               string_of_bool: (bool -> string);
               string_of_float: (float -> string);
               string_of_int: (int -> string);
               string_of_format: (format6 t52 u52 v52 w52 x52 y52 -> string);
               tan: (float -> float); truncate: (float -> int);
               tanh: (float -> float);
               unsafe_really_input: (Pervasives.in_channel -> (string -> (int -> (int -> unit))));
               ||: (bool -> (bool -> bool)); ~-.: (float -> float);
               ~-: (int -> int); valid_float_lexem: (string -> string);
               unparse: (board -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string))));
               succ: (int -> int);
               string_foldi: (string -> (r52 -> ((char -> (r52 -> r52)) -> (int -> r52))));
               seek_out: (Pervasives.out_channel -> (int -> unit));
               output_char: (Pervasives.out_channel -> (char -> unit));
               lsr: (int -> (int -> int)); 
               Types: type (a53) array = <abstr>;
               type () bool = | false | true ; type () board = array int;
               type () char = <abstr>;
               type () change_type = | FillSquare of int * int | PlaceValue of rectangle * int ;
               type () float = <abstr>;
               type (b53, c53, d53) format = Pervasives.format4 b53 c53 d53 d53;
               type (i53, j53, k53, l53, m53, n53) format6 = <abstr>;
               type () int = <abstr>; type () in_channel = <abstr>;
               type () fpclass = | FP_infinite | FP_nan | FP_normal | FP_subnormal | FP_zero ;
               type (e53, f53, g53, h53) format4 = format6 e53 f53 g53 g53 g53 h53;
               type () exn = ; type () int64 = <abstr>;
               type (p53) list = | :: of p53 * list p53 | [] ;
               type (o53) lazy_t = <abstr>;
               type (r53) option = | None | Some of r53 ;
               type () open_flag = | Open_append | Open_binary | Open_creat | Open_excl | Open_nonblock | Open_rdonly | Open_text | Open_trunc | Open_wronly ;
               type () nativeint = <abstr>;
               type () rectangle = (int , int , int , int);
               type () string = <abstr>; type () unit = | () ;
               type (q53) ref = {contents -> Mutableq53; };
               type () out_channel = <abstr>; type () int32 = <abstr>; 
[DBG generate] for pattern at 35,8-13 print
  (bound: {print -> s53; }, ty: s53, cs: {})
[DBG generate] for pattern at 35,14-15 b
  (bound: {b -> u53; }, ty: u53, cs: {})
[DBG generate] for_expr at 35,18-30 print_string: y53 -
  {(string -> unit) =Pervasives.print_string= a54; a54 =35,18-30= y53; }
[DBG generate] for_expr at 35,31-38 unparse: e54 -
  {(board -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))) =unparse= f54;
   f54 =35,31-38= e54; }
[DBG generate] for_expr at 35,39-40 b: g54 -
  {h54 =35,14-15= u53; g54 =35,39-40= h54; }
[DBG generate] for_expr at 35,39-40 unparse~b: b54 -
  {(board -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))) =unparse= f54;
   h54 =35,14-15= u53; f54 =35,31-38= e54; g54 =35,39-40= h54;
   g54 =35,39-40= c54; e54 =35,39-40= (c54 -> d54); b54 =35,39-40= d54; }
[DBG generate] for_expr at 35,30-41 print_string~unparse~b: v53 -
  {(string -> unit) =Pervasives.print_string= a54;
   (board -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))) =unparse= f54;
   h54 =35,14-15= u53; a54 =35,18-30= y53; b54 =35,30-41= w53;
   y53 =35,30-41= (w53 -> x53); v53 =35,30-41= x53; f54 =35,31-38= e54;
   g54 =35,39-40= h54; g54 =35,39-40= c54; e54 =35,39-40= (c54 -> d54);
   b54 =35,39-40= d54; }
[DBG generate] for_expr at 35,14-41 function b -> print_string~unparse~b:
  t53 -
  {(string -> unit) =Pervasives.print_string= a54;
   (board -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))) =unparse= f54;
   h54 =35,14-15= u53; l54 =35,14-41= i54; l54 =35,14-41= v53;
   k54 =35,14-41= j54; k54 =35,14-41= u53; t53 =35,14-41= (k54 -> l54);
   a54 =35,18-30= y53; b54 =35,30-41= w53; y53 =35,30-41= (w53 -> x53);
   v53 =35,30-41= x53; f54 =35,31-38= e54; g54 =35,39-40= h54;
   g54 =35,39-40= c54; e54 =35,39-40= (c54 -> d54); b54 =35,39-40= d54; }
[DBG generate] for_structure_item at 35,4-41
  let print = function b -> print_string~unparse~b:
  {(string -> unit) =Pervasives.print_string= a54;
   (board -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))) =unparse= f54;
   s53 =35,4-41= t53; h54 =35,14-15= u53; l54 =35,14-41= i54;
   l54 =35,14-41= v53; k54 =35,14-41= j54; k54 =35,14-41= u53;
   t53 =35,14-41= (k54 -> l54); a54 =35,18-30= y53; b54 =35,30-41= w53;
   y53 =35,30-41= (w53 -> x53); v53 =35,30-41= x53; f54 =35,31-38= e54;
   g54 =35,39-40= h54; g54 =35,39-40= c54; e54 =35,39-40= (c54 -> d54);
   b54 =35,39-40= d54; }
[DBG generate] Generated for strit, resulting env:
Values: print: s53; 
  Types: 
[INF typing] 18 constraints generated.
[DBG typing] generated constraints:
               {(string -> unit) =Pervasives.print_string= a54;
                (board -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))) =unparse= f54;
                s53 =35,4-41= t53; h54 =35,14-15= u53; l54 =35,14-41= i54;
                l54 =35,14-41= v53; k54 =35,14-41= j54; k54 =35,14-41= u53;
                t53 =35,14-41= (k54 -> l54); a54 =35,18-30= y53;
                b54 =35,30-41= w53; y53 =35,30-41= (w53 -> x53);
                v53 =35,30-41= x53; f54 =35,31-38= e54; g54 =35,39-40= h54;
                g54 =35,39-40= c54; e54 =35,39-40= (c54 -> d54);
                b54 =35,39-40= d54; }
[DBG typing] Unifying
               {(string -> unit) =Pervasives.print_string= a54;
                (board -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))) =unparse= f54;
                s53 =35,4-41= t53; h54 =35,14-15= u53; l54 =35,14-41= i54;
                l54 =35,14-41= v53; k54 =35,14-41= j54; k54 =35,14-41= u53;
                t53 =35,14-41= (k54 -> l54); a54 =35,18-30= y53;
                b54 =35,30-41= w53; y53 =35,30-41= (w53 -> x53);
                v53 =35,30-41= x53; f54 =35,31-38= e54; g54 =35,39-40= h54;
                g54 =35,39-40= c54; e54 =35,39-40= (c54 -> d54);
                b54 =35,39-40= d54; }
[DBG typing] switching X, var: a54 = (string -> unit)
[DBG typing] TyVar a54, (string -> unit): adding a54 -> (string -> unit) to E
[DBG typing] switching X, var: f54 = (board -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string))))
[DBG typing] TyVar f54, (array int -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))): adding f54 -> (board -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))) to E
[DBG typing] TyVar s53, t53: adding s53 -> t53 to E
[DBG typing] TyVar h54, u53: adding h54 -> u53 to E
[DBG typing] TyVar l54, i54: adding l54 -> i54 to E
[DBG typing] TyVar l54, i54: --> i54 = v53 (lookup)
[DBG typing] TyVar k54, j54: adding k54 -> j54 to E
[DBG typing] TyVar k54, j54: --> j54 = u53 (lookup)
[DBG typing] TyVar j54, u53: adding j54 -> u53 to E
[DBG typing] TyVar i54, v53: adding i54 -> v53 to E
[DBG typing] TyVar t53, (k54 -> l54): adding t53 -> (k54 -> l54) to E
[DBG typing] TyVar a54, (string -> unit): --> (string -> unit) = y53 (lookup)
[DBG typing] switching X, var: y53 = (string -> unit)
[DBG typing] TyVar y53, (string -> unit): adding y53 -> (string -> unit) to E
[DBG typing] TyVar b54, w53: adding b54 -> w53 to E
[DBG typing] TyVar y53, (string -> unit): --> (string -> unit) = (w53 -> x53) (lookup)
[DBG typing] Unifying arrows (string -> unit), (w53 -> x53) --> string = w53, unit = x53
[DBG typing] switching X, var: w53 = string
[DBG typing] switching X, var: x53 = unit
[DBG typing] TyVar x53, unit: adding x53 -> unit to E
[DBG typing] TyVar w53, string: adding w53 -> string to E
[DBG typing] TyVar v53, x53: adding v53 -> x53 to E
[DBG typing] TyVar f54, (board -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))): --> (board -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))) = e54 (lookup)
[DBG typing] switching X, var: e54 = (board -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string))))
[DBG typing] TyVar e54, (array int -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))): adding e54 -> (board -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))) to E
[DBG typing] TyVar g54, h54: adding g54 -> h54 to E
[DBG typing] TyVar g54, h54: --> h54 = c54 (lookup)
[DBG typing] TyVar h54, u53: --> u53 = c54 (lookup)
[DBG typing] TyVar u53, c54: adding u53 -> c54 to E
[DBG typing] TyVar e54, (board -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))): --> (board -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))) = (c54 -> d54) (lookup)
[DBG typing] Unifying arrows (array int -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))), (c54 -> d54) --> array int = c54, ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string))) = d54
[DBG typing] switching X, var: d54 = ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))
[DBG typing] switching X, var: c54 = array int
[DBG typing] TyVar d54, ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string))): adding d54 -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string))) to E
[DBG typing] TyVar c54, array int: adding c54 -> array int to E
[DBG typing] TyVar b54, w53: --> w53 = d54 (lookup)
[DBG typing] TyVar w53, string: --> string = d54 (lookup)
[DBG typing] switching X, var: d54 = string
[DBG typing] TyVar d54, ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string))): --> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string))) = string (lookup)
[DBG typing] Error ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string))) (((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))) vs string (string)
[INF typing] Constraints not unified.
[DBG typing] Unifying
               {(string -> unit) =Pervasives.print_string= a54;
                (board -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))) =unparse= f54;
                s53 =35,4-41= t53; h54 =35,14-15= u53; l54 =35,14-41= i54;
                l54 =35,14-41= v53; k54 =35,14-41= j54; k54 =35,14-41= u53;
                t53 =35,14-41= (k54 -> l54); a54 =35,18-30= y53;
                b54 =35,30-41= w53; y53 =35,30-41= (w53 -> x53);
                v53 =35,30-41= x53; f54 =35,31-38= e54; g54 =35,39-40= h54;
                g54 =35,39-40= c54; e54 =35,39-40= (c54 -> d54);
                b54 =35,39-40= d54; }
[DBG typing] switching X, var: a54 = (string -> unit)
[DBG typing] TyVar a54, (string -> unit): adding a54 -> (string -> unit) to E
[DBG typing] switching X, var: f54 = (board -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string))))
[DBG typing] TyVar f54, (array int -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))): adding f54 -> (board -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))) to E
[DBG typing] TyVar s53, t53: adding s53 -> t53 to E
[DBG typing] TyVar h54, u53: adding h54 -> u53 to E
[DBG typing] TyVar l54, i54: adding l54 -> i54 to E
[DBG typing] TyVar l54, i54: --> i54 = v53 (lookup)
[DBG typing] TyVar k54, j54: adding k54 -> j54 to E
[DBG typing] TyVar k54, j54: --> j54 = u53 (lookup)
[DBG typing] TyVar j54, u53: adding j54 -> u53 to E
[DBG typing] TyVar i54, v53: adding i54 -> v53 to E
[DBG typing] TyVar t53, (k54 -> l54): adding t53 -> (k54 -> l54) to E
[DBG typing] TyVar a54, (string -> unit): --> (string -> unit) = y53 (lookup)
[DBG typing] switching X, var: y53 = (string -> unit)
[DBG typing] TyVar y53, (string -> unit): adding y53 -> (string -> unit) to E
[DBG typing] TyVar b54, w53: adding b54 -> w53 to E
[DBG typing] TyVar y53, (string -> unit): --> (string -> unit) = (w53 -> x53) (lookup)
[DBG typing] Unifying arrows (string -> unit), (w53 -> x53) --> string = w53, unit = x53
[DBG typing] switching X, var: w53 = string
[DBG typing] switching X, var: x53 = unit
[DBG typing] TyVar x53, unit: adding x53 -> unit to E
[DBG typing] TyVar w53, string: adding w53 -> string to E
[DBG typing] TyVar v53, x53: adding v53 -> x53 to E
[DBG typing] TyVar f54, (board -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))): --> (board -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))) = e54 (lookup)
[DBG typing] switching X, var: e54 = (board -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string))))
[DBG typing] TyVar e54, (array int -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))): adding e54 -> (board -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))) to E
[DBG typing] TyVar g54, h54: adding g54 -> h54 to E
[DBG typing] TyVar g54, h54: --> h54 = c54 (lookup)
[DBG typing] TyVar h54, u53: --> u53 = c54 (lookup)
[DBG typing] TyVar u53, c54: adding u53 -> c54 to E
[DBG typing] TyVar e54, (board -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))): --> (board -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))) = (c54 -> d54) (lookup)
[DBG typing] Unifying arrows (array int -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))), (c54 -> d54) --> array int = c54, ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string))) = d54
[DBG typing] switching X, var: d54 = ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))
[DBG typing] switching X, var: c54 = array int
[DBG typing] TyVar d54, ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string))): adding d54 -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string))) to E
[DBG typing] TyVar c54, array int: adding c54 -> array int to E
[DBG typing] TyVar b54, w53: --> w53 = d54 (lookup)
[DBG typing] TyVar w53, string: --> string = d54 (lookup)
[DBG typing] switching X, var: d54 = string
[DBG typing] TyVar d54, ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string))): --> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string))) = string (lookup)
[DBG typing] Error ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string))) (((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))) vs string (string)
[DBG typing] minimize_full 35,39-40 /
             {Pervasives.print_string; unparse; 35,18-30; 35,30-41; 35,31-38;
              35,39-40; } /
             {(string -> unit) =Pervasives.print_string= a54;
              (board -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))) =unparse= f54;
              s53 =35,4-41= t53; h54 =35,14-15= u53; l54 =35,14-41= i54;
              l54 =35,14-41= v53; k54 =35,14-41= j54; k54 =35,14-41= u53;
              t53 =35,14-41= (k54 -> l54); a54 =35,18-30= y53;
              b54 =35,30-41= w53; y53 =35,30-41= (w53 -> x53);
              v53 =35,30-41= x53; f54 =35,31-38= e54; g54 =35,39-40= h54;
              g54 =35,39-40= c54; e54 =35,39-40= (c54 -> d54);
              b54 =35,39-40= d54; }
[DBG typing] Unifying
               {g54 =35,39-40= h54; g54 =35,39-40= c54;
                e54 =35,39-40= (c54 -> d54); b54 =35,39-40= d54; }
[DBG typing] TyVar g54, h54: adding g54 -> h54 to E
[DBG typing] TyVar g54, h54: --> h54 = c54 (lookup)
[DBG typing] TyVar h54, c54: adding h54 -> c54 to E
[DBG typing] TyVar e54, (c54 -> d54): adding e54 -> (c54 -> d54) to E
[DBG typing] TyVar b54, d54: adding b54 -> d54 to E
[DBG typing] Unifying
               {(string -> unit) =Pervasives.print_string= a54;
                (board -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))) =unparse= f54;
                a54 =35,18-30= y53; d54 =35,30-41= w53;
                y53 =35,30-41= (w53 -> x53); v53 =35,30-41= x53;
                f54 =35,31-38= (c54 -> d54); }
[DBG typing] switching X, var: a54 = (string -> unit)
[DBG typing] TyVar a54, (string -> unit): adding a54 -> (string -> unit) to E
[DBG typing] switching X, var: f54 = (board -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string))))
[DBG typing] TyVar f54, (array int -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))): adding f54 -> (board -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))) to E
[DBG typing] TyVar a54, (string -> unit): --> (string -> unit) = y53 (lookup)
[DBG typing] switching X, var: y53 = (string -> unit)
[DBG typing] TyVar y53, (string -> unit): adding y53 -> (string -> unit) to E
[DBG typing] TyVar d54, w53: adding d54 -> w53 to E
[DBG typing] TyVar y53, (string -> unit): --> (string -> unit) = (w53 -> x53) (lookup)
[DBG typing] Unifying arrows (string -> unit), (w53 -> x53) --> string = w53, unit = x53
[DBG typing] switching X, var: w53 = string
[DBG typing] switching X, var: x53 = unit
[DBG typing] TyVar x53, unit: adding x53 -> unit to E
[DBG typing] TyVar w53, string: adding w53 -> string to E
[DBG typing] TyVar v53, x53: adding v53 -> x53 to E
[DBG typing] TyVar f54, (board -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))): --> (board -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))) = (c54 -> d54) (lookup)
[DBG typing] Unifying arrows (array int -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))), (c54 -> d54) --> array int = c54, ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string))) = d54
[DBG typing] switching X, var: d54 = ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))
[DBG typing] switching X, var: c54 = array int
[DBG typing] TyVar d54, w53: --> w53 = ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string))) (lookup)
[DBG typing] TyVar w53, string: --> string = ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string))) (lookup)
[DBG typing] Error string (string) vs ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string))) (((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string))))
[DBG typing] minimize_full 35,31-38 /
             {Pervasives.print_string; unparse; 35,18-30; 35,30-41; 35,31-38;
              } /
             {(string -> unit) =Pervasives.print_string= a54;
              (board -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))) =unparse= f54;
              s53 =35,4-41= t53; h54 =35,14-15= u53; l54 =35,14-41= i54;
              l54 =35,14-41= v53; k54 =35,14-41= j54; k54 =35,14-41= u53;
              t53 =35,14-41= (k54 -> l54); a54 =35,18-30= y53;
              b54 =35,30-41= w53; y53 =35,30-41= (w53 -> x53);
              v53 =35,30-41= x53; f54 =35,31-38= e54; g54 =35,39-40= h54;
              g54 =35,39-40= c54; e54 =35,39-40= (c54 -> d54);
              b54 =35,39-40= d54; }
[DBG typing] Unifying {f54 =35,31-38= (c54 -> d54); }
[DBG typing] TyVar f54, (c54 -> d54): adding f54 -> (c54 -> d54) to E
[DBG typing] Unifying
               {(string -> unit) =Pervasives.print_string= a54;
                (board -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))) =unparse= (c54 -> d54);
                a54 =35,18-30= y53; d54 =35,30-41= w53;
                y53 =35,30-41= (w53 -> x53); v53 =35,30-41= x53; }
[DBG typing] switching X, var: a54 = (string -> unit)
[DBG typing] TyVar a54, (string -> unit): adding a54 -> (string -> unit) to E
[DBG typing] Unifying arrows (array int -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))), (c54 -> d54) --> array int = c54, ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string))) = d54
[DBG typing] switching X, var: d54 = ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))
[DBG typing] switching X, var: c54 = array int
[DBG typing] TyVar d54, ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string))): adding d54 -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string))) to E
[DBG typing] TyVar c54, array int: adding c54 -> array int to E
[DBG typing] TyVar a54, (string -> unit): --> (string -> unit) = y53 (lookup)
[DBG typing] switching X, var: y53 = (string -> unit)
[DBG typing] TyVar y53, (string -> unit): adding y53 -> (string -> unit) to E
[DBG typing] TyVar d54, ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string))): --> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string))) = w53 (lookup)
[DBG typing] switching X, var: w53 = ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))
[DBG typing] TyVar w53, ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string))): adding w53 -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string))) to E
[DBG typing] TyVar y53, (string -> unit): --> (string -> unit) = (w53 -> x53) (lookup)
[DBG typing] Unifying arrows (string -> unit), (w53 -> x53) --> string = w53, unit = x53
[DBG typing] switching X, var: w53 = string
[DBG typing] switching X, var: x53 = unit
[DBG typing] TyVar x53, unit: adding x53 -> unit to E
[DBG typing] TyVar w53, ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string))): --> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string))) = string (lookup)
[DBG typing] Error ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string))) (((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))) vs string (string)
[DBG typing] minimize_full 35,30-41 /
             {Pervasives.print_string; unparse; 35,18-30; 35,30-41; } /
             {(string -> unit) =Pervasives.print_string= a54;
              (board -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))) =unparse= f54;
              s53 =35,4-41= t53; h54 =35,14-15= u53; l54 =35,14-41= i54;
              l54 =35,14-41= v53; k54 =35,14-41= j54; k54 =35,14-41= u53;
              t53 =35,14-41= (k54 -> l54); a54 =35,18-30= y53;
              b54 =35,30-41= w53; y53 =35,30-41= (w53 -> x53);
              v53 =35,30-41= x53; f54 =35,31-38= e54; g54 =35,39-40= h54;
              g54 =35,39-40= c54; e54 =35,39-40= (c54 -> d54);
              b54 =35,39-40= d54; }
[DBG typing] Unifying
               {d54 =35,30-41= w53; y53 =35,30-41= (w53 -> x53);
                v53 =35,30-41= x53; }
[DBG typing] TyVar d54, w53: adding d54 -> w53 to E
[DBG typing] TyVar y53, (w53 -> x53): adding y53 -> (w53 -> x53) to E
[DBG typing] TyVar v53, x53: adding v53 -> x53 to E
[DBG typing] Unifying
               {(string -> unit) =Pervasives.print_string= a54;
                (board -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))) =unparse= (c54 -> w53);
                a54 =35,18-30= (w53 -> x53); }
[DBG typing] switching X, var: a54 = (string -> unit)
[DBG typing] TyVar a54, (string -> unit): adding a54 -> (string -> unit) to E
[DBG typing] Unifying arrows (array int -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))), (c54 -> w53) --> array int = c54, ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string))) = w53
[DBG typing] switching X, var: w53 = ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))
[DBG typing] switching X, var: c54 = array int
[DBG typing] TyVar c54, array int: adding c54 -> array int to E
[DBG typing] TyVar w53, ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string))): adding w53 -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string))) to E
[DBG typing] TyVar a54, (string -> unit): --> (string -> unit) = (w53 -> x53) (lookup)
[DBG typing] Unifying arrows (string -> unit), (w53 -> x53) --> string = w53, unit = x53
[DBG typing] switching X, var: w53 = string
[DBG typing] switching X, var: x53 = unit
[DBG typing] TyVar x53, unit: adding x53 -> unit to E
[DBG typing] TyVar w53, ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string))): --> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string))) = string (lookup)
[DBG typing] Error ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string))) (((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))) vs string (string)
[DBG typing] minimize_full 35,18-30 /
             {Pervasives.print_string; unparse; 35,18-30; } /
             {(string -> unit) =Pervasives.print_string= a54;
              (board -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))) =unparse= f54;
              s53 =35,4-41= t53; h54 =35,14-15= u53; l54 =35,14-41= i54;
              l54 =35,14-41= v53; k54 =35,14-41= j54; k54 =35,14-41= u53;
              t53 =35,14-41= (k54 -> l54); a54 =35,18-30= y53;
              b54 =35,30-41= w53; y53 =35,30-41= (w53 -> x53);
              v53 =35,30-41= x53; f54 =35,31-38= e54; g54 =35,39-40= h54;
              g54 =35,39-40= c54; e54 =35,39-40= (c54 -> d54);
              b54 =35,39-40= d54; }
[DBG typing] Unifying {a54 =35,18-30= (w53 -> x53); }
[DBG typing] TyVar a54, (w53 -> x53): adding a54 -> (w53 -> x53) to E
[DBG typing] Unifying
               {(string -> unit) =Pervasives.print_string= (w53 -> x53);
                (board -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))) =unparse= (c54 -> w53);
                }
[DBG typing] Unifying arrows (string -> unit), (w53 -> x53) --> string = w53, unit = x53
[DBG typing] switching X, var: w53 = string
[DBG typing] switching X, var: x53 = unit
[DBG typing] TyVar x53, unit: adding x53 -> unit to E
[DBG typing] TyVar w53, string: adding w53 -> string to E
[DBG typing] Unifying arrows (array int -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))), (c54 -> w53) --> array int = c54, ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string))) = w53
[DBG typing] switching X, var: w53 = ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))
[DBG typing] switching X, var: c54 = array int
[DBG typing] TyVar c54, array int: adding c54 -> array int to E
[DBG typing] TyVar w53, string: --> string = ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string))) (lookup)
[DBG typing] Error string (string) vs ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string))) (((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string))))
[DBG typing] minimize_full unparse / {Pervasives.print_string; unparse; } /
             {(string -> unit) =Pervasives.print_string= a54;
              (board -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))) =unparse= f54;
              s53 =35,4-41= t53; h54 =35,14-15= u53; l54 =35,14-41= i54;
              l54 =35,14-41= v53; k54 =35,14-41= j54; k54 =35,14-41= u53;
              t53 =35,14-41= (k54 -> l54); a54 =35,18-30= y53;
              b54 =35,30-41= w53; y53 =35,30-41= (w53 -> x53);
              v53 =35,30-41= x53; f54 =35,31-38= e54; g54 =35,39-40= h54;
              g54 =35,39-40= c54; e54 =35,39-40= (c54 -> d54);
              b54 =35,39-40= d54; }
[DBG typing] Unifying
               {(board -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))) =unparse= (c54 -> w53);
                }
[DBG typing] Unifying arrows (array int -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))), (c54 -> w53) --> array int = c54, ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string))) = w53
[DBG typing] switching X, var: w53 = ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))
[DBG typing] switching X, var: c54 = array int
[DBG typing] TyVar c54, array int: adding c54 -> array int to E
[DBG typing] TyVar w53, ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string))): adding w53 -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string))) to E
[DBG typing] Unifying
               {(string -> unit) =Pervasives.print_string= (((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string))) -> x53);
                }
[DBG typing] Unifying arrows (string -> unit), (((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string))) -> x53) --> string = ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string))), unit = x53
[DBG typing] Error string (string) vs ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string))) (((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string))))
[DBG typing] minimize_full Pervasives.print_string /
             {Pervasives.print_string; } /
             {(string -> unit) =Pervasives.print_string= a54;
              (board -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))) =unparse= f54;
              s53 =35,4-41= t53; h54 =35,14-15= u53; l54 =35,14-41= i54;
              l54 =35,14-41= v53; k54 =35,14-41= j54; k54 =35,14-41= u53;
              t53 =35,14-41= (k54 -> l54); a54 =35,18-30= y53;
              b54 =35,30-41= w53; y53 =35,30-41= (w53 -> x53);
              v53 =35,30-41= x53; f54 =35,31-38= e54; g54 =35,39-40= h54;
              g54 =35,39-40= c54; e54 =35,39-40= (c54 -> d54);
              b54 =35,39-40= d54; }
[DBG typing] Unifying
               {(string -> unit) =Pervasives.print_string= (((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string))) -> x53);
                }
[DBG typing] Unifying arrows (string -> unit), (((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string))) -> x53) --> string = ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string))), unit = x53
[DBG typing] Error string (string) vs ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string))) (((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string))))
[DBG typing] Unifying
               {(board -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))) =unparse= f54;
                s53 =35,4-41= t53; h54 =35,14-15= u53; l54 =35,14-41= i54;
                l54 =35,14-41= v53; k54 =35,14-41= j54; k54 =35,14-41= u53;
                t53 =35,14-41= (k54 -> l54); a54 =35,18-30= y53;
                b54 =35,30-41= w53; y53 =35,30-41= (w53 -> x53);
                v53 =35,30-41= x53; f54 =35,31-38= e54; g54 =35,39-40= h54;
                g54 =35,39-40= c54; e54 =35,39-40= (c54 -> d54);
                b54 =35,39-40= d54; }
[DBG typing] switching X, var: f54 = (board -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string))))
[DBG typing] TyVar f54, (array int -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))): adding f54 -> (board -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))) to E
[DBG typing] TyVar s53, t53: adding s53 -> t53 to E
[DBG typing] TyVar h54, u53: adding h54 -> u53 to E
[DBG typing] TyVar l54, i54: adding l54 -> i54 to E
[DBG typing] TyVar l54, i54: --> i54 = v53 (lookup)
[DBG typing] TyVar k54, j54: adding k54 -> j54 to E
[DBG typing] TyVar k54, j54: --> j54 = u53 (lookup)
[DBG typing] TyVar j54, u53: adding j54 -> u53 to E
[DBG typing] TyVar i54, v53: adding i54 -> v53 to E
[DBG typing] TyVar t53, (k54 -> l54): adding t53 -> (k54 -> l54) to E
[DBG typing] TyVar a54, y53: adding a54 -> y53 to E
[DBG typing] TyVar b54, w53: adding b54 -> w53 to E
[DBG typing] TyVar y53, (w53 -> x53): adding y53 -> (w53 -> x53) to E
[DBG typing] TyVar v53, x53: adding v53 -> x53 to E
[DBG typing] TyVar f54, (board -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))): --> (board -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))) = e54 (lookup)
[DBG typing] switching X, var: e54 = (board -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string))))
[DBG typing] TyVar e54, (array int -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))): adding e54 -> (board -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))) to E
[DBG typing] TyVar g54, h54: adding g54 -> h54 to E
[DBG typing] TyVar g54, h54: --> h54 = c54 (lookup)
[DBG typing] TyVar h54, u53: --> u53 = c54 (lookup)
[DBG typing] TyVar u53, c54: adding u53 -> c54 to E
[DBG typing] TyVar e54, (board -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))): --> (board -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))) = (c54 -> d54) (lookup)
[DBG typing] Unifying arrows (array int -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))), (c54 -> d54) --> array int = c54, ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string))) = d54
[DBG typing] switching X, var: d54 = ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))
[DBG typing] switching X, var: c54 = array int
[DBG typing] TyVar d54, ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string))): adding d54 -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string))) to E
[DBG typing] TyVar c54, array int: adding c54 -> array int to E
[DBG typing] TyVar b54, w53: --> w53 = d54 (lookup)
[DBG typing] TyVar w53, d54: adding w53 -> d54 to E
[DBG typing] Unifying
               {(string -> unit) =Pervasives.print_string= a54;
                s53 =35,4-41= t53; h54 =35,14-15= u53; l54 =35,14-41= i54;
                l54 =35,14-41= v53; k54 =35,14-41= j54; k54 =35,14-41= u53;
                t53 =35,14-41= (k54 -> l54); a54 =35,18-30= y53;
                b54 =35,30-41= w53; y53 =35,30-41= (w53 -> x53);
                v53 =35,30-41= x53; f54 =35,31-38= e54; g54 =35,39-40= h54;
                g54 =35,39-40= c54; e54 =35,39-40= (c54 -> d54);
                b54 =35,39-40= d54; }
[DBG typing] switching X, var: a54 = (string -> unit)
[DBG typing] TyVar a54, (string -> unit): adding a54 -> (string -> unit) to E
[DBG typing] TyVar s53, t53: adding s53 -> t53 to E
[DBG typing] TyVar h54, u53: adding h54 -> u53 to E
[DBG typing] TyVar l54, i54: adding l54 -> i54 to E
[DBG typing] TyVar l54, i54: --> i54 = v53 (lookup)
[DBG typing] TyVar k54, j54: adding k54 -> j54 to E
[DBG typing] TyVar k54, j54: --> j54 = u53 (lookup)
[DBG typing] TyVar j54, u53: adding j54 -> u53 to E
[DBG typing] TyVar i54, v53: adding i54 -> v53 to E
[DBG typing] TyVar t53, (k54 -> l54): adding t53 -> (k54 -> l54) to E
[DBG typing] TyVar a54, (string -> unit): --> (string -> unit) = y53 (lookup)
[DBG typing] switching X, var: y53 = (string -> unit)
[DBG typing] TyVar y53, (string -> unit): adding y53 -> (string -> unit) to E
[DBG typing] TyVar b54, w53: adding b54 -> w53 to E
[DBG typing] TyVar y53, (string -> unit): --> (string -> unit) = (w53 -> x53) (lookup)
[DBG typing] Unifying arrows (string -> unit), (w53 -> x53) --> string = w53, unit = x53
[DBG typing] switching X, var: w53 = string
[DBG typing] switching X, var: x53 = unit
[DBG typing] TyVar x53, unit: adding x53 -> unit to E
[DBG typing] TyVar w53, string: adding w53 -> string to E
[DBG typing] TyVar v53, x53: adding v53 -> x53 to E
[DBG typing] TyVar f54, e54: adding f54 -> e54 to E
[DBG typing] TyVar g54, h54: adding g54 -> h54 to E
[DBG typing] TyVar g54, h54: --> h54 = c54 (lookup)
[DBG typing] TyVar h54, u53: --> u53 = c54 (lookup)
[DBG typing] TyVar u53, c54: adding u53 -> c54 to E
[DBG typing] TyVar e54, (c54 -> d54): adding e54 -> (c54 -> d54) to E
[DBG typing] TyVar b54, w53: --> w53 = d54 (lookup)
[DBG typing] TyVar w53, string: --> string = d54 (lookup)
[DBG typing] switching X, var: d54 = string
[DBG typing] TyVar d54, string: adding d54 -> string to E
[DBG typing] Unifying
               {(string -> unit) =Pervasives.print_string= a54;
                (board -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))) =unparse= f54;
                s53 =35,4-41= t53; h54 =35,14-15= u53; l54 =35,14-41= i54;
                l54 =35,14-41= v53; k54 =35,14-41= j54; k54 =35,14-41= u53;
                t53 =35,14-41= (k54 -> l54); b54 =35,30-41= w53;
                y53 =35,30-41= (w53 -> x53); v53 =35,30-41= x53;
                f54 =35,31-38= e54; g54 =35,39-40= h54; g54 =35,39-40= c54;
                e54 =35,39-40= (c54 -> d54); b54 =35,39-40= d54; }
[DBG typing] switching X, var: a54 = (string -> unit)
[DBG typing] TyVar a54, (string -> unit): adding a54 -> (string -> unit) to E
[DBG typing] switching X, var: f54 = (board -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string))))
[DBG typing] TyVar f54, (array int -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))): adding f54 -> (board -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))) to E
[DBG typing] TyVar s53, t53: adding s53 -> t53 to E
[DBG typing] TyVar h54, u53: adding h54 -> u53 to E
[DBG typing] TyVar l54, i54: adding l54 -> i54 to E
[DBG typing] TyVar l54, i54: --> i54 = v53 (lookup)
[DBG typing] TyVar k54, j54: adding k54 -> j54 to E
[DBG typing] TyVar k54, j54: --> j54 = u53 (lookup)
[DBG typing] TyVar j54, u53: adding j54 -> u53 to E
[DBG typing] TyVar i54, v53: adding i54 -> v53 to E
[DBG typing] TyVar t53, (k54 -> l54): adding t53 -> (k54 -> l54) to E
[DBG typing] TyVar b54, w53: adding b54 -> w53 to E
[DBG typing] TyVar y53, (w53 -> x53): adding y53 -> (w53 -> x53) to E
[DBG typing] TyVar v53, x53: adding v53 -> x53 to E
[DBG typing] TyVar f54, (board -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))): --> (board -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))) = e54 (lookup)
[DBG typing] switching X, var: e54 = (board -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string))))
[DBG typing] TyVar e54, (array int -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))): adding e54 -> (board -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))) to E
[DBG typing] TyVar g54, h54: adding g54 -> h54 to E
[DBG typing] TyVar g54, h54: --> h54 = c54 (lookup)
[DBG typing] TyVar h54, u53: --> u53 = c54 (lookup)
[DBG typing] TyVar u53, c54: adding u53 -> c54 to E
[DBG typing] TyVar e54, (board -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))): --> (board -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))) = (c54 -> d54) (lookup)
[DBG typing] Unifying arrows (array int -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))), (c54 -> d54) --> array int = c54, ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string))) = d54
[DBG typing] switching X, var: d54 = ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))
[DBG typing] switching X, var: c54 = array int
[DBG typing] TyVar d54, ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string))): adding d54 -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string))) to E
[DBG typing] TyVar c54, array int: adding c54 -> array int to E
[DBG typing] TyVar b54, w53: --> w53 = d54 (lookup)
[DBG typing] TyVar w53, d54: adding w53 -> d54 to E
[DBG typing] Unifying
               {(string -> unit) =Pervasives.print_string= a54;
                (board -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))) =unparse= f54;
                s53 =35,4-41= t53; h54 =35,14-15= u53; l54 =35,14-41= i54;
                l54 =35,14-41= v53; k54 =35,14-41= j54; k54 =35,14-41= u53;
                t53 =35,14-41= (k54 -> l54); a54 =35,18-30= y53;
                f54 =35,31-38= e54; g54 =35,39-40= h54; g54 =35,39-40= c54;
                e54 =35,39-40= (c54 -> d54); b54 =35,39-40= d54; }
[DBG typing] switching X, var: a54 = (string -> unit)
[DBG typing] TyVar a54, (string -> unit): adding a54 -> (string -> unit) to E
[DBG typing] switching X, var: f54 = (board -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string))))
[DBG typing] TyVar f54, (array int -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))): adding f54 -> (board -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))) to E
[DBG typing] TyVar s53, t53: adding s53 -> t53 to E
[DBG typing] TyVar h54, u53: adding h54 -> u53 to E
[DBG typing] TyVar l54, i54: adding l54 -> i54 to E
[DBG typing] TyVar l54, i54: --> i54 = v53 (lookup)
[DBG typing] TyVar k54, j54: adding k54 -> j54 to E
[DBG typing] TyVar k54, j54: --> j54 = u53 (lookup)
[DBG typing] TyVar j54, u53: adding j54 -> u53 to E
[DBG typing] TyVar i54, v53: adding i54 -> v53 to E
[DBG typing] TyVar t53, (k54 -> l54): adding t53 -> (k54 -> l54) to E
[DBG typing] TyVar a54, (string -> unit): --> (string -> unit) = y53 (lookup)
[DBG typing] switching X, var: y53 = (string -> unit)
[DBG typing] TyVar y53, (string -> unit): adding y53 -> (string -> unit) to E
[DBG typing] TyVar f54, (board -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))): --> (board -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))) = e54 (lookup)
[DBG typing] switching X, var: e54 = (board -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string))))
[DBG typing] TyVar e54, (array int -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))): adding e54 -> (board -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))) to E
[DBG typing] TyVar g54, h54: adding g54 -> h54 to E
[DBG typing] TyVar g54, h54: --> h54 = c54 (lookup)
[DBG typing] TyVar h54, u53: --> u53 = c54 (lookup)
[DBG typing] TyVar u53, c54: adding u53 -> c54 to E
[DBG typing] TyVar e54, (board -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))): --> (board -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))) = (c54 -> d54) (lookup)
[DBG typing] Unifying arrows (array int -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))), (c54 -> d54) --> array int = c54, ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string))) = d54
[DBG typing] switching X, var: d54 = ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))
[DBG typing] switching X, var: c54 = array int
[DBG typing] TyVar d54, ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string))): adding d54 -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string))) to E
[DBG typing] TyVar c54, array int: adding c54 -> array int to E
[DBG typing] TyVar b54, d54: adding b54 -> d54 to E
[DBG typing] Unifying
               {(string -> unit) =Pervasives.print_string= a54;
                (board -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))) =unparse= f54;
                s53 =35,4-41= t53; h54 =35,14-15= u53; l54 =35,14-41= i54;
                l54 =35,14-41= v53; k54 =35,14-41= j54; k54 =35,14-41= u53;
                t53 =35,14-41= (k54 -> l54); a54 =35,18-30= y53;
                b54 =35,30-41= w53; y53 =35,30-41= (w53 -> x53);
                v53 =35,30-41= x53; g54 =35,39-40= h54; g54 =35,39-40= c54;
                e54 =35,39-40= (c54 -> d54); b54 =35,39-40= d54; }
[DBG typing] switching X, var: a54 = (string -> unit)
[DBG typing] TyVar a54, (string -> unit): adding a54 -> (string -> unit) to E
[DBG typing] switching X, var: f54 = (board -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string))))
[DBG typing] TyVar f54, (array int -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))): adding f54 -> (board -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))) to E
[DBG typing] TyVar s53, t53: adding s53 -> t53 to E
[DBG typing] TyVar h54, u53: adding h54 -> u53 to E
[DBG typing] TyVar l54, i54: adding l54 -> i54 to E
[DBG typing] TyVar l54, i54: --> i54 = v53 (lookup)
[DBG typing] TyVar k54, j54: adding k54 -> j54 to E
[DBG typing] TyVar k54, j54: --> j54 = u53 (lookup)
[DBG typing] TyVar j54, u53: adding j54 -> u53 to E
[DBG typing] TyVar i54, v53: adding i54 -> v53 to E
[DBG typing] TyVar t53, (k54 -> l54): adding t53 -> (k54 -> l54) to E
[DBG typing] TyVar a54, (string -> unit): --> (string -> unit) = y53 (lookup)
[DBG typing] switching X, var: y53 = (string -> unit)
[DBG typing] TyVar y53, (string -> unit): adding y53 -> (string -> unit) to E
[DBG typing] TyVar b54, w53: adding b54 -> w53 to E
[DBG typing] TyVar y53, (string -> unit): --> (string -> unit) = (w53 -> x53) (lookup)
[DBG typing] Unifying arrows (string -> unit), (w53 -> x53) --> string = w53, unit = x53
[DBG typing] switching X, var: w53 = string
[DBG typing] switching X, var: x53 = unit
[DBG typing] TyVar x53, unit: adding x53 -> unit to E
[DBG typing] TyVar w53, string: adding w53 -> string to E
[DBG typing] TyVar v53, x53: adding v53 -> x53 to E
[DBG typing] TyVar g54, h54: adding g54 -> h54 to E
[DBG typing] TyVar g54, h54: --> h54 = c54 (lookup)
[DBG typing] TyVar h54, u53: --> u53 = c54 (lookup)
[DBG typing] TyVar u53, c54: adding u53 -> c54 to E
[DBG typing] TyVar e54, (c54 -> d54): adding e54 -> (c54 -> d54) to E
[DBG typing] TyVar b54, w53: --> w53 = d54 (lookup)
[DBG typing] TyVar w53, string: --> string = d54 (lookup)
[DBG typing] switching X, var: d54 = string
[DBG typing] TyVar d54, string: adding d54 -> string to E
[DBG typing] Unifying
               {(string -> unit) =Pervasives.print_string= a54;
                (board -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))) =unparse= f54;
                s53 =35,4-41= t53; h54 =35,14-15= u53; l54 =35,14-41= i54;
                l54 =35,14-41= v53; k54 =35,14-41= j54; k54 =35,14-41= u53;
                t53 =35,14-41= (k54 -> l54); a54 =35,18-30= y53;
                b54 =35,30-41= w53; y53 =35,30-41= (w53 -> x53);
                v53 =35,30-41= x53; f54 =35,31-38= e54; }
[DBG typing] switching X, var: a54 = (string -> unit)
[DBG typing] TyVar a54, (string -> unit): adding a54 -> (string -> unit) to E
[DBG typing] switching X, var: f54 = (board -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string))))
[DBG typing] TyVar f54, (array int -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))): adding f54 -> (board -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))) to E
[DBG typing] TyVar s53, t53: adding s53 -> t53 to E
[DBG typing] TyVar h54, u53: adding h54 -> u53 to E
[DBG typing] TyVar l54, i54: adding l54 -> i54 to E
[DBG typing] TyVar l54, i54: --> i54 = v53 (lookup)
[DBG typing] TyVar k54, j54: adding k54 -> j54 to E
[DBG typing] TyVar k54, j54: --> j54 = u53 (lookup)
[DBG typing] TyVar j54, u53: adding j54 -> u53 to E
[DBG typing] TyVar i54, v53: adding i54 -> v53 to E
[DBG typing] TyVar t53, (k54 -> l54): adding t53 -> (k54 -> l54) to E
[DBG typing] TyVar a54, (string -> unit): --> (string -> unit) = y53 (lookup)
[DBG typing] switching X, var: y53 = (string -> unit)
[DBG typing] TyVar y53, (string -> unit): adding y53 -> (string -> unit) to E
[DBG typing] TyVar b54, w53: adding b54 -> w53 to E
[DBG typing] TyVar y53, (string -> unit): --> (string -> unit) = (w53 -> x53) (lookup)
[DBG typing] Unifying arrows (string -> unit), (w53 -> x53) --> string = w53, unit = x53
[DBG typing] switching X, var: w53 = string
[DBG typing] switching X, var: x53 = unit
[DBG typing] TyVar x53, unit: adding x53 -> unit to E
[DBG typing] TyVar w53, string: adding w53 -> string to E
[DBG typing] TyVar v53, x53: adding v53 -> x53 to E
[DBG typing] TyVar f54, (board -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))): --> (board -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))) = e54 (lookup)
[DBG typing] switching X, var: e54 = (board -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string))))
[DBG typing] TyVar e54, (array int -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))): adding e54 -> (board -> ((int -> ((int -> (string -> string)) -> (int -> (string -> string)))) -> (int -> (string -> string)))) to E
[INF typing] Constraints solved
