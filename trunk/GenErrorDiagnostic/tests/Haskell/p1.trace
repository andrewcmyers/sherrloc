rn12
rn13
Tc2 (src)
Tc3
Adding instances:
addFamInsts
env2 []
tcDeriving
tcDeriving False
tcDeriving 1 []
Adding instances:
Tc3b
tcAmpMissingParentClassWarn/isInsts []
tcAmpMissingParentClassWarn/isInsts []
tcAmpFunctionWarn/wouldBeImported
tcAmpFunctionWarn/amp_prelude_functions Control.Monad.join []
tcAmpFunctionWarn/wouldBeImported
tcAmpFunctionWarn/amp_prelude_functions Control.Applicative.<*> []
tcAmpFunctionWarn/wouldBeImported
tcAmpFunctionWarn/amp_prelude_functions Control.Applicative.pure []
Tc4
Tc4a
env2 []
Tc5
env2 []
------------------------------------------------
Bindings for { [foo]
Generalisation plan InferGen True True
tcMatchesFun
  foo
  t_ahL
tcGen
tcBody t_ahL
Non Application rule (+)
Instantiating
  + with [a_ahY]
         [Num a_ahY]
instCallConstraints [$dNum_ahZ]
utype_defer
  cobox_ai0
  a_ahY
  t_ahL
  a type equality a_ahY ~ t_ahL
  In the expression: 1 + True
  In an equation for ‘foo’: foo = 1 + True
tcPolyExprNC a_ahY
tcGen
Instantiating
  fromInteger with [a_ajW]
                   [Num a_ajW]
instCallConstraints [$dNum_ajX]
utype_defer
  cobox_ajY
  Integer -> a_ajW
  Integer -> a_ahY
  a type equality Integer -> a_ajW ~ Integer -> a_ahY
  In the first argument of ‘(+)’, namely ‘1’
  In the expression: 1 + True
  In an equation for ‘foo’: foo = 1 + True
tcPolyExprNC a_ahY
tcGen
utype_defer
  cobox_ajZ
  Bool
  a_ahY
  a type equality Bool ~ a_ahY
  In the second argument of ‘(+)’, namely ‘True’
  In the expression: 1 + True
simplifyInfer call
  [(foo, t_ahL)]
  WC {wc_flat = [W] $dNum_ahZ :: Num
                                   a_ahY [" a use of ‘+’ " p1.hs:3:9] (CNonCanonical)
                [W] cobox_ai0 :: a_ahY ~ t_ahL [" a type equality a_ahY
                                                                  ~
                                                                  t_ahL " p1.hs:3:7-14] (CNonCanonical)
                [W] $dNum_ajX :: Num
                                   a_ajW [" the literal ‘1’ " p1.hs:3:7] (CNonCanonical)
                [W] cobox_ajY :: (Integer -> a_ajW)
                                 ~ (Integer -> a_ahY) [" a type equality Integer -> a_ajW
                                                                         ~
                                                                         Integer
                                                                         -> a_ahY " p1.hs:3:7] (CNonCanonical)
                [W] cobox_ajZ :: Bool ~ a_ahY [" a type equality Bool
                                                                 ~
                                                                 a_ahY " p1.hs:3:11-14] (CNonCanonical)}
simplifyInfer {
  binds = [(foo, t_ahL)]
  closed = True
  apply_mr = True
  (unzonked) wanted = WC {wc_flat = [W] $dNum_ahZ :: Num
                                                       a_ahY [" a use of ‘+’ " p1.hs:3:9] (CNonCanonical)
                                    [W] cobox_ai0 :: a_ahY ~ t_ahL [" a type equality a_ahY
                                                                                      ~
                                                                                      t_ahL " p1.hs:3:7-14] (CNonCanonical)
                                    [W] $dNum_ajX :: Num
                                                       a_ajW [" the literal ‘1’ " p1.hs:3:7] (CNonCanonical)
                                    [W] cobox_ajY :: (Integer -> a_ajW)
                                                     ~ (Integer -> a_ahY) [" a type equality Integer
                                                                                             -> a_ajW
                                                                                             ~
                                                                                             Integer
                                                                                             -> a_ahY " p1.hs:3:7] (CNonCanonical)
                                    [W] cobox_ajZ :: Bool ~ a_ahY [" a type equality Bool
                                                                                     ~
                                                                                     a_ahY " p1.hs:3:11-14] (CNonCanonical)}
solveWantedsTcMWithEvBinds
  wanted= WC {wc_flat = [W] $dNum_ahZ :: Num
                                           a_ahY [" a use of ‘+’ " p1.hs:3:9] (CNonCanonical)
                        [W] cobox_ai0 :: a_ahY ~ t_ahL [" a type equality a_ahY
                                                                          ~
                                                                          t_ahL " p1.hs:3:7-14] (CNonCanonical)
                        [W] $dNum_ajX :: Num
                                           a_ajW [" the literal ‘1’ " p1.hs:3:7] (CNonCanonical)
                        [W] cobox_ajY :: (Integer -> a_ajW)
                                         ~ (Integer -> a_ahY) [" a type equality Integer -> a_ajW
                                                                                 ~
                                                                                 Integer
                                                                                 -> a_ahY " p1.hs:3:7] (CNonCanonical)
                        [W] cobox_ajZ :: Bool ~ a_ahY [" a type equality Bool
                                                                         ~
                                                                         a_ahY " p1.hs:3:11-14] (CNonCanonical)}
solveWanteds {
  WC {wc_flat = [W] $dNum_ahZ :: Num
                                   a_ahY [" a use of ‘+’ " p1.hs:3:9] (CNonCanonical)
                [W] cobox_ai0 :: a_ahY ~ t_ahL [" a type equality a_ahY
                                                                  ~
                                                                  t_ahL " p1.hs:3:7-14] (CNonCanonical)
                [W] $dNum_ajX :: Num
                                   a_ajW [" the literal ‘1’ " p1.hs:3:7] (CNonCanonical)
                [W] cobox_ajY :: (Integer -> a_ajW)
                                 ~ (Integer -> a_ahY) [" a type equality Integer -> a_ajW
                                                                         ~
                                                                         Integer
                                                                         -> a_ahY " p1.hs:3:7] (CNonCanonical)
                [W] cobox_ajZ :: Bool ~ a_ahY [" a type equality Bool
                                                                 ~
                                                                 a_ahY " p1.hs:3:11-14] (CNonCanonical)}
solveFlats {
Start solver pipeline {
  work item =  [W] cobox_ai0 :: a_ahY
                                ~ t_ahL [" a type equality a_ahY
                                                           ~
                                                           t_ahL " p1.hs:3:7-14] (CNonCanonical)
  inerts    =  Equalities:
               Type-function equalities:
               No-eqs: True
               Dictionaries:
               Irreds:
               Insolubles = {}
               Solved dicts 0
               Solved funeqs 0
runStage canonicalization {
  workitem   =  [W] cobox_ai0 :: a_ahY
                                 ~ t_ahL [" a type equality a_ahY
                                                            ~
                                                            t_ahL " p1.hs:3:7-14] (CNonCanonical)
canonicalize (non-canonical)
  [W] cobox_ai0 :: a_ahY ~ t_ahL [" a type equality a_ahY
                                                    ~
                                                    t_ahL " p1.hs:3:7-14] (CNonCanonical)
canEvNC:eq
  a_ahY
  t_ahL
can_eq_nc
  [W] cobox_ai0 :: a_ahY ~ t_ahL
  a_ahY
  a_ahY
  t_ahL
  t_ahL
canEqTyVar
  a_ahY
  t_ahL
  Not-swapped
newWantedEvVar/cache miss [W] cobox_ak1 :: t_ahL ~ a_ahY
setEvBind
  ev = cobox_ai0
  tm  = CO Sym cobox_ak1
rewriteEqEvidence
  [W] cobox_ai0 :: a_ahY ~ t_ahL
  t_ahL
  a_ahY
  Sym cobox_ak1
end stage canonicalization }
runStage interact with inerts {
  workitem   =  [W] cobox_ak1 :: t_ahL
                                 ~ a_ahY [" a type equality a_ahY ~ t_ahL " p1.hs:3:7-14] (CTyEqCan)
Sneaky unification:
  Unifies: t_ahL := a_ahY
  Coercion: t_ahL ~ a_ahY
  Left Kind is: OpenKind
  Right Kind is: *
setWantedTyBind t_ahL := a_ahY
setEvBind
  ev = cobox_ak1
  tm  = CO <a_ahY>_N
kickOutRewritable
  tv =  t_ahL
  Kicked out = WorkList (eqs)   =  []
               WorkList (funeqs)=  []
               WorkList (rest)  =  []
1[<C:0,F:0>] [W] cobox_ak1 :: t_ahL ~ a_ahY: Spontaneously solved
end stage interact with inerts }
End solver pipeline (discharged) }
  inerts    =  Equalities:
               Type-function equalities:
               No-eqs: True
               Dictionaries:
               Irreds:
               Insolubles = {}
               Solved dicts 0
               Solved funeqs 0
Start solver pipeline {
  work item =  [W] cobox_ajY :: (Integer -> a_ajW)
                                ~ (Integer -> a_ahY) [" a type equality Integer -> a_ajW
                                                                        ~
                                                                        Integer
                                                                        -> a_ahY " p1.hs:3:7] (CNonCanonical)
  inerts    =  Equalities:
               Type-function equalities:
               No-eqs: True
               Dictionaries:
               Irreds:
               Insolubles = {}
               Solved dicts 0
               Solved funeqs 0
runStage canonicalization {
  workitem   =  [W] cobox_ajY :: (Integer -> a_ajW)
                                 ~ (Integer -> a_ahY) [" a type equality Integer -> a_ajW
                                                                         ~
                                                                         Integer
                                                                         -> a_ahY " p1.hs:3:7] (CNonCanonical)
canonicalize (non-canonical)
  [W] cobox_ajY :: (Integer -> a_ajW)
                   ~ (Integer -> a_ahY) [" a type equality Integer -> a_ajW
                                                           ~
                                                           Integer
                                                           -> a_ahY " p1.hs:3:7] (CNonCanonical)
canEvNC:eq
  Integer -> a_ajW
  Integer -> a_ahY
can_eq_nc
  [W] cobox_ajY :: (Integer -> a_ajW) ~ (Integer -> a_ahY)
  Integer -> a_ajW
  Integer -> a_ajW
  Integer -> a_ahY
  Integer -> a_ahY
newWantedEvVar/cache miss [W] cobox_ak2 :: Integer ~ Integer
newWantedEvVar/cache miss [W] cobox_ak3 :: a_ajW ~ a_ahY
setEvBind
  ev = cobox_ajY
  tm  = CO cobox_ak2 -> cobox_ak3
canEvNC:eq
  Integer
  Integer
can_eq_nc
  [W] cobox_ak2 :: Integer ~ Integer
  Integer
  Integer
  Integer
  Integer
setEvBind
  ev = cobox_ak2
  tm  = CO <Integer>_N
end stage canonicalization }
End solver pipeline (discharged) }
  inerts    =  Equalities:
               Type-function equalities:
               No-eqs: True
               Dictionaries:
               Irreds:
               Insolubles = {}
               Solved dicts 0
               Solved funeqs 0
Start solver pipeline {
  work item =  [W] cobox_ak3 :: a_ajW
                                ~ a_ahY [" a type equality Integer -> a_ajW
                                                           ~
                                                           Integer
                                                           -> a_ahY " p1.hs:3:7] (CNonCanonical)
  inerts    =  Equalities:
               Type-function equalities:
               No-eqs: True
               Dictionaries:
               Irreds:
               Insolubles = {}
               Solved dicts 0
               Solved funeqs 0
runStage canonicalization {
  workitem   =  [W] cobox_ak3 :: a_ajW
                                 ~ a_ahY [" a type equality Integer -> a_ajW
                                                            ~
                                                            Integer
                                                            -> a_ahY " p1.hs:3:7] (CNonCanonical)
canonicalize (non-canonical)
  [W] cobox_ak3 :: a_ajW ~ a_ahY [" a type equality Integer -> a_ajW
                                                    ~
                                                    Integer -> a_ahY " p1.hs:3:7] (CNonCanonical)
canEvNC:eq
  a_ajW
  a_ahY
can_eq_nc
  [W] cobox_ak3 :: a_ajW ~ a_ahY
  a_ajW
  a_ajW
  a_ahY
  a_ahY
canEqTyVar
  a_ajW
  a_ahY
  Not-swapped
end stage canonicalization }
runStage interact with inerts {
  workitem   =  [W] cobox_ak3 :: a_ajW
                                 ~ a_ahY [" a type equality Integer -> a_ajW
                                                            ~
                                                            Integer -> a_ahY " p1.hs:3:7] (CTyEqCan)
Sneaky unification:
  Unifies: a_ahY := a_ajW
  Coercion: a_ahY ~ a_ajW
  Left Kind is: *
  Right Kind is: *
setWantedTyBind a_ahY := a_ajW
setEvBind
  ev = cobox_ak3
  tm  = CO <a_ajW>_N
kickOutRewritable
  tv =  a_ahY
  Kicked out = WorkList (eqs)   =  []
               WorkList (funeqs)=  []
               WorkList (rest)  =  []
3[<C:0,F:0>] [W] cobox_ak3 :: a_ajW ~ a_ahY: Spontaneously solved
end stage interact with inerts }
End solver pipeline (discharged) }
  inerts    =  Equalities:
               Type-function equalities:
               No-eqs: True
               Dictionaries:
               Irreds:
               Insolubles = {}
               Solved dicts 0
               Solved funeqs 0
Start solver pipeline {
  work item =  [W] cobox_ajZ :: Bool ~ a_ahY [" a type equality Bool
                                                                ~
                                                                a_ahY " p1.hs:3:11-14] (CNonCanonical)
  inerts    =  Equalities:
               Type-function equalities:
               No-eqs: True
               Dictionaries:
               Irreds:
               Insolubles = {}
               Solved dicts 0
               Solved funeqs 0
runStage canonicalization {
  workitem   =  [W] cobox_ajZ :: Bool ~ a_ahY [" a type equality Bool
                                                                 ~
                                                                 a_ahY " p1.hs:3:11-14] (CNonCanonical)
canonicalize (non-canonical)
  [W] cobox_ajZ :: Bool ~ a_ahY [" a type equality Bool
                                                   ~
                                                   a_ahY " p1.hs:3:11-14] (CNonCanonical)
canEvNC:eq
  Bool
  a_ahY
can_eq_nc
  [W] cobox_ajZ :: Bool ~ a_ahY
  Bool
  Bool
  a_ahY
  a_ahY
canEqTyVar
  a_ahY
  Bool
  Is-swapped
Following bound tyvar a_ahY = a_ajW
newWantedEvVar/cache miss [W] cobox_ak4 :: a_ajW ~ Bool
setEvBind
  ev = cobox_ajZ
  tm  = CO Sym cobox_ak4
rewriteEqEvidence
  [W] cobox_ajZ :: Bool ~ a_ahY
  a_ajW
  Bool
  Sym cobox_ak4
canEqTyVar2
  a_ahY
  Bool
  Is-swapped
  a_ajW
  <a_ajW>_N
can_eq_nc
  [W] cobox_ak4 :: a_ajW ~ Bool
  a_ajW
  a_ajW
  Bool
  Bool
canEqTyVar
  a_ajW
  Bool
  Not-swapped
end stage canonicalization }
runStage interact with inerts {
  workitem   =  [W] cobox_ak4 :: a_ajW ~ Bool [" a type equality Bool
                                                                 ~
                                                                 a_ahY " p1.hs:3:11-14] (CTyEqCan)
Sneaky unification:
  Unifies: a_ajW := Bool
  Coercion: a_ajW ~ Bool
  Left Kind is: *
  Right Kind is: *
setWantedTyBind a_ajW := Bool
setEvBind
  ev = cobox_ak4
  tm  = CO <Bool>_N
kickOutRewritable
  tv =  a_ajW
  Kicked out = WorkList (eqs)   =  []
               WorkList (funeqs)=  []
               WorkList (rest)  =  []
4[<C:0,F:0>] [W] cobox_ak4 :: a_ajW ~ Bool: Spontaneously solved
end stage interact with inerts }
End solver pipeline (discharged) }
  inerts    =  Equalities:
               Type-function equalities:
               No-eqs: True
               Dictionaries:
               Irreds:
               Insolubles = {}
               Solved dicts 0
               Solved funeqs 0
Start solver pipeline {
  work item =  [W] $dNum_ahZ :: Num
                                  a_ahY [" a use of ‘+’ " p1.hs:3:9] (CNonCanonical)
  inerts    =  Equalities:
               Type-function equalities:
               No-eqs: True
               Dictionaries:
               Irreds:
               Insolubles = {}
               Solved dicts 0
               Solved funeqs 0
runStage canonicalization {
  workitem   =  [W] $dNum_ahZ :: Num
                                   a_ahY [" a use of ‘+’ " p1.hs:3:9] (CNonCanonical)
canonicalize (non-canonical)
  [W] $dNum_ahZ :: Num
                     a_ahY [" a use of ‘+’ " p1.hs:3:9] (CNonCanonical)
canEvNC:cls Num [a_ahY]
Following bound tyvar a_ahY = a_ajW
Following bound tyvar a_ajW = Bool
canClass
  [W] $dNum_ahZ :: Num a_ahY Num [a_ahY]
  Num Bool
  Just [W] $dNum_ahZ :: Num Bool
end stage canonicalization }
runStage interact with inerts {
  workitem   =  [W] $dNum_ahZ :: Num
                                   Bool [" a use of ‘+’ " p1.hs:3:9] (CDictCan)
end stage interact with inerts }
runStage top-level reactions {
  workitem   =  [W] $dNum_ahZ :: Num
                                   Bool [" a use of ‘+’ " p1.hs:3:9] (CDictCan)
doTopReact
  [W] $dNum_ahZ :: Num Bool [" a use of ‘+’ " p1.hs:3:9] (CDictCan)
matchClassInst
  pred = Num Bool
  inerts= Equalities:
          Type-function equalities:
          No-eqs: True
          Dictionaries:
          Irreds:
          Insolubles = {}
          Solved dicts 0
          Solved funeqs 0
  untouchables= 0
matchClass not matching dict Num Bool
end stage top-level reactions }
5[<C:0,F:0>] [W] $dNum_ahZ :: Num Bool: Kept as inert
End solver pipeline (not discharged) }
  final_item =  [W] $dNum_ahZ :: Num
                                   Bool [" a use of ‘+’ " p1.hs:3:9] (CDictCan)
  inerts     =  Equalities:
                Type-function equalities:
                No-eqs: True
                Dictionaries:
                Irreds:
                Insolubles = {}
                Solved dicts 0
                Solved funeqs 0
insertInertItemTcS {
  Trying to insert new inert item: [W] $dNum_ahZ :: Num
                                                      Bool [" a use of ‘+’ " p1.hs:3:9] (CDictCan)
insertInertItemTcS }
Start solver pipeline {
  work item =  [W] $dNum_ajX :: Num
                                  a_ajW [" the literal ‘1’ " p1.hs:3:7] (CNonCanonical)
  inerts    =  Equalities:
               Type-function equalities:
               No-eqs: True
               Dictionaries: [W] $dNum_ahZ :: Num
                                                Bool [" a use of ‘+’ " p1.hs:3:9] (CDictCan)
               Irreds:
               Insolubles = {}
               Solved dicts 0
               Solved funeqs 0
runStage canonicalization {
  workitem   =  [W] $dNum_ajX :: Num
                                   a_ajW [" the literal ‘1’ " p1.hs:3:7] (CNonCanonical)
canonicalize (non-canonical)
  [W] $dNum_ajX :: Num
                     a_ajW [" the literal ‘1’ " p1.hs:3:7] (CNonCanonical)
canEvNC:cls Num [a_ajW]
Following bound tyvar a_ajW = Bool
canClass
  [W] $dNum_ajX :: Num a_ajW Num [a_ajW]
  Num Bool
  Just [W] $dNum_ajX :: Num Bool
end stage canonicalization }
runStage interact with inerts {
  workitem   =  [W] $dNum_ajX :: Num
                                   Bool [" the literal ‘1’ " p1.hs:3:7] (CDictCan)
setEvBind
  ev = $dNum_ajX
  tm  = $dNum_ahZ
6[<C:0,F:0>] [W] $dNum_ajX :: Num Bool: Dict equal (keep)
end stage interact with inerts }
End solver pipeline (discharged) }
  inerts    =  Equalities:
               Type-function equalities:
               No-eqs: True
               Dictionaries: [W] $dNum_ahZ :: Num
                                                Bool [" a use of ‘+’ " p1.hs:3:9] (CDictCan)
               Irreds:
               Insolubles = {}
               Solved dicts 0
               Solved funeqs 0
solveFlats end } {}
simpl_loop, iteration 1
solveWanteds }
  unsolved_flats   = {[W] $dNum_ahZ :: Num
                                         Bool [" a use of ‘+’ " p1.hs:3:9] (CDictCan)}
  unsolved_implics = {}
  current evbinds  = {cobox_ai0 = CO Sym cobox_ak1,
                      $dNum_ajX = $dNum_ahZ, cobox_ajY = CO cobox_ak2 -> cobox_ak3,
                      cobox_ajZ = CO Sym cobox_ak4, cobox_ak1 = CO <a_ahY>_N,
                      cobox_ak2 = CO <Integer>_N, cobox_ak3 = CO <a_ajW>_N,
                      cobox_ak4 = CO <Bool>_N}
  current tybinds  = (t_ahL, a_ahY)
                     (a_ahY, a_ajW)
                     (a_ajW, Bool)
  final wc = WC {wc_flat = [W] $dNum_ahZ :: Num
                                              Bool [" a use of ‘+’ " p1.hs:3:9] (CDictCan)}
writeMetaTyVar t_ahL := a_ahY
writeMetaTyVar a_ahY := a_ajW
writeMetaTyVar a_ajW := Bool
Constraint solver steps = 6
Start solver pipeline {
  work item =  [W] $dNum_ahZ :: Num
                                  Bool [" a use of ‘+’ " p1.hs:3:9] (CNonCanonical)
  inerts    =  Equalities:
               Type-function equalities:
               No-eqs: True
               Dictionaries:
               Irreds:
               Insolubles = {}
               Solved dicts 0
               Solved funeqs 0
runStage canonicalization {
  workitem   =  [W] $dNum_ahZ :: Num
                                   Bool [" a use of ‘+’ " p1.hs:3:9] (CNonCanonical)
canonicalize (non-canonical)
  [W] $dNum_ahZ :: Num
                     Bool [" a use of ‘+’ " p1.hs:3:9] (CNonCanonical)
canEvNC:cls Num [Bool]
canClass
  [W] $dNum_ahZ :: Num Bool Num [Bool]
  Num Bool
  Just [W] $dNum_ahZ :: Num Bool
end stage canonicalization }
runStage interact with inerts {
  workitem   =  [W] $dNum_ahZ :: Num
                                   Bool [" a use of ‘+’ " p1.hs:3:9] (CDictCan)
end stage interact with inerts }
runStage top-level reactions {
  workitem   =  [W] $dNum_ahZ :: Num
                                   Bool [" a use of ‘+’ " p1.hs:3:9] (CDictCan)
doTopReact
  [W] $dNum_ahZ :: Num Bool [" a use of ‘+’ " p1.hs:3:9] (CDictCan)
matchClassInst
  pred = Num Bool
  inerts= Equalities:
          Type-function equalities:
          No-eqs: True
          Dictionaries:
          Irreds:
          Insolubles = {}
          Solved dicts 0
          Solved funeqs 0
  untouchables= 0
matchClass not matching dict Num Bool
end stage top-level reactions }
1[<C:0,F:0>] [W] $dNum_ahZ :: Num Bool: Kept as inert
End solver pipeline (not discharged) }
  final_item =  [W] $dNum_ahZ :: Num
                                   Bool [" a use of ‘+’ " p1.hs:3:9] (CDictCan)
  inerts     =  Equalities:
                Type-function equalities:
                No-eqs: True
                Dictionaries:
                Irreds:
                Insolubles = {}
                Solved dicts 0
                Solved funeqs 0
insertInertItemTcS {
  Trying to insert new inert item: [W] $dNum_ahZ :: Num
                                                      Bool [" a use of ‘+’ " p1.hs:3:9] (CDictCan)
insertInertItemTcS }
Constraint solver steps = 1
simplifyWithApprox
  quant_pred_candidates = [Num Bool]
  gbl_tvs= []
  zonked_tau_tvs= []
  pbound = []
  bbound = []
  poly_qtvs = []
  constrained_tvs = []
  mr_bites = False
  qtvs = []
} simplifyInfer/no implication needed
addInlinePrags
  foo
  []
mkExport: check sig
  foo
  Bool
  Bool
u_tys 
  untch 0
  Bool ~ Bool
  a type equality Bool ~ Bool
u_tys yields no coercion
simplifyTop { wanted =  WC {}
solveWantedsTcMWithEvBinds wanted= WC {}
solveWanteds { WC {}
solveFlats {
solveFlats end } {}
simpl_loop, iteration 1
solveWanteds }
  unsolved_flats   = {}
  unsolved_implics = {}
  current evbinds  = {}
  current tybinds  =
  final wc = WC {}
End simplifyTop }
reportUnsolved {
reportUnsolved }
Binding:
  <TopLevel>
  [(foo, Bool)]
csb2 [foo]
} End of bindings for
  [foo]
  NonRecursive
  foo Bool
env2 [(foo, Identifier[foo::Bool, <TopLevel>])]
Tc6
env2 []
Tc7
End of tcVectDecls: LIE:
  WC {wc_flat = [W] $dNum_ahZ :: Num
                                   Bool [" a use of ‘+’ " p1.hs:3:9] (CNonCanonical)}
Tc7a
checkMain not Main Example
Tc8
simplifyTop {
  wanted =  WC {wc_flat = [W] $dNum_ahZ :: Num
                                             Bool [" a use of ‘+’ " p1.hs:3:9] (CNonCanonical)}
solveWantedsTcMWithEvBinds
  wanted= WC {wc_flat = [W] $dNum_ahZ :: Num
                                           Bool [" a use of ‘+’ " p1.hs:3:9] (CNonCanonical)}
solveWanteds {
  WC {wc_flat = [W] $dNum_ahZ :: Num
                                   Bool [" a use of ‘+’ " p1.hs:3:9] (CNonCanonical)}
solveFlats {
Start solver pipeline {
  work item =  [W] $dNum_ahZ :: Num
                                  Bool [" a use of ‘+’ " p1.hs:3:9] (CNonCanonical)
  inerts    =  Equalities:
               Type-function equalities:
               No-eqs: True
               Dictionaries:
               Irreds:
               Insolubles = {}
               Solved dicts 0
               Solved funeqs 0
runStage canonicalization {
  workitem   =  [W] $dNum_ahZ :: Num
                                   Bool [" a use of ‘+’ " p1.hs:3:9] (CNonCanonical)
canonicalize (non-canonical)
  [W] $dNum_ahZ :: Num
                     Bool [" a use of ‘+’ " p1.hs:3:9] (CNonCanonical)
canEvNC:cls Num [Bool]
canClass
  [W] $dNum_ahZ :: Num Bool Num [Bool]
  Num Bool
  Just [W] $dNum_ahZ :: Num Bool
end stage canonicalization }
runStage interact with inerts {
  workitem   =  [W] $dNum_ahZ :: Num
                                   Bool [" a use of ‘+’ " p1.hs:3:9] (CDictCan)
end stage interact with inerts }
runStage top-level reactions {
  workitem   =  [W] $dNum_ahZ :: Num
                                   Bool [" a use of ‘+’ " p1.hs:3:9] (CDictCan)
doTopReact
  [W] $dNum_ahZ :: Num Bool [" a use of ‘+’ " p1.hs:3:9] (CDictCan)
matchClassInst
  pred = Num Bool
  inerts= Equalities:
          Type-function equalities:
          No-eqs: True
          Dictionaries:
          Irreds:
          Insolubles = {}
          Solved dicts 0
          Solved funeqs 0
  untouchables= 0
matchClass not matching dict Num Bool
end stage top-level reactions }
1[<C:0,F:0>] [W] $dNum_ahZ :: Num Bool: Kept as inert
End solver pipeline (not discharged) }
  final_item =  [W] $dNum_ahZ :: Num
                                   Bool [" a use of ‘+’ " p1.hs:3:9] (CDictCan)
  inerts     =  Equalities:
                Type-function equalities:
                No-eqs: True
                Dictionaries:
                Irreds:
                Insolubles = {}
                Solved dicts 0
                Solved funeqs 0
insertInertItemTcS {
  Trying to insert new inert item: [W] $dNum_ahZ :: Num
                                                      Bool [" a use of ‘+’ " p1.hs:3:9] (CDictCan)
insertInertItemTcS }
solveFlats end } {}
simpl_loop, iteration 1
solveWanteds }
  unsolved_flats   = {[W] $dNum_ahZ :: Num
                                         Bool [" a use of ‘+’ " p1.hs:3:9] (CDictCan)}
  unsolved_implics = {}
  current evbinds  = {}
  current tybinds  =
  final wc = WC {wc_flat = [W] $dNum_ahZ :: Num
                                              Bool [" a use of ‘+’ " p1.hs:3:9] (CDictCan)}
applyDefaultingRules { 
  wanteds = {[W] $dNum_ahZ :: Num
                                Bool [" a use of ‘+’ " p1.hs:3:9] (CDictCan)}
findDefaultableGroups
  groups= []
  info= ([Integer, Double], (False, False))
applyDefaultingRules } []
Constraint solver steps = 1
End simplifyTop }
reportUnsolved {
reportUnsolved (before unflattening)
  WC {wc_flat = [W] $dNum_ahZ :: Num
                                   Bool [" a use of ‘+’ " p1.hs:3:9] (CNonCanonical)}
reportUnsolved (after unflattening):
  WC {wc_flat = [W] $dNum_ahZ :: Num
                                   Bool [" a use of ‘+’ " p1.hs:3:9] (CNonCanonical)}
reportFlats
  Flats = {}
  Suppress = False
tryReporters { []
tryReporters: no Utterly wrong
tryReporters: no Holes
tryReporters: no Skolem equalities
tryReporters: no Equalities
tryReporters: no Implicit params
tryReporters: no Irreds
tryReporters: no Dicts
tryReporters }
reportFlats
  Flats = {}
  Suppress = False
tryReporters { []
tryReporters: no Utterly wrong
tryReporters: no Holes
tryReporters: no Skolem equalities
tryReporters: no Equalities
tryReporters: no Implicit params
tryReporters: no Irreds
tryReporters: no Dicts
tryReporters }
reportFlats
  Flats = {[W] $dNum_ahZ :: Num
                              Bool [" a use of ‘+’ " p1.hs:3:9] (CNonCanonical)}
  Suppress = False
tryReporters {
  [[W] $dNum_ahZ :: Num
                      Bool [" a use of ‘+’ " p1.hs:3:9] (CNonCanonical)]
tryReporters: no Utterly wrong
tryReporters: no Holes
tryReporters: no Skolem equalities
tryReporters: no Equalities
tryReporters: no Implicit params
tryReporters: no Irreds
tryReporters: yes
  Dicts [[W] $dNum_ahZ :: Num
                            Bool [" a use of ‘+’ " p1.hs:3:9] (CNonCanonical)]
relevantBindings [foo]
mk_dict_err
  [W] $dNum_ahZ :: Num
                     Bool [" a use of ‘+’ " p1.hs:3:9] (CNonCanonical)
  False
Adding error:
  p1.hs:3:9:
      No instance for (Num Bool) arising from a use of ‘+’
      In the expression: 1 + True
      In an equation for ‘foo’: foo = 1 + True
tryReporters }
reportUnsolved }
InstEnvs (External) {
  instance Control.Applicative.Alternative []
    -- Defined in ‘Control.Applicative’
  instance Control.Monad.MonadPlus m =>
           Control.Applicative.Alternative
             (Control.Applicative.WrappedMonad m)
    -- Defined in ‘Control.Applicative’
  instance (Control.Arrow.ArrowZero a, Control.Arrow.ArrowPlus a) =>
           Control.Applicative.Alternative
             (Control.Applicative.WrappedArrow a b)
    -- Defined in ‘Control.Applicative’
  instance Control.Applicative.Alternative GHC.Conc.Sync.STM
    -- Defined in ‘Control.Applicative’
  instance Control.Applicative.Alternative
             Text.ParserCombinators.ReadPrec.ReadPrec
    -- Defined in ‘Control.Applicative’
  instance Control.Applicative.Alternative
             Text.ParserCombinators.ReadP.ReadP
    -- Defined in ‘Control.Applicative’
  instance Control.Applicative.Alternative Maybe
    -- Defined in ‘Control.Applicative’
  instance Control.Arrow.ArrowPlus a =>
           Control.Applicative.Alternative (Control.Arrow.ArrowMonad a)
    -- Defined in ‘Control.Applicative’
  instance Enum GHC.Types.Word -- Defined in ‘GHC.Real’
  instance Integral a => Enum (GHC.Real.Ratio a)
    -- Defined in ‘GHC.Real’
  instance Enum Float -- Defined in ‘GHC.Float’
  instance Enum Double -- Defined in ‘GHC.Float’
  instance Eq Integer -- Defined in ‘integer-gmp:GHC.Integer.Type’
  instance Eq a => Eq (Control.Applicative.ZipList a)
    -- Defined in ‘Control.Applicative’
  instance Eq a => Eq (GHC.Real.Ratio a) -- Defined in ‘GHC.Real’
  instance Floating Float -- Defined in ‘GHC.Float’
  instance Floating Double -- Defined in ‘GHC.Float’
  instance Integral a => Fractional (GHC.Real.Ratio a)
    -- Defined in ‘GHC.Real’
  instance Fractional Float -- Defined in ‘GHC.Float’
  instance Fractional Double -- Defined in ‘GHC.Float’
  instance Integral GHC.Types.Word -- Defined in ‘GHC.Real’
  instance Integral Integer -- Defined in ‘GHC.Real’
  instance Integral Int -- Defined in ‘GHC.Real’
  instance Monad m => Monad (Control.Applicative.WrappedMonad m)
    -- Defined in ‘Control.Applicative’
  instance Monad [] -- Defined in ‘GHC.Base’
  instance Monad IO -- Defined in ‘GHC.Base’
  instance Monad ((->) r) -- Defined in ‘GHC.Base’
  instance Functor Control.Applicative.ZipList
    -- Defined in ‘Control.Applicative’
  instance Monad m => Functor (Control.Applicative.WrappedMonad m)
    -- Defined in ‘Control.Applicative’
  instance Control.Arrow.Arrow a =>
           Functor (Control.Applicative.WrappedArrow a b)
    -- Defined in ‘Control.Applicative’
  instance Functor (Control.Applicative.Const m)
    -- Defined in ‘Control.Applicative’
  instance Functor [] -- Defined in ‘GHC.Base’
  instance Functor IO -- Defined in ‘GHC.Base’
  instance Functor ((->) r) -- Defined in ‘GHC.Base’
  instance Functor ((,) a) -- Defined in ‘GHC.Base’
  instance Num GHC.Types.Word -- Defined in ‘GHC.Num’
  instance Num Integer -- Defined in ‘GHC.Num’
  instance Num Int -- Defined in ‘GHC.Num’
  instance Integral a => Num (GHC.Real.Ratio a)
    -- Defined in ‘GHC.Real’
  instance Num Float -- Defined in ‘GHC.Float’
  instance Num Double -- Defined in ‘GHC.Float’
  instance Ord Integer -- Defined in ‘integer-gmp:GHC.Integer.Type’
  instance Ord a => Ord (Control.Applicative.ZipList a)
    -- Defined in ‘Control.Applicative’
  instance Integral a => Ord (GHC.Real.Ratio a)
    -- Defined in ‘GHC.Real’
  instance Read a => Read (Control.Applicative.ZipList a)
    -- Defined in ‘Control.Applicative’
  instance Real GHC.Types.Word -- Defined in ‘GHC.Real’
  instance Integral a => Real (GHC.Real.Ratio a)
    -- Defined in ‘GHC.Real’
  instance Real Integer -- Defined in ‘GHC.Real’
  instance Real Int -- Defined in ‘GHC.Real’
  instance Real Float -- Defined in ‘GHC.Float’
  instance Real Double -- Defined in ‘GHC.Float’
  instance RealFloat Float -- Defined in ‘GHC.Float’
  instance RealFloat Double -- Defined in ‘GHC.Float’
  instance Integral a => RealFrac (GHC.Real.Ratio a)
    -- Defined in ‘GHC.Real’
  instance RealFrac Float -- Defined in ‘GHC.Float’
  instance RealFrac Double -- Defined in ‘GHC.Float’
  instance Show a => Show (Control.Applicative.ZipList a)
    -- Defined in ‘Control.Applicative’
  instance (Integral a, Show a) => Show (GHC.Real.Ratio a)
    -- Defined in ‘GHC.Real’
  instance Show Float -- Defined in ‘GHC.Float’
  instance Show Double -- Defined in ‘GHC.Float’
  instance Data.Typeable.Internal.Typeable
             Control.Applicative.Applicative
    -- Defined in ‘Control.Applicative’
  instance Data.Typeable.Internal.Typeable
             Control.Applicative.Alternative
    -- Defined in ‘Control.Applicative’
  instance Control.Monad.MonadPlus [] -- Defined in ‘Control.Monad’
  instance Control.Monad.MonadPlus Maybe
    -- Defined in ‘Control.Monad’
  instance Control.Applicative.Applicative []
    -- Defined in ‘Control.Applicative’
  instance Control.Applicative.Applicative
             Control.Applicative.ZipList
    -- Defined in ‘Control.Applicative’
  instance Monad m =>
           Control.Applicative.Applicative
             (Control.Applicative.WrappedMonad m)
    -- Defined in ‘Control.Applicative’
  instance Control.Arrow.Arrow a =>
           Control.Applicative.Applicative
             (Control.Applicative.WrappedArrow a b)
    -- Defined in ‘Control.Applicative’
  instance Control.Applicative.Applicative GHC.Conc.Sync.STM
    -- Defined in ‘Control.Applicative’
  instance Control.Applicative.Applicative (GHC.ST.ST s)
    -- Defined in ‘Control.Applicative’
  instance Control.Applicative.Applicative
             (base:Control.Monad.ST.Lazy.Imp.ST s)
    -- Defined in ‘Control.Applicative’
  instance Control.Applicative.Applicative
             Text.ParserCombinators.ReadPrec.ReadPrec
    -- Defined in ‘Control.Applicative’
  instance Control.Applicative.Applicative
             Text.ParserCombinators.ReadP.ReadP
    -- Defined in ‘Control.Applicative’
  instance Control.Applicative.Applicative Data.Proxy.Proxy
    -- Defined in ‘Control.Applicative’
  instance Control.Applicative.Applicative Maybe
    -- Defined in ‘Control.Applicative’
  instance Control.Applicative.Applicative IO
    -- Defined in ‘Control.Applicative’
  instance Control.Applicative.Applicative (Either e)
    -- Defined in ‘Control.Applicative’
  instance Data.Monoid.Monoid m =>
           Control.Applicative.Applicative (Control.Applicative.Const m)
    -- Defined in ‘Control.Applicative’
  instance Control.Arrow.Arrow a =>
           Control.Applicative.Applicative (Control.Arrow.ArrowMonad a)
    -- Defined in ‘Control.Applicative’
  instance Control.Applicative.Applicative ((->) a)
    -- Defined in ‘Control.Applicative’
  instance Data.Monoid.Monoid a =>
           Control.Applicative.Applicative ((,) a)
    -- Defined in ‘Control.Applicative’
  instance GHC.Generics.Generic (Control.Applicative.ZipList a)
    -- Defined in ‘Control.Applicative’
  instance GHC.Generics.Generic
             (Control.Applicative.WrappedMonad m a)
    -- Defined in ‘Control.Applicative’
  instance GHC.Generics.Generic
             (Control.Applicative.WrappedArrow a b c)
    -- Defined in ‘Control.Applicative’
  instance GHC.Generics.Generic (Control.Applicative.Const a b)
    -- Defined in ‘Control.Applicative’
  instance GHC.Generics.Generic1 Control.Applicative.ZipList
    -- Defined in ‘Control.Applicative’
  instance GHC.Generics.Generic1 (Control.Applicative.WrappedMonad m)
    -- Defined in ‘Control.Applicative’
  instance GHC.Generics.Generic1
             (Control.Applicative.WrappedArrow a b)
    -- Defined in ‘Control.Applicative’
  instance GHC.Generics.Generic1 (Control.Applicative.Const a)
    -- Defined in ‘Control.Applicative’
  instance GHC.Generics.Datatype Control.Applicative.D1ZipList
    -- Defined in ‘Control.Applicative’
  instance GHC.Generics.Datatype Control.Applicative.D1WrappedMonad
    -- Defined in ‘Control.Applicative’
  instance GHC.Generics.Datatype Control.Applicative.D1WrappedArrow
    -- Defined in ‘Control.Applicative’
  instance GHC.Generics.Datatype Control.Applicative.D1Const
    -- Defined in ‘Control.Applicative’
  instance GHC.Generics.Constructor Control.Applicative.C1_0ZipList
    -- Defined in ‘Control.Applicative’
  instance GHC.Generics.Constructor
             Control.Applicative.C1_0WrappedMonad
    -- Defined in ‘Control.Applicative’
  instance GHC.Generics.Constructor
             Control.Applicative.C1_0WrappedArrow
    -- Defined in ‘Control.Applicative’
  instance GHC.Generics.Constructor Control.Applicative.C1_0Const
    -- Defined in ‘Control.Applicative’
  instance GHC.Generics.Selector Control.Applicative.S1_0_0ZipList
    -- Defined in ‘Control.Applicative’
  instance GHC.Generics.Selector
             Control.Applicative.S1_0_0WrappedMonad
    -- Defined in ‘Control.Applicative’
  instance GHC.Generics.Selector
             Control.Applicative.S1_0_0WrappedArrow
    -- Defined in ‘Control.Applicative’
  instance GHC.Generics.Selector Control.Applicative.S1_0_0Const
    -- Defined in ‘Control.Applicative’
  instance Data.Monoid.Monoid a =>
           Data.Monoid.Monoid (Control.Applicative.Const a b)
    -- Defined in ‘Control.Applicative’
End InstEnvs }
InstEnvs (Internal) {
End InstEnvs }
famInstEnvs (External) {
  type GHC.Generics.Rep Char
    ~ GHC.Generics.D1
        GHC.Generics.D_Char
        (GHC.Generics.C1
           GHC.Generics.C_Char
           (GHC.Generics.S1 GHC.Generics.NoSelector (GHC.Generics.Rec0 Char)))
    -- Defined in ‘GHC.Generics’
  type GHC.Generics.Rep Double
    ~ GHC.Generics.D1
        GHC.Generics.D_Double
        (GHC.Generics.C1
           GHC.Generics.C_Double
           (GHC.Generics.S1
              GHC.Generics.NoSelector (GHC.Generics.Rec0 Double)))
    -- Defined in ‘GHC.Generics’
  type GHC.Generics.Rep Float
    ~ GHC.Generics.D1
        GHC.Generics.D_Float
        (GHC.Generics.C1
           GHC.Generics.C_Float
           (GHC.Generics.S1
              GHC.Generics.NoSelector (GHC.Generics.Rec0 Float)))
    -- Defined in ‘GHC.Generics’
  type GHC.Generics.Rep Int
    ~ GHC.Generics.D1
        GHC.Generics.D_Int
        (GHC.Generics.C1
           GHC.Generics.C_Int
           (GHC.Generics.S1 GHC.Generics.NoSelector (GHC.Generics.Rec0 Int)))
    -- Defined in ‘GHC.Generics’
  type GHC.Generics.Rep (Data.Proxy.Proxy t)
    ~ GHC.Generics.D1
        GHC.Generics.D1Proxy
        (GHC.Generics.C1 GHC.Generics.C1_0Proxy GHC.Generics.U1)
    -- Defined in ‘GHC.Generics’
  type GHC.Generics.Rep (a, b, c, d, e, f, g)
    ~ GHC.Generics.D1
        GHC.Generics.D1(,,,,,,)
        (GHC.Generics.C1
           GHC.Generics.C1_0(,,,,,,)
           ((GHC.Generics.S1 GHC.Generics.NoSelector (GHC.Generics.Rec0 a)
             GHC.Generics.:*: (GHC.Generics.S1
                                 GHC.Generics.NoSelector (GHC.Generics.Rec0 b)
                               GHC.Generics.:*: GHC.Generics.S1
                                                  GHC.Generics.NoSelector (GHC.Generics.Rec0 c)))
            GHC.Generics.:*: ((GHC.Generics.S1
                                 GHC.Generics.NoSelector (GHC.Generics.Rec0 d)
                               GHC.Generics.:*: GHC.Generics.S1
                                                  GHC.Generics.NoSelector (GHC.Generics.Rec0 e))
                              GHC.Generics.:*: (GHC.Generics.S1
                                                  GHC.Generics.NoSelector (GHC.Generics.Rec0 f)
                                                GHC.Generics.:*: GHC.Generics.S1
                                                                   GHC.Generics.NoSelector
                                                                   (GHC.Generics.Rec0 g)))))
    -- Defined in ‘GHC.Generics’
  type GHC.Generics.Rep (a, b, c, d, e, f)
    ~ GHC.Generics.D1
        GHC.Generics.D1(,,,,,)
        (GHC.Generics.C1
           GHC.Generics.C1_0(,,,,,)
           ((GHC.Generics.S1 GHC.Generics.NoSelector (GHC.Generics.Rec0 a)
             GHC.Generics.:*: (GHC.Generics.S1
                                 GHC.Generics.NoSelector (GHC.Generics.Rec0 b)
                               GHC.Generics.:*: GHC.Generics.S1
                                                  GHC.Generics.NoSelector (GHC.Generics.Rec0 c)))
            GHC.Generics.:*: (GHC.Generics.S1
                                GHC.Generics.NoSelector (GHC.Generics.Rec0 d)
                              GHC.Generics.:*: (GHC.Generics.S1
                                                  GHC.Generics.NoSelector (GHC.Generics.Rec0 e)
                                                GHC.Generics.:*: GHC.Generics.S1
                                                                   GHC.Generics.NoSelector
                                                                   (GHC.Generics.Rec0 f)))))
    -- Defined in ‘GHC.Generics’
  type GHC.Generics.Rep (a, b, c, d, e)
    ~ GHC.Generics.D1
        GHC.Generics.D1(,,,,)
        (GHC.Generics.C1
           GHC.Generics.C1_0(,,,,)
           ((GHC.Generics.S1 GHC.Generics.NoSelector (GHC.Generics.Rec0 a)
             GHC.Generics.:*: GHC.Generics.S1
                                GHC.Generics.NoSelector (GHC.Generics.Rec0 b))
            GHC.Generics.:*: (GHC.Generics.S1
                                GHC.Generics.NoSelector (GHC.Generics.Rec0 c)
                              GHC.Generics.:*: (GHC.Generics.S1
                                                  GHC.Generics.NoSelector (GHC.Generics.Rec0 d)
                                                GHC.Generics.:*: GHC.Generics.S1
                                                                   GHC.Generics.NoSelector
                                                                   (GHC.Generics.Rec0 e)))))
    -- Defined in ‘GHC.Generics’
  type GHC.Generics.Rep (a, b, c, d)
    ~ GHC.Generics.D1
        GHC.Generics.D1(,,,)
        (GHC.Generics.C1
           GHC.Generics.C1_0(,,,)
           ((GHC.Generics.S1 GHC.Generics.NoSelector (GHC.Generics.Rec0 a)
             GHC.Generics.:*: GHC.Generics.S1
                                GHC.Generics.NoSelector (GHC.Generics.Rec0 b))
            GHC.Generics.:*: (GHC.Generics.S1
                                GHC.Generics.NoSelector (GHC.Generics.Rec0 c)
                              GHC.Generics.:*: GHC.Generics.S1
                                                 GHC.Generics.NoSelector (GHC.Generics.Rec0 d))))
    -- Defined in ‘GHC.Generics’
  type GHC.Generics.Rep (a, b, c)
    ~ GHC.Generics.D1
        GHC.Generics.D1(,,)
        (GHC.Generics.C1
           GHC.Generics.C1_0(,,)
           (GHC.Generics.S1 GHC.Generics.NoSelector (GHC.Generics.Rec0 a)
            GHC.Generics.:*: (GHC.Generics.S1
                                GHC.Generics.NoSelector (GHC.Generics.Rec0 b)
                              GHC.Generics.:*: GHC.Generics.S1
                                                 GHC.Generics.NoSelector (GHC.Generics.Rec0 c))))
    -- Defined in ‘GHC.Generics’
  type GHC.Generics.Rep (a, b)
    ~ GHC.Generics.D1
        GHC.Generics.D1(,)
        (GHC.Generics.C1
           GHC.Generics.C1_0(,)
           (GHC.Generics.S1 GHC.Generics.NoSelector (GHC.Generics.Rec0 a)
            GHC.Generics.:*: GHC.Generics.S1
                               GHC.Generics.NoSelector (GHC.Generics.Rec0 b)))
    -- Defined in ‘GHC.Generics’
  type GHC.Generics.Rep ()
    ~ GHC.Generics.D1
        GHC.Generics.D1()
        (GHC.Generics.C1 GHC.Generics.C1_0() GHC.Generics.U1)
    -- Defined in ‘GHC.Generics’
  type GHC.Generics.Rep Ordering
    ~ GHC.Generics.D1
        GHC.Generics.D1Ordering
        (GHC.Generics.C1 GHC.Generics.C1_0Ordering GHC.Generics.U1
         GHC.Generics.:+: (GHC.Generics.C1
                             GHC.Generics.C1_1Ordering GHC.Generics.U1
                           GHC.Generics.:+: GHC.Generics.C1
                                              GHC.Generics.C1_2Ordering GHC.Generics.U1))
    -- Defined in ‘GHC.Generics’
  type GHC.Generics.Rep Bool
    ~ GHC.Generics.D1
        GHC.Generics.D1Bool
        (GHC.Generics.C1 GHC.Generics.C1_0Bool GHC.Generics.U1
         GHC.Generics.:+: GHC.Generics.C1
                            GHC.Generics.C1_1Bool GHC.Generics.U1)
    -- Defined in ‘GHC.Generics’
  type GHC.Generics.Rep (Either a b)
    ~ GHC.Generics.D1
        GHC.Generics.D1Either
        (GHC.Generics.C1
           GHC.Generics.C1_0Either
           (GHC.Generics.S1 GHC.Generics.NoSelector (GHC.Generics.Rec0 a))
         GHC.Generics.:+: GHC.Generics.C1
                            GHC.Generics.C1_1Either
                            (GHC.Generics.S1 GHC.Generics.NoSelector (GHC.Generics.Rec0 b)))
    -- Defined in ‘GHC.Generics’
  type GHC.Generics.Rep (Maybe a)
    ~ GHC.Generics.D1
        GHC.Generics.D1Maybe
        (GHC.Generics.C1 GHC.Generics.C1_0Maybe GHC.Generics.U1
         GHC.Generics.:+: GHC.Generics.C1
                            GHC.Generics.C1_1Maybe
                            (GHC.Generics.S1 GHC.Generics.NoSelector (GHC.Generics.Rec0 a)))
    -- Defined in ‘GHC.Generics’
  type GHC.Generics.Rep [a]
    ~ GHC.Generics.D1
        GHC.Generics.D1[]
        (GHC.Generics.C1 GHC.Generics.C1_0[] GHC.Generics.U1
         GHC.Generics.:+: GHC.Generics.C1
                            GHC.Generics.C1_1[]
                            (GHC.Generics.S1 GHC.Generics.NoSelector (GHC.Generics.Rec0 a)
                             GHC.Generics.:*: GHC.Generics.S1
                                                GHC.Generics.NoSelector (GHC.Generics.Rec0 [a])))
    -- Defined in ‘GHC.Generics’
  type GHC.Generics.Rep (GHC.Generics.U1 p)
    ~ GHC.Generics.D1
        GHC.Generics.D1U1
        (GHC.Generics.C1 GHC.Generics.C1_0U1 GHC.Generics.U1)
    -- Defined in ‘GHC.Generics’
  type GHC.Generics.Rep (GHC.Generics.Par1 p)
    ~ GHC.Generics.D1
        GHC.Generics.D1Par1
        (GHC.Generics.C1
           GHC.Generics.C1_0Par1
           (GHC.Generics.S1 GHC.Generics.S1_0_0Par1 (GHC.Generics.Rec0 p)))
    -- Defined in ‘GHC.Generics’
  type GHC.Generics.Rep (GHC.Generics.Rec1 f p)
    ~ GHC.Generics.D1
        GHC.Generics.D1Rec1
        (GHC.Generics.C1
           GHC.Generics.C1_0Rec1
           (GHC.Generics.S1
              GHC.Generics.S1_0_0Rec1 (GHC.Generics.Rec0 (f p))))
    -- Defined in ‘GHC.Generics’
  type GHC.Generics.Rep (GHC.Generics.K1 i c p)
    ~ GHC.Generics.D1
        GHC.Generics.D1K1
        (GHC.Generics.C1
           GHC.Generics.C1_0K1
           (GHC.Generics.S1 GHC.Generics.S1_0_0K1 (GHC.Generics.Rec0 c)))
    -- Defined in ‘GHC.Generics’
  type GHC.Generics.Rep (GHC.Generics.M1 i c f p)
    ~ GHC.Generics.D1
        GHC.Generics.D1M1
        (GHC.Generics.C1
           GHC.Generics.C1_0M1
           (GHC.Generics.S1 GHC.Generics.S1_0_0M1 (GHC.Generics.Rec0 (f p))))
    -- Defined in ‘GHC.Generics’
  type GHC.Generics.Rep ((GHC.Generics.:+:) f g p)
    ~ GHC.Generics.D1
        GHC.Generics.D1:+:
        (GHC.Generics.C1
           GHC.Generics.C1_0:+:
           (GHC.Generics.S1 GHC.Generics.NoSelector (GHC.Generics.Rec0 (f p)))
         GHC.Generics.:+: GHC.Generics.C1
                            GHC.Generics.C1_1:+:
                            (GHC.Generics.S1
                               GHC.Generics.NoSelector (GHC.Generics.Rec0 (g p))))
    -- Defined in ‘GHC.Generics’
  type GHC.Generics.Rep ((GHC.Generics.:*:) f g p)
    ~ GHC.Generics.D1
        GHC.Generics.D1:*:
        (GHC.Generics.C1
           GHC.Generics.C1_0:*:
           (GHC.Generics.S1 GHC.Generics.NoSelector (GHC.Generics.Rec0 (f p))
            GHC.Generics.:*: GHC.Generics.S1
                               GHC.Generics.NoSelector (GHC.Generics.Rec0 (g p))))
    -- Defined in ‘GHC.Generics’
  type GHC.Generics.Rep ((GHC.Generics.:.:) f g p)
    ~ GHC.Generics.D1
        GHC.Generics.D1:.:
        (GHC.Generics.C1
           GHC.Generics.C1_0:.:
           (GHC.Generics.S1
              GHC.Generics.S1_0_0:.: (GHC.Generics.Rec0 (f (g p)))))
    -- Defined in ‘GHC.Generics’
  type GHC.Generics.Rep GHC.Generics.Associativity
    ~ GHC.Generics.D1
        GHC.Generics.D1Associativity
        (GHC.Generics.C1 GHC.Generics.C1_0Associativity GHC.Generics.U1
         GHC.Generics.:+: (GHC.Generics.C1
                             GHC.Generics.C1_1Associativity GHC.Generics.U1
                           GHC.Generics.:+: GHC.Generics.C1
                                              GHC.Generics.C1_2Associativity GHC.Generics.U1))
    -- Defined in ‘GHC.Generics’
  type GHC.Generics.Rep GHC.Generics.Fixity
    ~ GHC.Generics.D1
        GHC.Generics.D1Fixity
        (GHC.Generics.C1 GHC.Generics.C1_0Fixity GHC.Generics.U1
         GHC.Generics.:+: GHC.Generics.C1
                            GHC.Generics.C1_1Fixity
                            (GHC.Generics.S1
                               GHC.Generics.NoSelector
                               (GHC.Generics.Rec0 GHC.Generics.Associativity)
                             GHC.Generics.:*: GHC.Generics.S1
                                                GHC.Generics.NoSelector (GHC.Generics.Rec0 Int)))
    -- Defined in ‘GHC.Generics’
  type GHC.Generics.Rep GHC.Generics.Arity
    ~ GHC.Generics.D1
        GHC.Generics.D1Arity
        (GHC.Generics.C1 GHC.Generics.C1_0Arity GHC.Generics.U1
         GHC.Generics.:+: GHC.Generics.C1
                            GHC.Generics.C1_1Arity
                            (GHC.Generics.S1 GHC.Generics.NoSelector (GHC.Generics.Rec0 Int)))
    -- Defined in ‘GHC.Generics’
  type GHC.Generics.Rep (Data.Monoid.Dual a)
    ~ GHC.Generics.D1
        Data.Monoid.D1Dual
        (GHC.Generics.C1
           Data.Monoid.C1_0Dual
           (GHC.Generics.S1 Data.Monoid.S1_0_0Dual (GHC.Generics.Rec0 a)))
    -- Defined in ‘Data.Monoid’
  type GHC.Generics.Rep (Data.Monoid.Endo a)
    ~ GHC.Generics.D1
        Data.Monoid.D1Endo
        (GHC.Generics.C1
           Data.Monoid.C1_0Endo
           (GHC.Generics.S1
              Data.Monoid.S1_0_0Endo (GHC.Generics.Rec0 (a -> a))))
    -- Defined in ‘Data.Monoid’
  type GHC.Generics.Rep Data.Monoid.All
    ~ GHC.Generics.D1
        Data.Monoid.D1All
        (GHC.Generics.C1
           Data.Monoid.C1_0All
           (GHC.Generics.S1 Data.Monoid.S1_0_0All (GHC.Generics.Rec0 Bool)))
    -- Defined in ‘Data.Monoid’
  type GHC.Generics.Rep Data.Monoid.Any
    ~ GHC.Generics.D1
        Data.Monoid.D1Any
        (GHC.Generics.C1
           Data.Monoid.C1_0Any
           (GHC.Generics.S1 Data.Monoid.S1_0_0Any (GHC.Generics.Rec0 Bool)))
    -- Defined in ‘Data.Monoid’
  type GHC.Generics.Rep (Data.Monoid.Sum a)
    ~ GHC.Generics.D1
        Data.Monoid.D1Sum
        (GHC.Generics.C1
           Data.Monoid.C1_0Sum
           (GHC.Generics.S1 Data.Monoid.S1_0_0Sum (GHC.Generics.Rec0 a)))
    -- Defined in ‘Data.Monoid’
  type GHC.Generics.Rep (Data.Monoid.Product a)
    ~ GHC.Generics.D1
        Data.Monoid.D1Product
        (GHC.Generics.C1
           Data.Monoid.C1_0Product
           (GHC.Generics.S1 Data.Monoid.S1_0_0Product (GHC.Generics.Rec0 a)))
    -- Defined in ‘Data.Monoid’
  type GHC.Generics.Rep (Data.Monoid.First a)
    ~ GHC.Generics.D1
        Data.Monoid.D1First
        (GHC.Generics.C1
           Data.Monoid.C1_0First
           (GHC.Generics.S1
              Data.Monoid.S1_0_0First (GHC.Generics.Rec0 (Maybe a))))
    -- Defined in ‘Data.Monoid’
  type GHC.Generics.Rep (Data.Monoid.Last a)
    ~ GHC.Generics.D1
        Data.Monoid.D1Last
        (GHC.Generics.C1
           Data.Monoid.C1_0Last
           (GHC.Generics.S1
              Data.Monoid.S1_0_0Last (GHC.Generics.Rec0 (Maybe a))))
    -- Defined in ‘Data.Monoid’
  type GHC.Generics.Rep (Control.Applicative.Const a b)
    ~ GHC.Generics.D1
        Control.Applicative.D1Const
        (GHC.Generics.C1
           Control.Applicative.C1_0Const
           (GHC.Generics.S1
              Control.Applicative.S1_0_0Const (GHC.Generics.Rec0 a)))
    -- Defined in ‘Control.Applicative’
  type GHC.Generics.Rep (Control.Applicative.WrappedMonad m a)
    ~ GHC.Generics.D1
        Control.Applicative.D1WrappedMonad
        (GHC.Generics.C1
           Control.Applicative.C1_0WrappedMonad
           (GHC.Generics.S1
              Control.Applicative.S1_0_0WrappedMonad (GHC.Generics.Rec0 (m a))))
    -- Defined in ‘Control.Applicative’
  type GHC.Generics.Rep (Control.Applicative.WrappedArrow a b c)
    ~ GHC.Generics.D1
        Control.Applicative.D1WrappedArrow
        (GHC.Generics.C1
           Control.Applicative.C1_0WrappedArrow
           (GHC.Generics.S1
              Control.Applicative.S1_0_0WrappedArrow
              (GHC.Generics.Rec0 (a b c))))
    -- Defined in ‘Control.Applicative’
  type GHC.Generics.Rep (Control.Applicative.ZipList a)
    ~ GHC.Generics.D1
        Control.Applicative.D1ZipList
        (GHC.Generics.C1
           Control.Applicative.C1_0ZipList
           (GHC.Generics.S1
              Control.Applicative.S1_0_0ZipList (GHC.Generics.Rec0 [a])))
    -- Defined in ‘Control.Applicative’
  type GHC.Generics.Rep1 ((,,,,,,) a b c d e f)
    ~ GHC.Generics.D1
        GHC.Generics.D1(,,,,,,)
        (GHC.Generics.C1
           GHC.Generics.C1_0(,,,,,,)
           ((GHC.Generics.S1 GHC.Generics.NoSelector (GHC.Generics.Rec0 a)
             GHC.Generics.:*: (GHC.Generics.S1
                                 GHC.Generics.NoSelector (GHC.Generics.Rec0 b)
                               GHC.Generics.:*: GHC.Generics.S1
                                                  GHC.Generics.NoSelector (GHC.Generics.Rec0 c)))
            GHC.Generics.:*: ((GHC.Generics.S1
                                 GHC.Generics.NoSelector (GHC.Generics.Rec0 d)
                               GHC.Generics.:*: GHC.Generics.S1
                                                  GHC.Generics.NoSelector (GHC.Generics.Rec0 e))
                              GHC.Generics.:*: (GHC.Generics.S1
                                                  GHC.Generics.NoSelector (GHC.Generics.Rec0 f)
                                                GHC.Generics.:*: GHC.Generics.S1
                                                                   GHC.Generics.NoSelector
                                                                   GHC.Generics.Par1))))
    -- Defined in ‘GHC.Generics’
  type GHC.Generics.Rep1 ((,,,,,) a b c d e)
    ~ GHC.Generics.D1
        GHC.Generics.D1(,,,,,)
        (GHC.Generics.C1
           GHC.Generics.C1_0(,,,,,)
           ((GHC.Generics.S1 GHC.Generics.NoSelector (GHC.Generics.Rec0 a)
             GHC.Generics.:*: (GHC.Generics.S1
                                 GHC.Generics.NoSelector (GHC.Generics.Rec0 b)
                               GHC.Generics.:*: GHC.Generics.S1
                                                  GHC.Generics.NoSelector (GHC.Generics.Rec0 c)))
            GHC.Generics.:*: (GHC.Generics.S1
                                GHC.Generics.NoSelector (GHC.Generics.Rec0 d)
                              GHC.Generics.:*: (GHC.Generics.S1
                                                  GHC.Generics.NoSelector (GHC.Generics.Rec0 e)
                                                GHC.Generics.:*: GHC.Generics.S1
                                                                   GHC.Generics.NoSelector
                                                                   GHC.Generics.Par1))))
    -- Defined in ‘GHC.Generics’
  type GHC.Generics.Rep1 ((,,,,) a b c d)
    ~ GHC.Generics.D1
        GHC.Generics.D1(,,,,)
        (GHC.Generics.C1
           GHC.Generics.C1_0(,,,,)
           ((GHC.Generics.S1 GHC.Generics.NoSelector (GHC.Generics.Rec0 a)
             GHC.Generics.:*: GHC.Generics.S1
                                GHC.Generics.NoSelector (GHC.Generics.Rec0 b))
            GHC.Generics.:*: (GHC.Generics.S1
                                GHC.Generics.NoSelector (GHC.Generics.Rec0 c)
                              GHC.Generics.:*: (GHC.Generics.S1
                                                  GHC.Generics.NoSelector (GHC.Generics.Rec0 d)
                                                GHC.Generics.:*: GHC.Generics.S1
                                                                   GHC.Generics.NoSelector
                                                                   GHC.Generics.Par1))))
    -- Defined in ‘GHC.Generics’
  type GHC.Generics.Rep1 ((,,,) a b c)
    ~ GHC.Generics.D1
        GHC.Generics.D1(,,,)
        (GHC.Generics.C1
           GHC.Generics.C1_0(,,,)
           ((GHC.Generics.S1 GHC.Generics.NoSelector (GHC.Generics.Rec0 a)
             GHC.Generics.:*: GHC.Generics.S1
                                GHC.Generics.NoSelector (GHC.Generics.Rec0 b))
            GHC.Generics.:*: (GHC.Generics.S1
                                GHC.Generics.NoSelector (GHC.Generics.Rec0 c)
                              GHC.Generics.:*: GHC.Generics.S1
                                                 GHC.Generics.NoSelector GHC.Generics.Par1)))
    -- Defined in ‘GHC.Generics’
  type GHC.Generics.Rep1 ((,,) a b)
    ~ GHC.Generics.D1
        GHC.Generics.D1(,,)
        (GHC.Generics.C1
           GHC.Generics.C1_0(,,)
           (GHC.Generics.S1 GHC.Generics.NoSelector (GHC.Generics.Rec0 a)
            GHC.Generics.:*: (GHC.Generics.S1
                                GHC.Generics.NoSelector (GHC.Generics.Rec0 b)
                              GHC.Generics.:*: GHC.Generics.S1
                                                 GHC.Generics.NoSelector GHC.Generics.Par1)))
    -- Defined in ‘GHC.Generics’
  type GHC.Generics.Rep1 ((,) a)
    ~ GHC.Generics.D1
        GHC.Generics.D1(,)
        (GHC.Generics.C1
           GHC.Generics.C1_0(,)
           (GHC.Generics.S1 GHC.Generics.NoSelector (GHC.Generics.Rec0 a)
            GHC.Generics.:*: GHC.Generics.S1
                               GHC.Generics.NoSelector GHC.Generics.Par1))
    -- Defined in ‘GHC.Generics’
  type GHC.Generics.Rep1 (Either a)
    ~ GHC.Generics.D1
        GHC.Generics.D1Either
        (GHC.Generics.C1
           GHC.Generics.C1_0Either
           (GHC.Generics.S1 GHC.Generics.NoSelector (GHC.Generics.Rec0 a))
         GHC.Generics.:+: GHC.Generics.C1
                            GHC.Generics.C1_1Either
                            (GHC.Generics.S1 GHC.Generics.NoSelector GHC.Generics.Par1))
    -- Defined in ‘GHC.Generics’
  type GHC.Generics.Rep1 Maybe
    ~ GHC.Generics.D1
        GHC.Generics.D1Maybe
        (GHC.Generics.C1 GHC.Generics.C1_0Maybe GHC.Generics.U1
         GHC.Generics.:+: GHC.Generics.C1
                            GHC.Generics.C1_1Maybe
                            (GHC.Generics.S1 GHC.Generics.NoSelector GHC.Generics.Par1))
    -- Defined in ‘GHC.Generics’
  type GHC.Generics.Rep1 []
    ~ GHC.Generics.D1
        GHC.Generics.D1[]
        (GHC.Generics.C1 GHC.Generics.C1_0[] GHC.Generics.U1
         GHC.Generics.:+: GHC.Generics.C1
                            GHC.Generics.C1_1[]
                            (GHC.Generics.S1 GHC.Generics.NoSelector GHC.Generics.Par1
                             GHC.Generics.:*: GHC.Generics.S1
                                                GHC.Generics.NoSelector (GHC.Generics.Rec1 [])))
    -- Defined in ‘GHC.Generics’
  type GHC.Generics.Rep1 Data.Monoid.Dual
    ~ GHC.Generics.D1
        Data.Monoid.D1Dual
        (GHC.Generics.C1
           Data.Monoid.C1_0Dual
           (GHC.Generics.S1 Data.Monoid.S1_0_0Dual GHC.Generics.Par1))
    -- Defined in ‘Data.Monoid’
  type GHC.Generics.Rep1 Data.Monoid.Sum
    ~ GHC.Generics.D1
        Data.Monoid.D1Sum
        (GHC.Generics.C1
           Data.Monoid.C1_0Sum
           (GHC.Generics.S1 Data.Monoid.S1_0_0Sum GHC.Generics.Par1))
    -- Defined in ‘Data.Monoid’
  type GHC.Generics.Rep1 Data.Monoid.Product
    ~ GHC.Generics.D1
        Data.Monoid.D1Product
        (GHC.Generics.C1
           Data.Monoid.C1_0Product
           (GHC.Generics.S1 Data.Monoid.S1_0_0Product GHC.Generics.Par1))
    -- Defined in ‘Data.Monoid’
  type GHC.Generics.Rep1 Data.Monoid.First
    ~ GHC.Generics.D1
        Data.Monoid.D1First
        (GHC.Generics.C1
           Data.Monoid.C1_0First
           (GHC.Generics.S1
              Data.Monoid.S1_0_0First (GHC.Generics.Rec1 Maybe)))
    -- Defined in ‘Data.Monoid’
  type GHC.Generics.Rep1 Data.Monoid.Last
    ~ GHC.Generics.D1
        Data.Monoid.D1Last
        (GHC.Generics.C1
           Data.Monoid.C1_0Last
           (GHC.Generics.S1 Data.Monoid.S1_0_0Last (GHC.Generics.Rec1 Maybe)))
    -- Defined in ‘Data.Monoid’
  type GHC.Generics.Rep1 (Control.Applicative.Const a)
    ~ GHC.Generics.D1
        Control.Applicative.D1Const
        (GHC.Generics.C1
           Control.Applicative.C1_0Const
           (GHC.Generics.S1
              Control.Applicative.S1_0_0Const (GHC.Generics.Rec0 a)))
    -- Defined in ‘Control.Applicative’
  type GHC.Generics.Rep1 (Control.Applicative.WrappedMonad m)
    ~ GHC.Generics.D1
        Control.Applicative.D1WrappedMonad
        (GHC.Generics.C1
           Control.Applicative.C1_0WrappedMonad
           (GHC.Generics.S1
              Control.Applicative.S1_0_0WrappedMonad (GHC.Generics.Rec1 m)))
    -- Defined in ‘Control.Applicative’
  type GHC.Generics.Rep1 (Control.Applicative.WrappedArrow a b)
    ~ GHC.Generics.D1
        Control.Applicative.D1WrappedArrow
        (GHC.Generics.C1
           Control.Applicative.C1_0WrappedArrow
           (GHC.Generics.S1
              Control.Applicative.S1_0_0WrappedArrow (GHC.Generics.Rec1 (a b))))
    -- Defined in ‘Control.Applicative’
  type GHC.Generics.Rep1 Control.Applicative.ZipList
    ~ GHC.Generics.D1
        Control.Applicative.D1ZipList
        (GHC.Generics.C1
           Control.Applicative.C1_0ZipList
           (GHC.Generics.S1
              Control.Applicative.S1_0_0ZipList (GHC.Generics.Rec1 [])))
    -- Defined in ‘Control.Applicative’
  type instance a Data.Type.Equality.== b
    ~ Data.Either.EqEither a b
    -- Defined in ‘Data.Either’
End famInstEnvs }
famInstEnvs (Internal) {
End famInstEnvs }
originalCts (simplifyTop)
  fvars =  []
  wanted =  WC {wc_flat = [W] $dNum_ahZ :: Num
                                             Bool [" a use of ‘+’ " p1.hs:3:9] (CNonCanonical)}
Tc9

p1.hs:3:9:
    No instance for (Num Bool) arising from a use of ‘+’
    In the expression: 1 + True
    In an equation for ‘foo’: foo = 1 + True
