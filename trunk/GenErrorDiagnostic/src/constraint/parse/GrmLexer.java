/* The following code was generated by JFlex 1.3.5 on 5/6/12 4:27 PM */

package constraint.parse;
import java_cup.runtime.*;
            

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 5/6/12 4:27 PM from the specification file
 * <tt>file:/home/zhang/projects/jif/GenErrorDiagnostic/src/constraint/parse/constraint.flex</tt>
 */
public class GrmLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int INFO = 1;
  final public static int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = {
     5,  5,  5,  5,  5,  5,  5,  5,  5,  3,  2,  0,  3,  1,  5,  5, 
     5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  0,  0,  0,  0, 
     3,  0, 17,  0,  4,  0,  0,  0, 23, 24,  9,  0,  0, 21,  0,  8, 
     6,  7,  7,  7,  7,  7,  7,  7,  7,  7,  0, 22, 19, 18, 20,  0, 
    25, 16,  4, 10,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4, 12, 11, 
     4,  4, 15, 13, 14,  4,  4,  4,  4,  4,  4,  0, 26,  0,  0,  4, 
     0,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4, 28,  4, 
     4,  4, 29,  4, 27,  4,  4,  4,  4,  4,  4,  0,  0,  0,  0,  5
  };

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    30,    60,    90,    60,   120,    60,   150,   180,    60, 
      210,    60,    60,    60,    60,   240,    60,    60,    60,    60, 
      270,    60,   300,   330,   360,   390,    60,    60,    60,    60, 
       60,   420,   450,   480,   510,   540,   570,   600,   630,   660, 
      690,   720,   120
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\1\3\1\4\2\5\1\6\1\3\1\7\1\10\1\11"+
    "\1\12\1\13\6\6\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\3\3\6\1\25\2\3"+
    "\16\25\1\26\10\25\1\27\3\25\40\0\1\5\37\0"+
    "\4\6\2\0\7\6\12\0\3\6\6\0\2\10\36\0"+
    "\1\30\1\31\30\0\4\6\2\0\1\6\1\32\5\6"+
    "\12\0\3\6\24\0\1\33\11\0\1\25\2\0\16\25"+
    "\1\0\10\25\1\0\3\25\21\0\1\34\11\0\1\35"+
    "\1\36\1\37\1\30\1\4\1\5\33\30\11\40\1\41"+
    "\24\40\4\0\4\6\2\0\2\6\1\42\4\6\12\0"+
    "\3\6\11\40\1\43\24\40\10\0\1\5\1\41\30\0"+
    "\4\6\2\0\3\6\1\44\3\6\12\0\3\6\10\40"+
    "\1\5\1\43\24\40\4\0\4\6\2\0\4\6\1\45"+
    "\2\6\12\0\3\6\4\0\4\6\2\0\5\6\1\46"+
    "\1\6\12\0\3\6\4\0\4\6\2\0\6\6\1\47"+
    "\12\0\3\6\4\0\4\6\2\0\1\50\6\6\12\0"+
    "\3\6\4\0\4\6\2\0\4\6\1\51\2\6\12\0"+
    "\3\6\4\0\4\6\2\0\1\6\1\52\5\6\12\0"+
    "\3\6\4\0\4\6\2\0\5\6\1\53\1\6\12\0"+
    "\3\6";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     0,  0,  9,  1,  9,  1,  9,  1,  1,  9,  1,  9,  9,  9,  9,  1, 
     9,  9,  9,  9,  1,  9,  1,  0,  0,  1,  9,  9,  9,  9,  9,  0, 
     0,  1,  0,  1,  1,  1,  1,  1,  1,  1,  1
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean yy_eof_done;

  /* user code: */
  StringBuffer string = new StringBuffer();

  private Symbol symbol(int type) {
    return new Symbol(type, yyline, yycolumn);
  }
  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline, yycolumn, value);
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public GrmLexer(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public GrmLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[750];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void yy_do_eof() throws java.io.IOException {
    if (!yy_eof_done) {
      yy_eof_done = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 9: 
          {  return symbol(sym.STAR);  }
        case 44: break;
        case 26: 
          {  return symbol(sym.ARROW);  }
        case 45: break;
        case 2: 
        case 8: 
        case 15: 
          {  throw new Error("Illegal character <"+ yytext()+">");  }
        case 46: break;
        case 30: 
          {  string.append('\r');  }
        case 47: break;
        case 29: 
          {  string.append('\n');  }
        case 48: break;
        case 28: 
          {  string.append('\t');  }
        case 49: break;
        case 27: 
          {  string.append('\"');  }
        case 50: break;
        case 22: 
          {  string.append('\\');  }
        case 51: break;
        case 11: 
          {  string.setLength(0); yybegin(INFO);  }
        case 52: break;
        case 17: 
          {  return symbol(sym.LPAREN);  }
        case 53: break;
        case 18: 
          {  return symbol(sym.RPAREN);  }
        case 54: break;
        case 20: 
          {  string.append( yytext() );  }
        case 55: break;
        case 42: 
          {  return symbol(sym.CONSTRACTOR);  }
        case 56: break;
        case 6: 
        case 7: 
          {  return symbol(sym.INTEGER_LITERAL, new Integer(yytext()));  }
        case 57: break;
        case 5: 
        case 10: 
        case 25: 
        case 33: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
        case 40: 
        case 41: 
          {  return symbol(sym.IDENTIFIER, yytext());  }
        case 58: break;
        case 16: 
          {  return symbol(sym.SEMICOLON);  }
        case 59: break;
        case 13: 
          {  return symbol(sym.LEQ);  }
        case 60: break;
        case 12: 
          {  return symbol(sym.EQ);  }
        case 61: break;
        case 3: 
        case 4: 
          {  /* ignore */  }
        case 62: break;
        case 14: 
          {  return symbol(sym.GEQ);  }
        case 63: break;
        case 19: 
          {  return symbol(sym.AT);  }
        case 64: break;
        case 21: 
          {  yybegin(YYINITIAL); 
                                   return symbol(sym.STRING_LITERAL, 
                                   string.toString());  }
        case 65: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
