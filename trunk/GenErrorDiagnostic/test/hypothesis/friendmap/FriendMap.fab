package friendmap;

import java.io.PrintStream;

import fabric.runtime.Runtime;

import mapserv.MapServer;
import mapserv.MapImage;
import mapserv.Box;

import snapp.User;
import snapp.Location;
import snapp.UserWrapper;

import util.GroupIterator;
import util.Delegator;
import util.AssertionFailedError;
import util.NoSuchElementException;
import util.Util;
import util.System;

/**
 * This is the mapping application.  A FriendMap is instantiated with a particular
 * mapping service, and then can be run by any User to generate private or
 * public output maps.
 */
public class FriendMap[label A]
where
  MapServer.provider <= MapImage.provider, MapImage.provider <= MapServer.provider,
  MapServer.provider <= Box.provider,      Box.provider      <= MapServer.provider,

  util.Group.provider         <= {*←},
  util.GroupIterator.provider <= {*←}
{

  /** The map service that this app uses to fetch maps.  Must be non-null. */
  public final MapServer {this}@{A} service;

  /**
   * Create a new instance of the mapping service.
   *
   * @throws NullPointerException
   *         if service is null.
   */
  public
  FriendMap
  {      // side effects:
    this // fields are updated
  }
  (
    MapServer {this} service
  )
  throws
  (
    NullPointerException{*provider; service}
  )
  where
    provider <= {this}
  {
    if (service == null)
      throw new NullPointerException("61 service is null");

    this.service = service;
    super();
  }

  /**
   * prints a map of the user's friends, visible to the user
   *
   * @throws NullPointerException
   *         if user is null.
   */
  public
  void
  viewMap
  {                     // side effects:
    {*→n}             ⊓ // user is fetched
    {*→user.friends}  ⊓ // user's friends are fetched
    {*→service.store} ⊓ // map is fetched
    {*→user.p}          // map is output to the owner
  }
  (
    User[owner,n] user,
    principal     owner,
    principal     n
  )
  throws
  (
    NullPointerException {*provider; user}
  )
  where
    {*provider; *MapServer.provider; user; n; owner} <= {{*→n} ⊓ {*→user.friends} ⊓ {*→service.store} ⊓ {*→user.p}},
    {_→; *←(n,owner)} <= {{*→user.friends} ⊓ {*→user.p}},
    {*←service}       <= {*→user.p},

    // general user invariants
    worker$ actsfor owner,
    (owner,n) equiv user.p,
    user.p  actsfor user.friends
  {
    if (user == null)
      throw new NullPointerException("99 user is null");

    final Store local = worker$.getLocalStore();

    printMap(user, owner, n, new label {*→user.p}@local);
  }

  /**
   * prints a map of the user's friends, visible to the user's friends
   *
   * @throws NullPointerException
   *         if user is null.
   * @throws SecurityException
   *         under unspecified circumstances (whenever jif.runtime.Runtime[user].getRuntime().stdout() would)
   */
  public
  void
  postMap
  {                     // side effects:
    {*→n}             ⊓ // user is fetched
    {*→user.friends}  ⊓ // user's wall is updated; user's friends are fetched
    {*→service.store}   // map is fetched
  }
  (
    final User[owner,n] user,
    final principal     owner,
    final principal     n
  )
  throws
  (
    NullPointerException {*provider; user}
  )
  where
    // see printMap constraints
    {*provider; *MapServer.provider; user; n} <= {{*→n} ⊓ {*→service.store} ⊓ {*→user.friends} ⊓ {*→service.store}},
    {*←service}     <= {*→user.friends},
    {_→; *←owner,n} <= {*→user.friends},

    // general user invariants
    worker$ actsfor owner,
    (owner,n) equiv user.p,
    user.p  actsfor user.friends
  {
    if (user == null)
      throw new NullPointerException("139 user is null");

    printMap(user, owner, n, new label {*→user.friends});
  }


  /**
   * Helper method that gets the map and prints it out.
   *
   * @throws NullPointerException
   *         if user is null.
   * @throws SecurityException
   *         under unspecified circumstances (whenever jif.runtime.Runtime[user].getRuntime().stdout() would)
   */
  private
  void
  printMap
  {                          // side effects
    {*→n}                  ⊓ // fetches of user's information
    {*→service.store}      ⊓ // map service is contacted
    {*lbl}                   // output on lbl channel
  }
  (
    final User[owner,n] user,
    final principal     owner,
    final principal     n,
    final label         lbl
  )
  throws
  (
    NullPointerException {*provider; user}
  )
  where
    // user fetch depends on
    //  - code and caller_pc
    //  - user pointer
    //  - policies
    //  - the intermediate state of the result
    {*provider; *MapServer.provider} <= {*→n},
    {user}                           <= {*→n},
    {n; lbl}                         <= {*→n},
    {*lbl}                           <= {*→n},

    // initial map fetch depends on
    //  - confidentiality of code
    //  - user pointer
    //  - policies
    {*provider; *MapServer.provider} <= {*→service.store},
    {user}                           <= {*→service.store},
    {n; lbl}                         <= {*→service.store},

    // map output depends on
    //  - code
    //  - user and user's contents
    //  - map service results
    //  - policies
    {*provider; *MapServer.provider} <= {*lbl},
    {user}                           <= {*lbl}, {_→; *←(n,owner)} <= {*lbl},
    {*←service}                      <= {*lbl},
    {lbl; n}                         <= {*lbl},

    // invariants
    user.p equiv (n,owner),

    // lbl objects created on worker$
    {*←worker$} <= lbl, lbl <= {*→worker$} // TODO: worker$ ≽ lbl
  {
    if (user == null)
      throw new NullPointerException("214 user is null");

    final Store localStore = worker$.getLocalStore();

    if (localStore equiv worker$)
    {

    MapImage[lbl,{*→localStore}] result = createMap(lbl, localStore, user, owner, n, lbl);
    PrintStream[lbl] out = System.stdout(lbl);

    if (result == null)                                             { throw new AssertionFailedError("224 createMap() returns a non-null value."); }
    try { result.print(out); } catch (final NullPointerException e) { throw new AssertionFailedError("225 System.stdout must return a non-null value"); }

    } else throw new AssertionFailedError("227 worker$ equiv worker$.getLocalStore");
  }


  /**
   * creates a map of the user's friends, visible at label l.  Return value is non-null.
   *
   * @throws NullPointerException
   *         if user is null.
   */
  public
  MapImage[l,{*→s}] {*l}
  createMap
  {                          // side effects:
    {*→n}                  ⊓ // user is fetched
    {*l}                   ⊓ // result  map is updated
    {*→service.store}      ⊓ // initial map is fetched
    {*→s}                  ⊓ // result is created at s
    {*friend_access_bound}   // friends are fetched
  }
  (
    final label  l,
    final Store  s,

    final User[o,n] user,
    final principal o,
    final principal n,

    final label friend_access_bound
  )
  throws
  (
    NullPointerException{*provider; user}
  )
  where
    // user fetch is based on
    //  - code and caller pc
    //  - user pointer
    //  - policies
    // second fetch dependent on copied map, which depends on
    //  - the map service
    //  - the store at which the result is created
    //  - the intermediate state of the map
    {*provider; *MapServer.provider} <= {*→n},
    {user}                           <= {*→n},
    {friend_access_bound; n; l}      <= {*→n},

    {s}                              <= {*→n},
    {*←service}                      <= {*→n},
    {*l}                             <= {*→n},

    // information that flows to the map service:
    //  - code and caller pc            (*provider and caller_pc)
    //  - user and user's contents      (user, {_→; *←n,o})
    //  - fetch policy                  (friend_access_bound)
    //  - friends' policies and locations (checked dynamically)
    {*provider; *MapServer.provider} <= {*→service.store},
    {user}                           <= {*→service.store}, {_→; *←n,o} <= {*→service.store},
    {friend_access_bound; n; l}      <= {*→service.store},

    // information that flows to the resulting map:
    //  - code and caller pc
    //  - user and user's contents
    //  - store and label of result
    //  - friends policies
    //  - (dyn) some friend locations
    //  - fetched map
    {*provider; *MapServer.provider} <= {*l},
    {user}                           <= {*l}, {_→; *←n,o} <= {*l},
    {s; l}                           <= {*l},
    {friend_access_bound; n; l}      <= {*l},
    {*←service}                      <= {*l},

    // fetch of user's friends:
    //  - code and caller pc
    //  - user and user's contents
    //  - policies
    //  - the store at which the result is created (because this affects execution of annotation)
    //  - the intermediate state of the map
    {*provider; *MapServer.provider} <= {*friend_access_bound},
    {user}                           <= {*friend_access_bound}, {_→; *←n,o} <= {*friend_access_bound},
    {friend_access_bound; n; l}      <= {*friend_access_bound},
    {s}                              <= {*friend_access_bound},
    {*l}                             <= {*friend_access_bound},

    // intermediate objects created at local store
    l <= {*→worker$}, {*←worker$} <= l, // TODO: worker$ ≽ l

    // l objects created at s
    {*←s} <= l, l <= {*→s}, {*→s} <= {*→s}, // TODO: s ≽ l@{s→}: result created at s

    // invariants
    user.p equiv (n,o)
  {
    // invariant checks
    if (user == null)
      throw new NullPointerException("320 user is null");
    if (user.friends == null)
      throw new AssertionFailedError("322 user.friends must be non-null");
    if (this.service == null)
      throw new AssertionFailedError("324 service must be non-null");

    final Store fetchStore = service.store;
    final Store localStore = s;

    if (fetchStore actsfor service) {

    // this is the label of the data that gets sent to the service
    final label fetchLabel = new label {{*l} meet {*→fetchStore} meet {*→n} meet {*friend_access_bound}}@service.store;

    // compute bounding box
    final Box[fetchLabel, {*→fetchStore}] boundary = createBoundingBox(user, o, n, fetchLabel, fetchStore, friend_access_bound);

    // get map
    MapImage[fetchLabel,{*→fetchStore}] map;
    try {
      map = this.service.createMap(fetchLabel, new label {*→service.store}@service.store, boundary);
    } catch (final NullPointerException e) {
      throw new AssertionFailedError("342 boundary is non-null.");
    }

    if (map == null)
      throw new AssertionFailedError("346 MapServer.createMap return is non-null.");

    // make a local copy (with label l)
    // TODO: s ≽ l
    MapImage[l,{*→s}] annotated = map.copy(l, new label{*→s}, s);

    // add annotations
    annotateMap(user,      o, n,
                annotated, l, new label {*→s},
                friend_access_bound);

    return annotated;

    } else throw new AssertionFailedError("359 service's store acts for the service");
  }




  /**
   * compute the bounding box containing the locations of all of the user's
   * friends whose locations are visible at label l and whose stores can learn
   * information at level friend_access_bound.
   *
   * @param user
   *              the user whose friends should be bounded
   * @param l
   *              the label of the result, and the bound on the friends included
   * @param s
   *              the store to create the result on
   *
   * @param friend_access_bound
   *             a label constraining the fetches of friends during execution.
   *             Friends will only be added to the bounding box are bounded
   *             below by friend_access_bound.
   *
   */
  protected
  Box[l,{*→s}] {*l}
  createBoundingBox
  {                          // side effects:
    {*l}                   ⊓ // box is updated
    {*→s}                  ⊓ // box is created
    {*→n}                  ⊓ // user is fetched
    {*friend_access_bound}   // user's friends are fetched
  }
  (
    final User[o,n] user,
    final principal o,
    final principal n,

    final label l,
    final Store s,

    final label friend_access_bound
  )
  where

    // update result box
    //  - code and caller pc
    //  - mapping service code
    //  - user and user's contents
    //  - policy
    //  - result parameters (l and s)
    //  - (dyn) user's friends' locations
    {*provider}                 <= l,
    {*MapServer.provider}       <= l,
    {user}                      <= l, {_→; *←n,o} <= l,
    {friend_access_bound; n; l} <= l,
    {l;s}                       <= l,

    // fetch friends
    //  - code anc caller pc
    //  - user and user's contents
    //  - policy
    {*provider}                 <= friend_access_bound,
    {user}                      <= friend_access_bound, {_→; *←n,o} <= friend_access_bound,
    {friend_access_bound; n; l} <= friend_access_bound,

    // fetch user
    //  - code and caller pc
    //  - user pointer
    //  - policy
    {*provider; user; n; l; friend_access_bound} <= {*→n},

    // result is created at s.
    l <= {*→s}, {*←s} <= l, // TODO: s ≽ l

    // invariants
    user.p equiv (n,o)
  {
    // TODO: remove local variable annotations.
    final Box[l, {*→s}] {*l} boundary = new Box[l, {*→s}]@s(0,0,0,0);

    final Store localStore = worker$.getLocalStore();

    // We need to choose a label for the iterator that can flow to
    //  - the resulting map
    //  - a fetch of the user
    //  - a fetch of a qualifying friend
    final label iterLabel = new label {{*l} ⊓ {*→n} ⊓ {*friend_access_bound}};

    final GroupIterator[user.p, iterLabel, {*→n}] i = user.friends.iterator(localStore, iterLabel);
    if (i == null) throw new AssertionFailedError("449 Group.iterator() should return a non-null value");
    while (i.hasNext()) {
      Principal next;
      try { next = i.next(); } catch (NoSuchElementException e) {throw new AssertionFailedError("452 if i.hasNext() then i.next() should return normally.");}

      if (next instanceof UserWrapper[{*→n}]) {
        final UserWrapper[{*→n}] fw = (UserWrapper[{*→n}]) next;
        final principal          fo = fw.userOwner;
        final principal          fn = fw.userNetwork;

        final User[fo,fn] friend = fw.user;
        if (friend == null) throw new AssertionFailedError("460 UserWrapper only wraps non-null users.");

        // check general User invariants
        if (friend.locationLabel equiv new label {_→; *←fn,fo}) {
        if (friend.locationLabel <=    new label {*→fn}) {

        // if we can fetch the user without leaking:
        if (friend_access_bound <= new label {*→fn}) {

        // TODO: solver is failing, so we need to specify a label.
        final Location[friend.locationLabel, {*→fn}] {*friend.locationLabel} loc = friend.location;

        final float x = loc.x;
        final float y = loc.y;

        // if the friend's location can affect the map
        if (new label {_→; *←fo,fn} <= l && friend.locationLabel <= l) {

        if (loc != null) {
          try { boundary.expand(x, y); }
          catch (final NullPointerException e) { throw new AssertionFailedError("480 boundary is non-null."); }
        } // ok: friend has no location
        } // ok: friend won't show us his location
        // TODO: declassifiers
        else {
        }
        } // ok: friend is inaccessible
        } // bad: friend invariant fails
        } // bad: friend invariant fails

        // otherwise we leave him off the map.
      }
    }

    return boundary;
  }




  /**
   * Add a pin corresponding to each of the user's friend to the given map,
   * provided that doing so would not violate information flow constraints.
   *
   * @param user
   *             the user whose friends should be added to the map.  Assumed to be non-null.
   *
   * @param map
   *             the map to be updated.  Assumed to be non-null.
   *
   * @param friend_access_bound
   *             a label constraining the fetches of friends during annotation.
   *             Friends will only be added to the map if their access labels
   *             are bounded below by friend_access_bound.
   */
  protected
  void
  annotateMap
  {                          // side effects:
    {*→n}                  ⊓ // user is fetched
    {*map_access}          ⊓ // map is fetched
    {*friend_access_bound} ⊓ // friends are fetched
    {*map_update}            // map is updated
  }
  (
    final User[o,n] user,
    final principal o,
    final principal n,

    final MapImage[map_update, map_access] map,
    final label map_update,
    final label map_access,

    final label friend_access_bound
  )
  where
    // user fetch based on
    //  - code and caller_pc     (*provider and caller_pc)
    //  - user pointer           (user)
    //  - non-nullness of map    (map)
    {*provider; user; map} <= {*→n},

    // friend fetch based on
    //  - code and caller_pc          (*provider and caller_pc)
    //  - non-nullness of map         (map)
    //  - user's set of valid friends (user, n, user's stuff)
    {*provider} <= {*friend_access_bound},
    {map}       <= {*friend_access_bound},
    {user; n}   <= {*friend_access_bound}, {_→; *←n,o} <= {*friend_access_bound},

    // map and boundary access based on
    //  - code and caller_pc          (*provider and caller_pc)
    //  - map is non-null             (map)
    {*provider;*MapImage.provider} <= {*map_access},
    {map}                          <= {*map_access},

    // map update based on
    //  - code and caller_pc          (*provider and caller_pc)
    //  - whether map is non-null     (map)
    //  - user's set of valid friends (user, n, user's stuff)
    //  - policies                    (map_update, friend_access_bound)
    //  - user's friends' policies    dyn: (friends' stuff)
    //  - user's friends' locations   dyn: (friend.locationInfo)
    {*provider;*MapImage.provider}    <= {*map_update},
    {map}                             <= {*map_update},
    {user; n}                         <= {*map_update}, {_→; *←n,o} <= {*map_update},
    {map_update; friend_access_bound} <= {*map_update},

    // objects are created on the local store.
    {*←worker$} <= map_update, map_update <= {*→worker$}, // TODO: worker$ ≽ map_update

    // general access policy invariants
    {_←}          <= {*map_access},
    {*map_update} <= {*map_access},

    // user invariants
    user.p equiv (n,o),

    // jif bug workaround: label expressions modify the pc (see 2/27 email titled "another jif bug")
    {map_update; n; friend_access_bound} <= {{*→n} ⊓ {*map_update} ⊓ {*map_access} ⊓ {*friend_access_bound}}
  {
    if (map == null) {
      String {*→} s = "582 MapImage.copy return value should be non-null";
      throw new AssertionFailedError(s);
    }

    final Store local = worker$.getLocalStore();
    if (local equiv worker$) {

    final label box_u = map_update;
    final label box_a = new label {*→local};

    final Box[box_u,box_a] boundary = map.getBoundary(box_u, box_a, local);

    // need to choose label L for the iterator such that
    //
    // - caller_pc   <= L   because the method call affects the iterator
    // - {_→; *←n,o} <= L   because friends list affects iterator
    // - user        <= L   because user affects iterator
    //
    // - L <= map_update    because iterator affects map and access
    // - L <= {*→n}         because iterator affects fetch of friend wrappers
    // - L <= {*→fn}        (dyn) because iterator affects fetch of friends
    //
    // - worker$ ≽ L        because the iterator will be stored locally
    //
    // We'll take the highest such label:
    final label iterLabel = new label {{*map_update} ⊓ {*→n} ⊓ {*friend_access_bound}};

    // TODO: solver is failing, so we need to specify a label
    final GroupIterator[user.p, iterLabel, {*→n}]
        {*<-n,o ; user ; friend_access_bound ; n ; map_update}
        j = user.friends.iterator(worker$.getLocalStore(), iterLabel);
    if (j == null) throw new AssertionFailedError("613 Group.iterator() should return a non-null value");

    while (j.hasNext()) {
      Principal next;
      try { next = j.next(); } catch (NoSuchElementException e) { throw new AssertionFailedError("617 if j.hasNext() then j.next() should return normally."); }
      if (next instanceof UserWrapper[{*→n}]) {
        // add friend to the map if possible

        final UserWrapper[{*→n}] fw = (UserWrapper[{*→n}]) next;
        final principal          fo = fw.userOwner;
        final principal          fn = fw.userNetwork;

        final User[fo,fn]   friend = fw.user;
        if (friend == null) throw new AssertionFailedError("626 UserWrapper only wraps non-null users.");

        // check whether we can access the location without leaking:
        //  - code and caller_pc          dyn: (*provider and caller_pc)
        //  - user's set of valid friends dyn: (user, n, user's stuff)
        //
        // we cannot check this directly because {user}, {n} and {caller_pc}
        // are not runtime representable.  Therefore we perform the following
        // check, which implies the requirements:
        if (friend_access_bound <= new label {*→fn}) {

        // check general User invariants
        if (friend.locationLabel equiv new label {_→; *←fn,fo}) {
        if (friend.locationLabel <=    new label {*→fn}) {

        // TODO: the solver is failing, so we need to specify a label.
        final Location[friend.locationLabel, {*→fn}] {*friend.locationLabel} loc = friend.location;

        if (loc != null) {
        final float x = loc.x;
        final float y = loc.y;

        // check whether the location can flow to the map:
        //  - user's friends' policies    dyn: (friends' stuff, map_update)
        //  - user's friends' locations   dyn: (friend.locationInfo)
        if (new label {*friend.locationLabel; *←fo,fn} <= map_update) {

        // the friend has a valid location
        if (boundary != null && boundary.contains(x,y)) {

        try { addPin (map, map_update, map_access, x, y, friend, fo, fn); }
        catch (final NullPointerException e)           { throw new AssertionFailedError("657 annotated and friend are non-null"); }
        catch (final ArrayIndexOutOfBoundsException e) { throw new AssertionFailedError("658 if img.boundary.contains(loc) then img.setAt(loc) should return normally"); }

        } // OK:        friend isn't on the map
        } // OK:        friend's location is too secret
        } // OK:        friend has no location
        } // Assertion: friend.locLabel <= friend.accessLabel
        } // Assertion: friend.locationLabel = *←fo,fn
        } // OK:        it's just not safe to access user
      }
    }

    } //else throw new AssertionFailedError("worker$ equiv worker$.getLocalStore()");
  }




  /**
   * Add a pin corresponding to friend at a given location on a map.
   *
   * @param map      the map to annotate
   * @param x,y      the location on the map to update.  Assumed to be on the map
   * @param friend   the friend located at that location
   *
   * @throws NullPonterException
   *         if friend or map is null
   * @throws ArrayIndexOutOfBoundsException
   *         if location is not on the map
   */
  protected
  void
  addPin
  {               // side effects:
    *map_update ⊓ // map contents are updated
    *map_access   // map contents are fetched
  }
  (
    final MapImage[map_update,map_access] map,
    final label    map_update,
    final label    map_access,

    final float x,
    final float y,

    final User[o,n] friend,
    final principal o,
    final principal n
  )
  :{*provider;*MapImage.provider;map;*map_update;friend}
  throws
  (
    NullPointerException,
    ArrayIndexOutOfBoundsException
  )
  where
    // these (in addition to the caller_pc) affect whether the map can be updated
    {*provider; *MapImage.provider; map; friend} <= {*map_update ⊓ *map_access},

    // when we get to the update, location and friend affect map
    {x; y}                 <= map_update,
    {friend; _→; *←n,o}  <= map_update,

    // general invariants for map images
    map_update <= map_access,
    {_←}       <= map_access
  {
    if (map == null || friend == null)
      throw new NullPointerException("725");

    map.setAt(x, y, 'f');
  }
}


/*
** vim: ts=2 sw=2 et cindent cino=\:0 syntax=java
*/
